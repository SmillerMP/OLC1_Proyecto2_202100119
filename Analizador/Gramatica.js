/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,14],$V2=[1,20],$V3=[1,15],$V4=[1,16],$V5=[1,17],$V6=[1,18],$V7=[1,19],$V8=[1,12],$V9=[1,11],$Va=[5,23,24,26,35,36,37,38,39,100,101],$Vb=[5,20,22,23,24,26,35,36,37,38,39,76,78,93,94,95,97,98,99,100,101,106,107],$Vc=[26,52,66],$Vd=[1,29],$Ve=[1,30],$Vf=[2,25],$Vg=[21,68],$Vh=[1,34],$Vi=[1,48],$Vj=[1,38],$Vk=[1,39],$Vl=[1,40],$Vm=[1,41],$Vn=[1,42],$Vo=[1,43],$Vp=[1,44],$Vq=[1,45],$Vr=[1,46],$Vs=[1,47],$Vt=[1,53],$Vu=[1,59],$Vv=[1,68],$Vw=[1,67],$Vx=[1,69],$Vy=[1,70],$Vz=[1,71],$VA=[1,72],$VB=[2,55],$VC=[1,74],$VD=[21,27,40,43,52,59,60,61,62,63,67,82,84,85,86,87,88,89,90,91,105],$VE=[1,85],$VF=[1,91],$VG=[1,92],$VH=[21,52,82,90,91],$VI=[1,106],$VJ=[1,126],$VK=[21,27,52,67],$VL=[1,158],$VM=[1,159],$VN=[1,162],$VO=[1,170],$VP=[1,164],$VQ=[1,165],$VR=[1,166],$VS=[1,168],$VT=[1,167],$VU=[1,169],$VV=[27,52],$VW=[20,22,23,24,26,35,36,37,38,39,76,78,93,94,95,97,98,99,101,106,107],$VX=[1,239],$VY=[1,249],$VZ=[1,248],$V_=[1,247],$V$=[1,250],$V01=[21,105],$V11=[20,22,23,24,26,35,36,37,38,39,76,78,80,93,94,95,97,98,99,101,106,107],$V21=[1,353],$V31=[78,97,99];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"entornos":4,"EOF":5,"entorno":6,"declaracionVariables":7,"funcionExecute":8,"funciones":9,"comentarios":10,"instrucciones":11,"instruccion":12,"llamarFunciones":13,"sentenciaIfCompleta":14,"ciclosWhile":15,"cicloFor":16,"impresionCout":17,"switchCase":18,"sentenciaReturn":19,"PR_BREAK":20,"PTCOMA":21,"PR_CONTINUE":22,"COM_MULT":23,"COM_SIMPLE":24,"identificadores":25,"ID":26,"COMA":27,"secuenciasEscape":28,"SALTO_LINEA":29,"BARRA_INVERTIDA":30,"COMILLA_DOBLE":31,"TABULACION":32,"COMILLA_SIMPLE":33,"tiposVar":34,"PR_INT":35,"PR_DOUBLE":36,"PR_BOOL":37,"PR_CHAR":38,"PR_STD":39,"DOSPUNTOS":40,"PR_STRING":41,"valores":42,"MENOS":43,"DECIMAL":44,"ENTERO":45,"BOOLEAN":46,"STRING":47,"CHAR":48,"PUNTO":49,"PR_LENGTH":50,"PARIZQ":51,"PARDER":52,"PR_TYPEOF":53,"PR_ROUND":54,"PR_TOUPPER":55,"PR_TOLOWER":56,"PR_TOSTRING":57,"valoresPlus":58,"MAS":59,"POR":60,"DIVIDIDO":61,"POTENCIA":62,"MODULO":63,"valoresArreglos":64,"arregloDeclaraciones":65,"CORIZQ":66,"CORDER":67,"IGUAL":68,"sentenciaLogica":69,"ternario":70,"VectoresMatrices":71,"IncrementoDecremento":72,"PR_NEW":73,"PR_C_STR":74,"sentenciaIf":75,"PR_IF":76,"LLAVIZQ":77,"LLAVDER":78,"sentenciaIfElse":79,"PR_ELSE":80,"sentenciaElse":81,"INTERROGACION":82,"sentenciaRelacional":83,"IGUALES":84,"DIFERENTE":85,"MENOR_QUE":86,"MENOR_IGUAL":87,"MAYOR_QUE":88,"MAYOR_IGUAL":89,"OR":90,"AND":91,"NOT":92,"PR_WHILE":93,"PR_DO":94,"PR_FOR":95,"recursividadCase":96,"PR_CASE":97,"PR_SWITCH":98,"PR_DEFAULT":99,"PR_VOID":100,"PR_EXECUTE":101,"posibilidadesCout":102,"PR_ENDL":103,"funcionCout":104,"SALIDA":105,"PR_COUT":106,"PR_RETURN":107,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",20:"PR_BREAK",21:"PTCOMA",22:"PR_CONTINUE",23:"COM_MULT",24:"COM_SIMPLE",26:"ID",27:"COMA",29:"SALTO_LINEA",30:"BARRA_INVERTIDA",31:"COMILLA_DOBLE",32:"TABULACION",33:"COMILLA_SIMPLE",35:"PR_INT",36:"PR_DOUBLE",37:"PR_BOOL",38:"PR_CHAR",39:"PR_STD",40:"DOSPUNTOS",41:"PR_STRING",43:"MENOS",44:"DECIMAL",45:"ENTERO",46:"BOOLEAN",47:"STRING",48:"CHAR",49:"PUNTO",50:"PR_LENGTH",51:"PARIZQ",52:"PARDER",53:"PR_TYPEOF",54:"PR_ROUND",55:"PR_TOUPPER",56:"PR_TOLOWER",57:"PR_TOSTRING",59:"MAS",60:"POR",61:"DIVIDIDO",62:"POTENCIA",63:"MODULO",66:"CORIZQ",67:"CORDER",68:"IGUAL",73:"PR_NEW",74:"PR_C_STR",76:"PR_IF",77:"LLAVIZQ",78:"LLAVDER",80:"PR_ELSE",82:"INTERROGACION",84:"IGUALES",85:"DIFERENTE",86:"MENOR_QUE",87:"MENOR_IGUAL",88:"MAYOR_QUE",89:"MAYOR_IGUAL",90:"OR",91:"AND",92:"NOT",93:"PR_WHILE",94:"PR_DO",95:"PR_FOR",97:"PR_CASE",98:"PR_SWITCH",99:"PR_DEFAULT",100:"PR_VOID",101:"PR_EXECUTE",103:"PR_ENDL",105:"SALIDA",106:"PR_COUT",107:"PR_RETURN"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[11,2],[11,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,2],[12,2],[12,1],[10,1],[10,1],[25,3],[25,1],[28,2],[28,2],[28,2],[28,2],[28,2],[28,1],[28,1],[28,1],[28,1],[28,1],[34,1],[34,1],[34,1],[34,1],[34,4],[42,2],[42,2],[42,1],[42,1],[42,1],[42,1],[42,1],[42,5],[42,4],[42,4],[42,4],[42,4],[42,4],[42,7],[42,1],[58,3],[58,3],[58,3],[58,3],[58,3],[58,3],[58,1],[64,3],[64,1],[65,4],[65,6],[65,4],[65,2],[7,3],[7,5],[7,8],[7,7],[7,5],[7,8],[7,4],[7,7],[7,1],[72,3],[72,3],[71,11],[71,16],[71,9],[71,17],[71,8],[71,11],[71,7],[71,10],[71,11],[75,7],[79,9],[79,8],[81,4],[14,3],[14,2],[14,2],[14,1],[70,5],[83,3],[83,3],[83,3],[83,3],[83,3],[83,3],[83,1],[69,3],[69,3],[69,2],[69,1],[15,7],[15,9],[16,14],[16,13],[96,5],[96,4],[18,10],[18,7],[9,8],[9,7],[9,8],[9,7],[13,5],[13,4],[8,6],[8,5],[102,1],[102,2],[102,3],[102,4],[102,1],[104,3],[104,1],[17,4],[19,3],[19,6],[19,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 69:
 dic.almacenar($$[$0-1], null) 
break;
case 70:
 dic.almacenar($$[$0-3], $$[$0-1]) 
break;
case 71:
 console.log($$[$0-6], $$[$0-4], $$[$0-2]); 
break;
case 126:
 console.log($$[$0-1], $$[$0]); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,23:$V0,24:$V1,25:9,26:$V2,34:8,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:10,100:$V8,101:$V9},{1:[3]},{5:[1,21],6:22,7:4,8:5,9:6,10:7,23:$V0,24:$V1,25:9,26:$V2,34:8,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:10,100:$V8,101:$V9},o($Va,[2,3]),o($Va,[2,4]),o($Va,[2,5]),o($Va,[2,6]),o($Va,[2,7]),{25:23,26:[1,24]},{68:[1,25]},o($Vb,[2,77]),{26:[1,26]},{26:[1,27]},o($Vb,[2,22]),o($Vb,[2,23]),o($Vc,[2,36]),o($Vc,[2,37]),o($Vc,[2,38]),o($Vc,[2,39]),{40:[1,28]},{27:$Vd,66:$Ve,68:$Vf},{1:[2,1]},o($Va,[2,2]),{21:[1,31],68:[1,32]},o($Vg,$Vf,{27:$Vd,51:[1,33],66:$Vh}),{26:[1,36],39:$Vi,42:37,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,58:35},{51:[1,49]},{51:[1,50]},{40:[1,51]},{25:52,26:$Vt},{45:[1,54]},o($Vb,[2,69]),{26:[1,56],39:$Vi,42:37,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,51:[1,58],53:$Vp,54:$Vq,55:$Vr,56:$Vs,58:61,69:55,70:57,83:60,92:$Vu},{34:64,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,52:[1,63],65:62},{67:[1,65]},{21:[1,66],43:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA},o([21,43,59,60,61,62,63],$VB,{49:$VC,66:[1,73]}),o($VD,[2,62]),{44:[1,75],45:[1,76]},o($VD,[2,43]),o($VD,[2,44]),o($VD,[2,45]),o($VD,[2,46]),o($VD,[2,47]),{51:[1,77]},{51:[1,78]},{51:[1,79]},{51:[1,80]},{40:[1,81]},{26:$VE,39:$Vi,42:37,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,52:[1,83],53:$Vp,54:$Vq,55:$Vr,56:$Vs,58:84,64:82},{34:64,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,52:[1,87],65:86},{41:[1,88]},o($Vg,[2,24]),o($Vg,$Vf,{27:$Vd}),{67:[1,89]},{21:[1,90],82:[1,93],90:$VF,91:$VG},o([21,43,59,60,61,62,63,82,84,85,86,87,88,89,90,91],$VB,{49:$VC,51:[1,94],66:[1,95]}),{21:[1,96]},{34:97,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7},{26:$VE,39:$Vi,42:37,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,58:61,69:98,83:60,92:$Vu},o($VH,[2,108]),o($VH,[2,104],{43:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,84:[1,99],85:[1,100],86:[1,101],87:[1,102],88:[1,103],89:[1,104]}),{27:$VI,52:[1,105]},{77:[1,107]},{26:[1,108]},{66:[1,110],68:[1,109]},o($Vb,[2,75]),{26:$VE,39:$Vi,42:111,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs},{26:$VE,39:$Vi,42:112,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs},{26:$VE,39:$Vi,42:113,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs},{26:$VE,39:$Vi,42:114,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs},{26:$VE,39:$Vi,42:115,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs},{26:$VE,39:$Vi,42:116,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs},{26:$VE,39:$Vi,42:37,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,58:84,64:117},{50:[1,118]},o($VD,[2,41]),o($VD,[2,42]),{26:[1,119]},{44:[1,120],45:[1,121]},{47:[1,122]},{47:[1,123]},{40:[1,124]},{27:$VJ,52:[1,125]},{21:[1,127]},o($VK,[2,64],{43:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA}),o($VD,$VB,{49:$VC}),{27:$VI,52:[1,128]},{77:[1,129]},o($Vc,[2,40]),{66:[1,131],68:[1,130]},o($Vb,[2,70]),{26:$VE,39:$Vi,42:37,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,58:61,83:132},{26:$VE,39:$Vi,42:37,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,58:61,83:133},{26:$VE,39:$Vi,42:37,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,58:134},{26:$VE,39:$Vi,42:37,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,52:[1,136],53:$Vp,54:$Vq,55:$Vr,56:$Vs,58:84,64:135},{45:[1,137]},o($Vb,[2,73]),{52:[1,138]},o($VH,[2,107]),{26:$VE,39:$Vi,42:37,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,58:139},{26:$VE,39:$Vi,42:37,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,58:140},{26:$VE,39:$Vi,42:37,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,58:141},{26:$VE,39:$Vi,42:37,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,58:142},{26:$VE,39:$Vi,42:37,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,58:143},{26:$VE,39:$Vi,42:37,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,58:144},{77:[1,145]},{34:146,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7},{7:149,8:154,10:160,11:147,12:148,13:150,14:151,15:152,16:153,17:155,18:156,19:157,20:$VL,22:$VM,23:$V0,24:$V1,25:9,26:$VN,34:161,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:10,75:163,76:$VO,93:$VP,94:$VQ,95:$VR,98:$VS,101:$V9,106:$VT,107:$VU},o($VV,[2,68],{66:[1,171]}),{26:[1,174],66:[1,173],73:[1,172]},{67:[1,175]},o($VD,[2,56]),o($VD,[2,57]),o($VD,[2,58]),o($VD,[2,59]),o($VD,[2,60]),o($VD,[2,61]),{27:$VJ,67:[1,176]},{51:[1,177]},{52:[1,178]},{52:[1,179]},{52:[1,180]},{52:[1,181]},{52:[1,182]},{57:[1,183]},{21:[1,184]},{26:$VE,39:$Vi,42:37,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,58:185},o($Vb,[2,124]),{77:[1,186]},{7:149,8:154,10:160,11:187,12:148,13:150,14:151,15:152,16:153,17:155,18:156,19:157,20:$VL,22:$VM,23:$V0,24:$V1,25:9,26:$VN,34:161,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:10,75:163,76:$VO,93:$VP,94:$VQ,95:$VR,98:$VS,101:$V9,106:$VT,107:$VU},{26:$VE,39:$Vi,42:37,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,58:188},{45:[1,189]},o($VH,[2,105]),o($VH,[2,106]),{40:[1,190],43:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA},{27:$VJ,52:[1,191]},{21:[1,192]},{67:[1,193]},{26:$VE,39:$Vi,42:37,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,58:194},o($VH,[2,98],{43:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA}),o($VH,[2,99],{43:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA}),o($VH,[2,100],{43:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA}),o($VH,[2,101],{43:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA}),o($VH,[2,102],{43:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA}),o($VH,[2,103],{43:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA}),{7:149,8:154,10:160,11:195,12:148,13:150,14:151,15:152,16:153,17:155,18:156,19:157,20:$VL,22:$VM,23:$V0,24:$V1,25:9,26:$VN,34:161,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:10,75:163,76:$VO,93:$VP,94:$VQ,95:$VR,98:$VS,101:$V9,106:$VT,107:$VU},{26:[1,196]},{7:149,8:154,10:160,12:198,13:150,14:151,15:152,16:153,17:155,18:156,19:157,20:$VL,22:$VM,23:$V0,24:$V1,25:9,26:$VN,34:161,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:10,75:163,76:$VO,78:[1,197],93:$VP,94:$VQ,95:$VR,98:$VS,101:$V9,106:$VT,107:$VU},o($VW,[2,9]),o($VW,[2,10]),o($VW,[2,11]),o($VW,[2,12]),o($VW,[2,13]),o($VW,[2,14]),o($VW,[2,15]),o($VW,[2,16]),o($VW,[2,17]),o($VW,[2,18]),{21:[1,199]},{21:[1,200]},o($VW,[2,21]),{25:23,26:[1,201]},{27:$Vd,51:[1,202],66:$Ve,68:$Vf},o($VW,[2,96],{79:203,81:204,80:[1,205]}),{51:[1,206]},{77:[1,207]},{51:[1,208]},{105:[1,209]},{51:[1,210]},{21:[1,213],26:[1,212],39:$Vi,42:37,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,58:84,64:211},{51:[1,214]},{67:[1,215]},{34:216,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7},{26:$VE,39:$Vi,42:37,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,58:84,64:217},{49:[1,218]},{68:[1,219]},{21:[1,220]},{52:[1,221]},o($VD,[2,49]),o($VD,[2,50]),o($VD,[2,51]),o($VD,[2,52]),o($VD,[2,53]),{51:[1,222]},o($Vb,[2,123]),o($VK,[2,63],{43:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA}),{7:149,8:154,10:160,11:223,12:148,13:150,14:151,15:152,16:153,17:155,18:156,19:157,20:$VL,22:$VM,23:$V0,24:$V1,25:9,26:$VN,34:161,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:10,75:163,76:$VO,93:$VP,94:$VQ,95:$VR,98:$VS,101:$V9,106:$VT,107:$VU},{7:149,8:154,10:160,12:198,13:150,14:151,15:152,16:153,17:155,18:156,19:157,20:$VL,22:$VM,23:$V0,24:$V1,25:9,26:$VN,34:161,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:10,75:163,76:$VO,78:[1,224],93:$VP,94:$VQ,95:$VR,98:$VS,101:$V9,106:$VT,107:$VU},{21:[1,225],43:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA},{67:[1,226]},{26:$VE,39:$Vi,42:37,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,58:227},{21:[1,228]},o($Vb,[2,72]),{21:[1,229],66:[1,230]},{21:[1,231],43:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA},{7:149,8:154,10:160,12:198,13:150,14:151,15:152,16:153,17:155,18:156,19:157,20:$VL,22:$VM,23:$V0,24:$V1,25:9,26:$VN,34:161,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:10,75:163,76:$VO,78:[1,232],93:$VP,94:$VQ,95:$VR,98:$VS,101:$V9,106:$VT,107:$VU},o($VV,[2,65],{66:[1,233]}),o($Va,[2,118]),o($VW,[2,8]),o($VW,[2,19]),o($VW,[2,20]),o($Vg,$Vf,{27:$Vd,66:$Vh}),{26:$VE,39:$Vi,42:37,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,52:[1,235],53:$Vp,54:$Vq,55:$Vr,56:$Vs,58:84,64:234},o($VW,[2,94],{81:236,80:[1,237]}),o($VW,[2,95]),{76:[1,238],77:$VX},{26:$VE,39:$Vi,42:37,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,58:61,69:240,83:60,92:$Vu},{7:149,8:154,10:160,11:241,12:148,13:150,14:151,15:152,16:153,17:155,18:156,19:157,20:$VL,22:$VM,23:$V0,24:$V1,25:9,26:$VN,34:161,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:10,75:163,76:$VO,93:$VP,94:$VQ,95:$VR,98:$VS,101:$V9,106:$VT,107:$VU},{25:243,26:$Vt,34:242,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7},{26:$VY,39:$Vi,42:37,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,51:$VZ,53:$Vp,54:$Vq,55:$Vr,56:$Vs,58:246,92:$V_,102:245,103:$V$,104:244},{26:$VE,39:$Vi,42:37,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,58:251},{21:[1,252],27:$VJ},o([21,27,43,59,60,61,62,63],$VB,{49:$VC,51:[1,253]}),o($VW,[2,135]),{26:$VE,39:$Vi,42:37,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,58:61,69:254,83:60,92:$Vu},o($VV,[2,67]),{66:[1,255]},{27:$VJ,67:[1,256]},{74:[1,257]},{66:[1,259],73:[1,258]},o($Vb,[2,76]),o($VD,[2,48]),{26:$VE,39:$Vi,42:37,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,58:260},{7:149,8:154,10:160,12:198,13:150,14:151,15:152,16:153,17:155,18:156,19:157,20:$VL,22:$VM,23:$V0,24:$V1,25:9,26:$VN,34:161,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:10,75:163,76:$VO,78:[1,261],93:$VP,94:$VQ,95:$VR,98:$VS,101:$V9,106:$VT,107:$VU},o($Va,[2,120]),o($Vb,[2,86]),{68:[1,262]},{21:[2,97],43:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA},o($Vb,[2,71]),o($Vb,[2,84]),{45:[1,263]},o($Vb,[2,74]),o($Va,[2,117]),{67:[1,264]},{27:$VJ,52:[1,265]},{21:[1,266]},o($VW,[2,93]),{76:[1,267],77:$VX},{51:[1,268]},{7:149,8:154,10:160,11:269,12:148,13:150,14:151,15:152,16:153,17:155,18:156,19:157,20:$VL,22:$VM,23:$V0,24:$V1,25:9,26:$VN,34:161,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:10,75:163,76:$VO,93:$VP,94:$VQ,95:$VR,98:$VS,101:$V9,106:$VT,107:$VU},{52:[1,270],90:$VF,91:$VG},{7:149,8:154,10:160,12:198,13:150,14:151,15:152,16:153,17:155,18:156,19:157,20:$VL,22:$VM,23:$V0,24:$V1,25:9,26:$VN,34:161,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:10,75:163,76:$VO,78:[1,271],93:$VP,94:$VQ,95:$VR,98:$VS,101:$V9,106:$VT,107:$VU},{25:272,26:$Vt},{68:[1,273]},{21:[1,274],105:[1,275]},o($V01,[2,131]),o($V01,[2,125],{43:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA}),{46:[1,276]},{26:$VE,39:$Vi,42:37,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,58:61,69:277,83:60,92:$Vu},o([21,43,59,60,61,62,63,105],$VB,{49:$VC,51:[1,278]}),o($V01,[2,129]),{43:$Vv,52:[1,279],59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA},o($VW,[2,133]),{26:$VE,39:$Vi,42:37,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,58:84,64:280},{52:[1,281],90:$VF,91:$VG},{45:[1,282]},{21:[1,283]},{51:[1,284]},{34:285,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7},{66:[1,286]},{43:$Vv,52:[1,287],59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA},o($Va,[2,119]),{26:$VE,39:$Vi,42:37,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,58:288},{67:[1,289]},o($VV,[2,66]),{21:[1,290]},o($VW,[2,122]),{51:[1,291]},{26:$VE,39:$Vi,42:37,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,58:61,69:292,83:60,92:$Vu},{7:149,8:154,10:160,12:198,13:150,14:151,15:152,16:153,17:155,18:156,19:157,20:$VL,22:$VM,23:$V0,24:$V1,25:9,26:$VN,34:161,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:10,75:163,76:$VO,78:[1,293],93:$VP,94:$VQ,95:$VR,98:$VS,101:$V9,106:$VT,107:$VU},{77:[1,294]},{93:[1,295]},{68:[1,296]},{26:$VE,39:$Vi,42:37,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,58:297},o($VW,[2,132]),{26:$VY,39:$Vi,42:37,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,51:$VZ,53:$Vp,54:$Vq,55:$Vr,56:$Vs,58:246,92:$V_,102:298,103:$V$},o($V01,[2,126]),{52:[1,299],90:$VF,91:$VG},{26:$VE,39:$Vi,42:37,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,58:84,64:300},{77:[1,301]},{27:$VJ,52:[1,302]},{77:[1,303]},{67:[1,304]},o($Vb,[2,82]),{52:[1,305]},{66:[1,306]},{26:$VE,39:$Vi,42:37,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,58:84,64:307},o($VD,[2,54]),{21:[1,308],43:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA},{21:[1,309]},o($VW,[2,121]),{26:$VE,39:$Vi,42:37,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,58:61,69:310,83:60,92:$Vu},{52:[1,311],90:$VF,91:$VG},o($VW,[2,92]),{7:149,8:154,10:160,11:312,12:148,13:150,14:151,15:152,16:153,17:155,18:156,19:157,20:$VL,22:$VM,23:$V0,24:$V1,25:9,26:$VN,34:161,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:10,75:163,76:$VO,93:$VP,94:$VQ,95:$VR,98:$VS,101:$V9,106:$VT,107:$VU},{51:[1,313]},{26:$VE,39:$Vi,42:37,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,58:314},{21:[1,315],43:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA},o($V01,[2,130]),o($V01,[2,127]),{27:$VJ,52:[1,316]},{96:317,97:[1,318]},{21:[1,319]},{7:149,8:154,10:160,11:320,12:148,13:150,14:151,15:152,16:153,17:155,18:156,19:157,20:$VL,22:$VM,23:$V0,24:$V1,25:9,26:$VN,34:161,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:10,75:163,76:$VO,93:$VP,94:$VQ,95:$VR,98:$VS,101:$V9,106:$VT,107:$VU},{21:[1,321]},{21:[1,322]},{45:[1,323]},{27:$VJ,67:[1,324]},o($Vb,[2,87]),o($Vb,[2,85]),{52:[1,325],90:$VF,91:$VG},{77:[1,326]},{7:149,8:154,10:160,12:198,13:150,14:151,15:152,16:153,17:155,18:156,19:157,20:$VL,22:$VM,23:$V0,24:$V1,25:9,26:$VN,34:161,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:10,75:163,76:$VO,78:[1,327],93:$VP,94:$VQ,95:$VR,98:$VS,101:$V9,106:$VT,107:$VU},{26:$VE,39:$Vi,42:37,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,58:61,69:328,83:60,92:$Vu},{21:[1,329],43:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA},{26:$VE,39:$Vi,42:37,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,58:61,69:330,83:60,92:$Vu},o($V01,[2,128]),{78:[1,332],97:[1,333],99:[1,331]},{26:$VE,39:$Vi,42:37,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,58:334},o($VW,[2,134]),{7:149,8:154,10:160,12:198,13:150,14:151,15:152,16:153,17:155,18:156,19:157,20:$VL,22:$VM,23:$V0,24:$V1,25:9,26:$VN,34:161,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:10,75:163,76:$VO,78:[1,335],93:$VP,94:$VQ,95:$VR,98:$VS,101:$V9,106:$VT,107:$VU},o($Vb,[2,80]),o($Vb,[2,88]),{67:[1,336]},{27:[1,337]},{77:[1,338]},{7:149,8:154,10:160,11:339,12:148,13:150,14:151,15:152,16:153,17:155,18:156,19:157,20:$VL,22:$VM,23:$V0,24:$V1,25:9,26:$VN,34:161,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:10,75:163,76:$VO,93:$VP,94:$VQ,95:$VR,98:$VS,101:$V9,106:$VT,107:$VU},o($VW,[2,109]),{52:[1,340],90:$VF,91:$VG},{26:$VE,39:$Vi,42:37,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,58:61,69:341,83:60,92:$Vu},{21:[1,342],90:$VF,91:$VG},{40:[1,343]},o($VW,[2,116]),{26:$VE,39:$Vi,42:37,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,58:344},{40:[1,345],43:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA},o($V11,[2,89]),{66:[1,346]},{66:[1,347]},{7:149,8:154,10:160,11:348,12:148,13:150,14:151,15:152,16:153,17:155,18:156,19:157,20:$VL,22:$VM,23:$V0,24:$V1,25:9,26:$VN,34:161,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:10,75:163,76:$VO,93:$VP,94:$VQ,95:$VR,98:$VS,101:$V9,106:$VT,107:$VU},{7:149,8:154,10:160,12:198,13:150,14:151,15:152,16:153,17:155,18:156,19:157,20:$VL,22:$VM,23:$V0,24:$V1,25:9,26:$VN,34:161,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:10,75:163,76:$VO,78:[1,349],93:$VP,94:$VQ,95:$VR,98:$VS,101:$V9,106:$VT,107:$VU},{21:[1,350]},{21:[1,351],90:$VF,91:$VG},{26:$V21,72:352},{7:149,8:154,10:160,11:354,12:148,13:150,14:151,15:152,16:153,17:155,18:156,19:157,20:$VL,22:$VM,23:$V0,24:$V1,25:9,26:$VN,34:161,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:10,75:163,76:$VO,93:$VP,94:$VQ,95:$VR,98:$VS,101:$V9,106:$VT,107:$VU},{40:[1,355],43:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA},{7:149,8:154,10:160,11:356,12:148,13:150,14:151,15:152,16:153,17:155,18:156,19:157,20:$VL,22:$VM,23:$V0,24:$V1,25:9,26:$VN,34:161,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:10,75:163,76:$VO,93:$VP,94:$VQ,95:$VR,98:$VS,101:$V9,106:$VT,107:$VU},{45:[1,357]},{26:$VE,39:$Vi,42:37,43:$Vj,44:$Vk,45:$Vl,46:$Vm,47:$Vn,48:$Vo,53:$Vp,54:$Vq,55:$Vr,56:$Vs,58:84,64:358},{7:149,8:154,10:160,12:198,13:150,14:151,15:152,16:153,17:155,18:156,19:157,20:$VL,22:$VM,23:$V0,24:$V1,25:9,26:$VN,34:161,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:10,75:163,76:$VO,78:[1,359],93:$VP,94:$VQ,95:$VR,98:$VS,101:$V9,106:$VT,107:$VU},o($V11,[2,91]),o($VW,[2,110]),{26:$V21,72:360},{52:[1,361]},{43:[1,363],59:[1,362]},{7:149,8:154,10:160,12:198,13:150,14:151,15:152,16:153,17:155,18:156,19:157,20:$VL,22:$VM,23:$V0,24:$V1,25:9,26:$VN,34:161,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:10,75:163,76:$VO,78:[1,364],93:$VP,94:$VQ,95:$VR,98:$VS,101:$V9,106:$VT,107:$VU},{7:149,8:154,10:160,11:365,12:148,13:150,14:151,15:152,16:153,17:155,18:156,19:157,20:$VL,22:$VM,23:$V0,24:$V1,25:9,26:$VN,34:161,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:10,75:163,76:$VO,93:$VP,94:$VQ,95:$VR,98:$VS,101:$V9,106:$VT,107:$VU},o($V31,[2,114],{25:9,71:10,7:149,13:150,14:151,15:152,16:153,8:154,17:155,18:156,19:157,10:160,34:161,75:163,12:198,20:$VL,22:$VM,23:$V0,24:$V1,26:$VN,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,76:$VO,93:$VP,94:$VQ,95:$VR,98:$VS,101:$V9,106:$VT,107:$VU}),{67:[1,366]},{27:$VJ,67:[1,367]},o($V11,[2,90]),{52:[1,368]},{77:[1,369]},{59:[1,370]},{43:[1,371]},o($VW,[2,115]),o($V31,[2,113],{25:9,71:10,7:149,13:150,14:151,15:152,16:153,8:154,17:155,18:156,19:157,10:160,34:161,75:163,12:198,20:$VL,22:$VM,23:$V0,24:$V1,26:$VN,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,76:$VO,93:$VP,94:$VQ,95:$VR,98:$VS,101:$V9,106:$VT,107:$VU}),{21:[1,372]},{67:[1,373]},{77:[1,374]},{7:149,8:154,10:160,11:375,12:148,13:150,14:151,15:152,16:153,17:155,18:156,19:157,20:$VL,22:$VM,23:$V0,24:$V1,25:9,26:$VN,34:161,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:10,75:163,76:$VO,93:$VP,94:$VQ,95:$VR,98:$VS,101:$V9,106:$VT,107:$VU},{52:[2,78]},{52:[2,79]},o($Vb,[2,81]),{21:[1,376]},{7:149,8:154,10:160,11:377,12:148,13:150,14:151,15:152,16:153,17:155,18:156,19:157,20:$VL,22:$VM,23:$V0,24:$V1,25:9,26:$VN,34:161,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:10,75:163,76:$VO,93:$VP,94:$VQ,95:$VR,98:$VS,101:$V9,106:$VT,107:$VU},{7:149,8:154,10:160,12:198,13:150,14:151,15:152,16:153,17:155,18:156,19:157,20:$VL,22:$VM,23:$V0,24:$V1,25:9,26:$VN,34:161,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:10,75:163,76:$VO,78:[1,378],93:$VP,94:$VQ,95:$VR,98:$VS,101:$V9,106:$VT,107:$VU},o($Vb,[2,83]),{7:149,8:154,10:160,12:198,13:150,14:151,15:152,16:153,17:155,18:156,19:157,20:$VL,22:$VM,23:$V0,24:$V1,25:9,26:$VN,34:161,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:10,75:163,76:$VO,78:[1,379],93:$VP,94:$VQ,95:$VR,98:$VS,101:$V9,106:$VT,107:$VU},o($VW,[2,112]),o($VW,[2,111])],
defaultActions: {21:[2,1],370:[2,78],371:[2,79]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const dic = require('./Almacenamiento');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:return 23; 
break;
case 5:return 24; 
break;
case 6:return 35;
break;
case 7:return 36;
break;
case 8:return 37;
break;
case 9:return 38;
break;
case 10:return 41;
break;
case 11:return 73;
break;
case 12:return 76;
break;
case 13:return 80;
break;
case 14:return 93;
break;
case 15:return 95;
break;
case 16:return 94;
break;
case 17:return 20;
break;
case 18:return 22;
break;
case 19:return 107;
break;
case 20:return 100;
break;
case 21:return 106;
break;
case 22:return 103;
break;
case 23:return 55;
break;
case 24:return 56;
break;
case 25:return 54;
break;
case 26:return 50;
break;
case 27:return 53;
break;
case 28:return 57;
break;
case 29:return 39;
break;
case 30:return 74;
break;
case 31:return 101;
break;
case 32:return 98;
break;
case 33:return 97;
break;
case 34:return 99;
break;
case 35:return 46; 
break;
case 36:return 48; 
break;
case 37:return 47; 
break;
case 38:return 26; 
break;
case 39:return 44; 
break;
case 40:return 45; 
break;
case 41:return 29;
break;
case 42:return 30;
break;
case 43:return 31;
break;
case 44:return 32;
break;
case 45:return 33;
break;
case 46:return 59;
break;
case 47:return 43;
break;
case 48:return 60;
break;
case 49:return 61;
break;
case 50:return 62;
break;
case 51:return 63;
break;
case 52:return 'ENTRADA';
break;
case 53:return 105;
break;
case 54:return 84;
break;
case 55:return 85;
break;
case 56:return 87;
break;
case 57:return 89;
break;
case 58:return 88;
break;
case 59:return 86;
break;
case 60:return 68;
break;
case 61:return 90;
break;
case 62:return 91;
break;
case 63:return 92;
break;
case 64:return 51;
break;
case 65:return 52;
break;
case 66:return 77;
break;
case 67:return 78;
break;
case 68:return 66;
break;
case 69:return 67;
break;
case 70:return 21;
break;
case 71:return 27;
break;
case 72:return 40;
break;
case 73:return 49;
break;
case 74:return 82;
break;
case 75:return 5;
break;
case 76:console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:{COM_MULT})/i,/^(?:{COM_SIMPLE})/i,/^(?:(\/\*[\s\S]*?\*\/))/i,/^(?:(\/\/.*))/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:bool\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:cout\b)/i,/^(?:endl\b)/i,/^(?:toupper\b)/i,/^(?:tolower\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:std\b)/i,/^(?:c_str\b)/i,/^(?:execute\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:(true|false\b))/i,/^(?:('(([^\n\"\\]|\\.)*)'))/i,/^(?:([\"][^\"\n]+[\"]))/i,/^(?:([a-zA-Z_][a-zA-Z0-9_]*))/i,/^(?:([0-9]+\.[0-9]+\b))/i,/^(?:([0-9]+\b))/i,/^(?:\\n)/i,/^(?:\\)/i,/^(?:\\")/i,/^(?:\\t)/i,/^(?:')/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:pow\b)/i,/^(?:%)/i,/^(?:>>)/i,/^(?:<<)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?:,)/i,/^(?::)/i,/^(?:\.)/i,/^(?:\?)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}