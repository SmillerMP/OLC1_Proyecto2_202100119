/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,11],$V1=[1,12],$V2=[1,9],$V3=[1,13],$V4=[1,14],$V5=[1,15],$V6=[1,16],$V7=[1,17],$V8=[1,18],$V9=[5,43],$Va=[5,11,12,14,17,18,19,20,21,40,43],$Vb=[14,32,36],$Vc=[29,30],$Vd=[2,11],$Ve=[1,31],$Vf=[1,36],$Vg=[1,46],$Vh=[1,41],$Vi=[1,42],$Vj=[1,43],$Vk=[1,44],$Vl=[1,45],$Vm=[1,40],$Vn=[1,58],$Vo=[1,59],$Vp=[32,55,56],$Vq=[15,29,32,37,48,49,50,51,52,53,55,56],$Vr=[2,22],$Vs=[1,112],$Vt=[15,37],$Vu=[5,11,12,14,17,18,19,20,21,40,43,45];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracionVariables":7,"VectoresMatrices":8,"sentenciaIfCompleta":9,"comentarios":10,"COM_MULT":11,"COM_SIMPLE":12,"identificadores":13,"ID":14,"COMA":15,"tiposVar":16,"PR_INT":17,"PR_DOUBLE":18,"PR_BOOL":19,"PR_CHAR":20,"PR_STRING":21,"valores":22,"DECIMAL":23,"ENTERO":24,"BOOLEAN":25,"STRING":26,"CHAR":27,"valoresArreglos":28,"PTCOMA":29,"IGUAL":30,"PARIZQ":31,"PARDER":32,"IncrementoDecremento":33,"MAS":34,"MENOS":35,"CORIZQ":36,"CORDER":37,"PR_NEW":38,"sentenciaIf":39,"PR_IF":40,"sentenciaLogica":41,"LLAVIZQ":42,"LLAVDER":43,"sentenciaIfElse":44,"PR_ELSE":45,"sentenciaElse":46,"sentenciaRelacional":47,"IGUALES":48,"DIFERENTE":49,"MENOR_QUE":50,"MENOR_IGUAL":51,"MAYOR_QUE":52,"MAYOR_IGUAL":53,"NOT":54,"OR":55,"AND":56,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:"COM_MULT",12:"COM_SIMPLE",14:"ID",15:"COMA",17:"PR_INT",18:"PR_DOUBLE",19:"PR_BOOL",20:"PR_CHAR",21:"PR_STRING",23:"DECIMAL",24:"ENTERO",25:"BOOLEAN",26:"STRING",27:"CHAR",29:"PTCOMA",30:"IGUAL",31:"PARIZQ",32:"PARDER",34:"MAS",35:"MENOS",36:"CORIZQ",37:"CORDER",38:"PR_NEW",40:"PR_IF",42:"LLAVIZQ",43:"LLAVDER",45:"PR_ELSE",48:"IGUALES",49:"DIFERENTE",50:"MENOR_QUE",51:"MENOR_IGUAL",52:"MAYOR_QUE",53:"MAYOR_IGUAL",54:"NOT",55:"OR",56:"AND"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[10,1],[10,1],[13,3],[13,1],[16,1],[16,1],[16,1],[16,1],[16,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[28,3],[28,1],[7,3],[7,5],[7,8],[33,3],[33,3],[8,11],[8,16],[8,9],[8,17],[8,8],[8,11],[8,7],[8,10],[39,7],[44,8],[44,7],[46,4],[9,3],[9,2],[9,2],[9,1],[47,3],[47,3],[47,3],[47,3],[47,3],[47,3],[47,1],[47,2],[41,3],[41,3],[41,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:$V0,12:$V1,14:$V2,16:8,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,39:10,40:$V8},{1:[3]},{5:[1,19]},o($V9,[2,3],{6:3,7:4,8:5,9:6,10:7,16:8,39:10,4:20,11:$V0,12:$V1,14:$V2,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,40:$V8}),o($Va,[2,4]),o($Va,[2,5]),o($Va,[2,6]),o($Va,[2,7]),{13:21,14:[1,22]},{36:[1,23]},o($Va,[2,45],{44:24,46:25,45:[1,26]}),o($Va,[2,8]),o($Va,[2,9]),o($Vb,[2,12]),o($Vb,[2,13]),o($Vb,[2,14]),o($Vb,[2,15]),o($Vb,[2,16]),{31:[1,27]},{1:[2,1]},o($V9,[2,2]),{29:[1,28],30:[1,29]},o($Vc,$Vd,{15:$Ve,36:[1,30]}),{24:[1,32]},o($Va,[2,43],{46:33,45:[1,34]}),o($Va,[2,44]),{31:[1,35],42:$Vf},{14:$Vg,22:39,23:$Vh,24:$Vi,25:$Vj,26:$Vk,27:$Vl,41:37,47:38,54:$Vm},o($Va,[2,25]),{14:[1,49],22:47,23:$Vh,24:$Vi,25:$Vj,26:$Vk,27:$Vl,31:[1,48]},{37:[1,50]},{13:51,14:[1,52]},{37:[1,53]},o($Va,[2,42]),{31:[1,54],42:$Vf},{14:$Vg,22:39,23:$Vh,24:$Vi,25:$Vj,26:$Vk,27:$Vl,41:55,47:38,54:$Vm},{4:56,6:3,7:4,8:5,9:6,10:7,11:$V0,12:$V1,14:$V2,16:8,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,39:10,40:$V8},{32:[1,57],55:$Vn,56:$Vo},o($Vp,[2,56]),o($Vp,[2,52],{48:[1,60],49:[1,61],50:[1,62],51:[1,63],52:[1,64],53:[1,65]}),{14:$Vg,22:66,23:$Vh,24:$Vi,25:$Vj,26:$Vk,27:$Vl},o($Vq,[2,17]),o($Vq,[2,18]),o($Vq,[2,19]),o($Vq,[2,20]),o($Vq,[2,21]),o($Vq,$Vr),{29:[1,67]},{16:68,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7},{29:$Vr,36:[1,69]},{30:[1,70],36:[1,71]},o($Vc,[2,10]),o($Vc,$Vd,{15:$Ve}),{30:[1,72],36:[1,73]},{14:$Vg,22:39,23:$Vh,24:$Vi,25:$Vj,26:$Vk,27:$Vl,41:74,47:38,54:$Vm},{32:[1,75],55:$Vn,56:$Vo},{43:[1,76]},{42:[1,77]},{14:$Vg,22:39,23:$Vh,24:$Vi,25:$Vj,26:$Vk,27:$Vl,47:78,54:$Vm},{14:$Vg,22:39,23:$Vh,24:$Vi,25:$Vj,26:$Vk,27:$Vl,47:79,54:$Vm},{14:$Vg,22:80,23:$Vh,24:$Vi,25:$Vj,26:$Vk,27:$Vl},{14:$Vg,22:81,23:$Vh,24:$Vi,25:$Vj,26:$Vk,27:$Vl},{14:$Vg,22:82,23:$Vh,24:$Vi,25:$Vj,26:$Vk,27:$Vl},{14:$Vg,22:83,23:$Vh,24:$Vi,25:$Vj,26:$Vk,27:$Vl},{14:$Vg,22:84,23:$Vh,24:$Vi,25:$Vj,26:$Vk,27:$Vl},{14:$Vg,22:85,23:$Vh,24:$Vi,25:$Vj,26:$Vk,27:$Vl},o($Vp,[2,53]),o($Va,[2,26]),{32:[1,86]},{24:[1,87]},{36:[1,89],38:[1,88]},{37:[1,90]},{14:$Vg,22:91,23:$Vh,24:$Vi,25:$Vj,26:$Vk,27:$Vl},{24:[1,92]},{32:[1,93],55:$Vn,56:$Vo},{42:[1,94]},o($Va,[2,41]),{4:95,6:3,7:4,8:5,9:6,10:7,11:$V0,12:$V1,14:$V2,16:8,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,39:10,40:$V8},o($Vp,[2,54]),o($Vp,[2,55]),o($Vp,[2,46]),o($Vp,[2,47]),o($Vp,[2,48]),o($Vp,[2,49]),o($Vp,[2,50]),o($Vp,[2,51]),{14:$Vg,22:96,23:$Vh,24:$Vi,25:$Vj,26:$Vk,27:$Vl},{37:[1,97]},{16:98,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7},{14:$Vg,22:100,23:$Vh,24:$Vi,25:$Vj,26:$Vk,27:$Vl,28:99},{30:[1,101]},{29:[1,102]},{37:[1,103]},{42:[1,104]},{4:105,6:3,7:4,8:5,9:6,10:7,11:$V0,12:$V1,14:$V2,16:8,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,39:10,40:$V8},{43:[1,106]},{29:[1,107]},{29:[1,108],36:[1,109]},{36:[1,110]},{15:$Vs,37:[1,111]},o($Vt,[2,24]),{36:[1,114],38:[1,113]},o($Va,[2,36]),{30:[1,115]},{4:116,6:3,7:4,8:5,9:6,10:7,11:$V0,12:$V1,14:$V2,16:8,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7,39:10,40:$V8},{43:[1,117]},o($Vu,[2,38]),o($Va,[2,27]),o($Va,[2,34]),{24:[1,118]},{24:[1,119]},{29:[1,120]},{14:$Vg,22:121,23:$Vh,24:$Vi,25:$Vj,26:$Vk,27:$Vl},{16:122,17:$V3,18:$V4,19:$V5,20:$V6,21:$V7},{36:[1,123]},{14:$Vg,22:124,23:$Vh,24:$Vi,25:$Vj,26:$Vk,27:$Vl},{43:[1,125]},o($Vu,[2,40]),{37:[1,126]},{37:[1,127]},o($Va,[2,32]),o($Vt,[2,23]),{36:[1,128]},{14:$Vg,22:100,23:$Vh,24:$Vi,25:$Vj,26:$Vk,27:$Vl,28:129},{29:[1,130]},o($Vu,[2,39]),{29:[1,131]},{29:[1,132]},{24:[1,133]},{15:$Vs,37:[1,134]},o($Va,[2,37]),o($Va,[2,35]),o($Va,[2,30]),{37:[1,135]},{15:[1,136]},{36:[1,137]},{36:[1,138]},{24:[1,139]},{14:$Vg,22:100,23:$Vh,24:$Vi,25:$Vj,26:$Vk,27:$Vl,28:140},{37:[1,141]},{15:$Vs,37:[1,142]},{29:[1,143]},{37:[1,144]},o($Va,[2,31]),{29:[1,145]},o($Va,[2,33])],
defaultActions: {19:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:return 11; 
break;
case 5:return 12; 
break;
case 6:return 17;
break;
case 7:return 18;
break;
case 8:return 19;
break;
case 9:return 20;
break;
case 10:return 21;
break;
case 11:return 38;
break;
case 12:return 40;
break;
case 13:return 45;
break;
case 14:return 'PR_WHILE';
break;
case 15:return 25; 
break;
case 16:return 27; 
break;
case 17:return 26; 
break;
case 18:return 14; 
break;
case 19:return 23; 
break;
case 20:return 24; 
break;
case 21:return 'SALTO_LINEA';
break;
case 22:return 'BARRA_INVERTIDA';
break;
case 23:return 'COMILLA_DOBLE';
break;
case 24:return 'TABULACION';
break;
case 25:return 'COMILLA_SIMPLE';
break;
case 26:return 34;
break;
case 27:return 35;
break;
case 28:return 'POR';
break;
case 29:return 'DIVIDIDO';
break;
case 30:return 'POTENCIA';
break;
case 31:return 'MODULO';
break;
case 32:return 'UMENOS';
break;
case 33:return 48;
break;
case 34:return 49;
break;
case 35:return 51;
break;
case 36:return 53;
break;
case 37:return 52;
break;
case 38:return 50;
break;
case 39:return 30;
break;
case 40:return 55;
break;
case 41:return 56;
break;
case 42:return 54;
break;
case 43:return 31;
break;
case 44:return 32;
break;
case 45:return 42;
break;
case 46:return 43;
break;
case 47:return 36;
break;
case 48:return 37;
break;
case 49:return 29;
break;
case 50:return 15;
break;
case 51:return 5;
break;
case 52:console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:{COM_MULT})/i,/^(?:{COM_SIMPLE})/i,/^(?:(\/\*[\s\S]*?\*\/))/i,/^(?:(\/\/.*))/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:bool\b)/i,/^(?:char\b)/i,/^(?:std::string\b)/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:(true|false\b))/i,/^(?:('(([^\n\"\\]|\\.)*)'))/i,/^(?:([\"][^\"\n]+[\"]))/i,/^(?:([a-zA-Z_][a-zA-Z0-9_]*))/i,/^(?:([0-9]+\.[0-9]+\b))/i,/^(?:([0-9]+\b))/i,/^(?:\\n)/i,/^(?:\\)/i,/^(?:\\")/i,/^(?:\\t)/i,/^(?:')/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:pow\b)/i,/^(?:%)/i,/^(?:-exp\b)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?:,)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}