/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,14],$V2=[1,15],$V3=[1,26],$V4=[1,27],$V5=[1,18],$V6=[1,28],$V7=[1,29],$V8=[1,30],$V9=[1,31],$Va=[1,32],$Vb=[1,33],$Vc=[1,20],$Vd=[1,21],$Ve=[1,22],$Vf=[1,23],$Vg=[1,24],$Vh=[1,25],$Vi=[5,73],$Vj=[5,16,18,19,22,23,25,34,35,36,37,38,70,73,87,88,89,90,91,97],$Vk=[1,47],$Vl=[1,41],$Vm=[1,42],$Vn=[1,43],$Vo=[1,44],$Vp=[1,45],$Vq=[1,46],$Vr=[25,57,65],$Vs=[1,65],$Vt=[1,64],$Vu=[1,66],$Vv=[1,67],$Vw=[1,68],$Vx=[1,69],$Vy=[17,26,42,48,49,50,51,52,57,66,78,79,80,81,82,83,85,86,96],$Vz=[2,44],$VA=[1,72],$VB=[17,55],$VC=[2,21],$VD=[1,76],$VE=[1,84],$VF=[1,88],$VG=[1,97],$VH=[1,98],$VI=[1,101],$VJ=[1,102],$VK=[1,100],$VL=[1,99],$VM=[1,103],$VN=[5,16,17,18,19,22,23,25,34,35,36,37,38,70,73,87,88,89,90,91,97],$VO=[1,117],$VP=[1,118],$VQ=[1,114],$VR=[1,115],$VS=[1,116],$VT=[1,124],$VU=[1,127],$VV=[26,57,66],$VW=[1,133],$VX=[1,134],$VY=[17,57,85,86],$VZ=[17,96],$V_=[17,42,48,49,50,51,52],$V$=[1,161],$V01=[1,162],$V11=[1,172],$V21=[2,57],$V31=[26,57],$V41=[1,270],$V51=[5,16,18,19,22,23,25,34,35,36,37,38,70,73,75,87,88,89,90,91,97];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracionVariables":7,"VectoresMatrices":8,"sentenciaIfCompleta":9,"ciclosWhile":10,"cicloFor":11,"funciones":12,"metodos":13,"funcionExecute":14,"impresionCout":15,"PR_BREAK":16,"PTCOMA":17,"PR_CONTINUE":18,"PR_RETURN":19,"valoresPlus":20,"comentarios":21,"COM_MULT":22,"COM_SIMPLE":23,"identificadores":24,"ID":25,"COMA":26,"secuenciasEscape":27,"SALTO_LINEA":28,"BARRA_INVERTIDA":29,"COMILLA_DOBLE":30,"TABULACION":31,"COMILLA_SIMPLE":32,"tiposVar":33,"PR_INT":34,"PR_DOUBLE":35,"PR_BOOL":36,"PR_CHAR":37,"PR_STD":38,"DOSPUNTOS":39,"PR_STRING":40,"valores":41,"MENOS":42,"DECIMAL":43,"ENTERO":44,"BOOLEAN":45,"STRING":46,"CHAR":47,"MAS":48,"POR":49,"DIVIDIDO":50,"POTENCIA":51,"MODULO":52,"valoresArreglos":53,"arregloDeclaraciones":54,"IGUAL":55,"PARIZQ":56,"PARDER":57,"PR_TOUPPER":58,"PR_TOLOWER":59,"PR_ROUND":60,"PUNTO":61,"PR_LENGTH":62,"PR_TOSTRING":63,"IncrementoDecremento":64,"CORIZQ":65,"CORDER":66,"PR_NEW":67,"PR_C_STR":68,"sentenciaIf":69,"PR_IF":70,"sentenciaLogica":71,"LLAVIZQ":72,"LLAVDER":73,"sentenciaIfElse":74,"PR_ELSE":75,"sentenciaElse":76,"sentenciaRelacional":77,"IGUALES":78,"DIFERENTE":79,"MENOR_QUE":80,"MENOR_IGUAL":81,"MAYOR_QUE":82,"MAYOR_IGUAL":83,"NOT":84,"OR":85,"AND":86,"PR_WHILE":87,"PR_DO":88,"PR_FOR":89,"PR_VOID":90,"PR_EXECUTE":91,"posibilidadesCout":92,"PR_TYPEOF":93,"PR_ENDL":94,"funcionCout":95,"SALIDA":96,"PR_COUT":97,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",16:"PR_BREAK",17:"PTCOMA",18:"PR_CONTINUE",19:"PR_RETURN",22:"COM_MULT",23:"COM_SIMPLE",25:"ID",26:"COMA",28:"SALTO_LINEA",29:"BARRA_INVERTIDA",30:"COMILLA_DOBLE",31:"TABULACION",32:"COMILLA_SIMPLE",34:"PR_INT",35:"PR_DOUBLE",36:"PR_BOOL",37:"PR_CHAR",38:"PR_STD",39:"DOSPUNTOS",40:"PR_STRING",42:"MENOS",43:"DECIMAL",44:"ENTERO",45:"BOOLEAN",46:"STRING",47:"CHAR",48:"MAS",49:"POR",50:"DIVIDIDO",51:"POTENCIA",52:"MODULO",55:"IGUAL",56:"PARIZQ",57:"PARDER",58:"PR_TOUPPER",59:"PR_TOLOWER",60:"PR_ROUND",61:"PUNTO",62:"PR_LENGTH",63:"PR_TOSTRING",65:"CORIZQ",66:"CORDER",67:"PR_NEW",68:"PR_C_STR",70:"PR_IF",72:"LLAVIZQ",73:"LLAVDER",75:"PR_ELSE",78:"IGUALES",79:"DIFERENTE",80:"MENOR_QUE",81:"MENOR_IGUAL",82:"MAYOR_QUE",83:"MAYOR_IGUAL",84:"NOT",85:"OR",86:"AND",87:"PR_WHILE",88:"PR_DO",89:"PR_FOR",90:"PR_VOID",91:"PR_EXECUTE",93:"PR_TYPEOF",94:"PR_ENDL",96:"SALIDA",97:"PR_COUT"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,3],[6,2],[6,1],[21,1],[21,1],[24,3],[24,1],[27,2],[27,2],[27,2],[27,2],[27,2],[27,1],[27,1],[27,1],[27,1],[27,1],[33,1],[33,1],[33,1],[33,1],[33,4],[41,2],[41,2],[41,1],[41,1],[41,1],[41,1],[41,1],[41,1],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,1],[53,3],[53,1],[54,4],[54,2],[7,3],[7,5],[7,8],[7,7],[7,8],[7,8],[7,8],[7,8],[7,9],[7,11],[7,8],[64,3],[64,3],[8,11],[8,16],[8,9],[8,17],[8,8],[8,11],[8,7],[8,10],[8,11],[69,7],[74,9],[74,8],[76,4],[9,3],[9,2],[9,2],[9,1],[77,3],[77,3],[77,3],[77,3],[77,3],[77,3],[77,1],[77,2],[71,3],[71,3],[71,1],[10,7],[10,9],[11,11],[11,14],[12,8],[12,7],[13,8],[13,7],[13,5],[13,4],[14,6],[14,5],[92,1],[92,4],[92,7],[92,4],[92,5],[92,4],[92,4],[92,4],[92,4],[92,1],[95,3],[95,1],[15,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,18:$V1,19:$V2,21:16,22:$V3,23:$V4,25:$V5,33:17,34:$V6,35:$V7,36:$V8,37:$V9,38:$Va,69:19,70:$Vb,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,97:$Vh},{1:[3]},{5:[1,34]},o($Vi,[2,3],{6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,21:16,33:17,69:19,4:35,16:$V0,18:$V1,19:$V2,22:$V3,23:$V4,25:$V5,34:$V6,35:$V7,36:$V8,37:$V9,38:$Va,70:$Vb,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,97:$Vh}),o($Vj,[2,4]),o($Vj,[2,5]),o($Vj,[2,6]),o($Vj,[2,7]),o($Vj,[2,8]),o($Vj,[2,9]),o($Vj,[2,10]),o($Vj,[2,11]),o($Vj,[2,12]),{17:[1,36]},{17:[1,37]},{17:[1,39],20:38,25:$Vk,41:40,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq},o($Vj,[2,17]),{24:48,25:[1,49]},{56:[1,51],65:[1,50]},o($Vj,[2,85],{74:52,76:53,75:[1,54]}),{56:[1,55]},{72:[1,56]},{56:[1,57]},{25:[1,58]},{25:[1,59]},{96:[1,60]},o($Vj,[2,18]),o($Vj,[2,19]),o($Vr,[2,32]),o($Vr,[2,33]),o($Vr,[2,34]),o($Vr,[2,35]),{39:[1,61]},{56:[1,62]},{1:[2,1]},o($Vi,[2,2]),o($Vj,[2,13]),o($Vj,[2,14]),{17:[1,63],42:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx},o($Vj,[2,16]),o($Vy,[2,51]),{43:[1,70],44:[1,71]},o($Vy,[2,39]),o($Vy,[2,40]),o($Vy,[2,41]),o($Vy,[2,42]),o($Vy,[2,43]),o($Vy,$Vz),{17:$VA,55:[1,73]},o($VB,$VC,{26:$VD,56:[1,75],65:[1,74]}),{44:[1,77]},{20:80,25:$Vk,41:40,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,53:78,57:[1,79]},o($Vj,[2,83],{76:81,75:[1,82]}),o($Vj,[2,84]),{70:[1,83],72:$VE},{20:87,25:$Vk,41:40,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,71:85,77:86,84:$VF},{4:89,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,18:$V1,19:$V2,21:16,22:$V3,23:$V4,25:$V5,33:17,34:$V6,35:$V7,36:$V8,37:$V9,38:$Va,69:19,70:$Vb,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,97:$Vh},{7:90,33:91,34:$V6,35:$V7,36:$V8,37:$V9,38:$Va},{56:[1,92]},{56:[1,93]},{20:96,25:$VG,38:$VH,41:40,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,58:$VI,59:$VJ,60:$VK,92:95,93:$VL,94:$VM,95:94},{39:[1,104]},{20:87,25:$Vk,41:40,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,71:105,77:86,84:$VF},o($Vj,[2,15]),{25:$Vk,41:106,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq},{25:$Vk,41:107,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq},{25:$Vk,41:108,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq},{25:$Vk,41:109,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq},{25:$Vk,41:110,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq},{25:$Vk,41:111,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq},o($Vy,[2,37]),o($Vy,[2,38]),o($VN,[2,56]),{20:112,25:[1,113],38:$VO,41:40,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,56:$VP,58:$VQ,59:$VR,60:$VS},{66:[1,119]},{33:122,34:$V6,35:$V7,36:$V8,37:$V9,38:$Va,54:120,57:[1,121]},{24:123,25:$VT},{66:[1,125]},{26:$VU,57:[1,126]},{17:[1,128]},o($VV,[2,53],{42:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx}),o($Vj,[2,82]),{70:[1,129],72:$VE},{56:[1,130]},{4:131,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,18:$V1,19:$V2,21:16,22:$V3,23:$V4,25:$V5,33:17,34:$V6,35:$V7,36:$V8,37:$V9,38:$Va,69:19,70:$Vb,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,97:$Vh},{57:[1,132],85:$VW,86:$VX},o($VY,[2,96]),o($VY,[2,92],{42:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,78:[1,135],79:[1,136],80:[1,137],81:[1,138],82:[1,139],83:[1,140]}),{20:141,25:$Vk,41:40,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq},{73:[1,142]},{17:[1,143]},{24:144,25:$VT},{33:122,34:$V6,35:$V7,36:$V8,37:$V9,38:$Va,54:145,57:[1,146]},{20:80,25:$Vk,41:40,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,53:147,57:[1,148]},{17:[1,149],96:[1,150]},o($VZ,[2,120]),o($VZ,[2,109],{42:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx}),o([17,42,48,49,50,51,52,96],$Vz,{56:[1,151],61:[1,152]}),{39:[1,153]},{56:[1,154]},{56:[1,155]},{56:[1,156]},{56:[1,157]},o($VZ,[2,118]),{40:[1,158]},{57:[1,159],85:$VW,86:$VX},o($Vy,[2,45]),o($Vy,[2,46]),o($Vy,[2,47]),o($Vy,[2,48]),o($Vy,[2,49]),o($Vy,[2,50]),{17:[1,160],42:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx},o($V_,$Vz,{56:$V$,61:$V01,65:[1,163]}),{56:[1,164]},{56:[1,165]},{56:[1,166]},{39:[1,167]},{33:168,34:$V6,35:$V7,36:$V8,37:$V9,38:$Va},{55:[1,169],65:[1,170]},{26:$V11,57:[1,171]},{72:[1,173]},{25:[1,174]},o($VB,[2,20]),o($VB,$VC,{26:$VD}),{55:[1,175],65:[1,176]},{17:[1,177]},{20:178,25:$Vk,41:40,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq},o($Vj,[2,106]),{56:[1,179]},{20:87,25:$Vk,41:40,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,71:180,77:86,84:$VF},{73:[1,181]},{72:[1,182]},{20:87,25:$Vk,41:40,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,77:183,84:$VF},{20:87,25:$Vk,41:40,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,77:184,84:$VF},{20:185,25:$Vk,41:40,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq},{20:186,25:$Vk,41:40,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq},{20:187,25:$Vk,41:40,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq},{20:188,25:$Vk,41:40,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq},{20:189,25:$Vk,41:40,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq},{20:190,25:$Vk,41:40,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq},o($VY,[2,93],{42:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx}),{87:[1,191]},{20:87,25:$Vk,41:40,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,71:192,77:86,84:$VF},{17:$VA,55:[1,193]},{26:$V11,57:[1,194]},{72:[1,195]},{26:$VU,57:[1,196]},{17:[1,197]},o($Vj,[2,121]),{20:96,25:$VG,38:$VH,41:40,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,58:$VI,59:$VJ,60:$VK,92:198,93:$VL,94:$VM},{20:80,25:$Vk,41:40,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,53:199},{62:[1,200]},{39:[1,201]},{25:[1,202]},{43:[1,203],44:[1,204]},{46:[1,205]},{46:[1,206]},o($Vr,[2,36]),{72:[1,207]},o($Vj,$V21),{20:80,25:$Vk,41:40,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,53:208,57:[1,209]},{62:[1,210]},{44:[1,211]},{46:[1,212]},{46:[1,213]},{43:[1,214],44:[1,215]},{39:[1,216]},{57:[1,217]},{25:[1,220],65:[1,219],67:[1,218]},{66:[1,221]},{72:[1,222]},{33:223,34:$V6,35:$V7,36:$V8,37:$V9,38:$Va},{4:224,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,18:$V1,19:$V2,21:16,22:$V3,23:$V4,25:$V5,33:17,34:$V6,35:$V7,36:$V8,37:$V9,38:$Va,69:19,70:$Vb,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,97:$Vh},o($V31,[2,55]),{20:225,25:$Vk,41:40,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq},{44:[1,226]},o($Vj,[2,105]),o($VV,[2,52],{42:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx}),{20:87,25:$Vk,41:40,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,71:227,77:86,84:$VF},{57:[1,228],85:$VW,86:$VX},o($Vj,[2,81]),{4:229,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,18:$V1,19:$V2,21:16,22:$V3,23:$V4,25:$V5,33:17,34:$V6,35:$V7,36:$V8,37:$V9,38:$Va,69:19,70:$Vb,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,97:$Vh},o($VY,[2,94]),o($VY,[2,95]),o($VY,[2,86],{42:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx}),o($VY,[2,87],{42:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx}),o($VY,[2,88],{42:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx}),o($VY,[2,89],{42:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx}),o($VY,[2,90],{42:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx}),o($VY,[2,91],{42:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx}),{56:[1,230]},{17:[1,231],85:$VW,86:$VX},{20:232,25:[1,233],38:$VO,41:40,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,56:$VP,58:$VQ,59:$VR,60:$VS},{72:[1,234]},{4:235,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,18:$V1,19:$V2,21:16,22:$V3,23:$V4,25:$V5,33:17,34:$V6,35:$V7,36:$V8,37:$V9,38:$Va,69:19,70:$Vb,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,97:$Vh},{17:[1,236]},o($Vj,[2,108]),o($VZ,[2,119]),{26:$VU,57:[1,237]},{56:[1,238]},{63:[1,239]},{57:[1,240]},{57:[1,241]},{57:[1,242]},{57:[1,243]},{57:[1,244]},{4:245,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,18:$V1,19:$V2,21:16,22:$V3,23:$V4,25:$V5,33:17,34:$V6,35:$V7,36:$V8,37:$V9,38:$Va,69:19,70:$Vb,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,97:$Vh},{26:$VU,57:[1,246]},{17:[1,247]},{56:[1,248]},{66:[1,249]},{57:[1,250]},{57:[1,251]},{57:[1,252]},{57:[1,253]},{63:[1,254]},{20:255,25:$Vk,41:40,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq},{33:256,34:$V6,35:$V7,36:$V8,37:$V9,38:$Va},{20:80,25:$Vk,41:40,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,53:257},{61:[1,258]},{55:[1,259]},{4:260,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,18:$V1,19:$V2,21:16,22:$V3,23:$V4,25:$V5,33:17,34:$V6,35:$V7,36:$V8,37:$V9,38:$Va,69:19,70:$Vb,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,97:$Vh},{25:[1,261]},{73:[1,262]},{17:[1,263],42:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx},{66:[1,264]},{57:[1,265],85:$VW,86:$VX},{72:[1,266]},{73:[1,267]},{20:87,25:$Vk,41:40,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,71:268,77:86,84:$VF},{25:$V41,64:269},{17:[1,271],42:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx},o($V_,$Vz,{56:$V$,61:$V01}),{4:272,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,18:$V1,19:$V2,21:16,22:$V3,23:$V4,25:$V5,33:17,34:$V6,35:$V7,36:$V8,37:$V9,38:$Va,69:19,70:$Vb,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,97:$Vh},{73:[1,273]},o($Vj,[2,107]),o($VZ,[2,110]),{57:[1,274]},{56:[1,275]},o($VZ,[2,112]),o($VZ,[2,114]),o($VZ,[2,115]),o($VZ,[2,116]),o($VZ,[2,117]),{73:[1,276]},{17:[1,277]},o($VN,[2,59]),{57:[1,278]},{17:[1,279],65:[1,280]},{17:[1,281]},{17:[1,282]},{17:[1,283]},{17:[1,284]},{56:[1,285]},{17:[1,286],42:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx},{65:[1,287]},{26:$VU,66:[1,288]},{68:[1,289]},{65:[1,291],67:[1,290]},{73:[1,292]},o($V31,[2,54]),o($Vj,[2,102]),o($Vj,[2,75]),{55:[1,293]},{72:[1,294]},{4:295,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,18:$V1,19:$V2,21:16,22:$V3,23:$V4,25:$V5,33:17,34:$V6,35:$V7,36:$V8,37:$V9,38:$Va,69:19,70:$Vb,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,97:$Vh},o($Vj,[2,97]),{57:[1,296],85:$VW,86:$VX},{57:[1,297]},{42:[1,299],48:[1,298]},{17:$V21,20:87,25:$Vk,41:40,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,71:300,77:86,84:$VF},{73:[1,301]},o($Vj,[2,104]),o($VZ,[2,113]),{20:302,25:$Vk,41:40,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq},o($V51,[2,78]),o($VN,[2,58]),{17:[1,303]},o($Vj,[2,73]),{44:[1,304]},o($VN,[2,60]),o($VN,[2,61]),o($VN,[2,62]),o($VN,[2,63]),{20:305,25:$Vk,41:40,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq},o($VN,[2,66]),{44:[1,306]},{17:[1,307]},{56:[1,308]},{33:309,34:$V6,35:$V7,36:$V8,37:$V9,38:$Va},{65:[1,310]},o($Vj,[2,101]),{20:311,25:$Vk,41:40,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq},{4:312,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,18:$V1,19:$V2,21:16,22:$V3,23:$V4,25:$V5,33:17,34:$V6,35:$V7,36:$V8,37:$V9,38:$Va,69:19,70:$Vb,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,97:$Vh},{73:[1,313]},{17:[1,314]},{72:[1,315]},{48:[1,316]},{42:[1,317]},{17:[1,318],85:$VW,86:$VX},o($Vj,[2,103]),{42:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,57:[1,319]},o($VN,[2,64]),{66:[1,320]},{42:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,57:[1,321]},{66:[1,322]},o($Vj,[2,71]),{57:[1,323]},{65:[1,324]},{20:80,25:$Vk,41:40,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,53:325},{17:[1,326],42:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx},{73:[1,327]},o($V51,[2,80]),o($Vj,[2,98]),{4:328,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,18:$V1,19:$V2,21:16,22:$V3,23:$V4,25:$V5,33:17,34:$V6,35:$V7,36:$V8,37:$V9,38:$Va,69:19,70:$Vb,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,97:$Vh},{57:[2,67]},{57:[2,68]},{25:$V41,64:329},o($VZ,[2,111]),{17:[1,330]},{17:[1,331]},{17:[1,332]},{17:[1,333]},{44:[1,334]},{26:$VU,66:[1,335]},o($Vj,[2,76]),o($V51,[2,79]),{73:[1,336]},{57:[1,337]},o($Vj,[2,74]),o($VN,[2,65]),o($Vj,[2,69]),o($Vj,[2,77]),{66:[1,338]},{26:[1,339]},o($Vj,[2,99]),{72:[1,340]},{65:[1,341]},{65:[1,342]},{4:343,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V0,18:$V1,19:$V2,21:16,22:$V3,23:$V4,25:$V5,33:17,34:$V6,35:$V7,36:$V8,37:$V9,38:$Va,69:19,70:$Vb,87:$Vc,88:$Vd,89:$Ve,90:$Vf,91:$Vg,97:$Vh},{44:[1,344]},{20:80,25:$Vk,41:40,42:$Vl,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,53:345},{73:[1,346]},{66:[1,347]},{26:$VU,66:[1,348]},o($Vj,[2,100]),{17:[1,349]},{66:[1,350]},o($Vj,[2,70]),{17:[1,351]},o($Vj,[2,72])],
defaultActions: {34:[2,1],316:[2,67],317:[2,68]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:return 22; 
break;
case 5:return 23; 
break;
case 6:return 34;
break;
case 7:return 35;
break;
case 8:return 36;
break;
case 9:return 37;
break;
case 10:return 40;
break;
case 11:return 67;
break;
case 12:return 70;
break;
case 13:return 75;
break;
case 14:return 87;
break;
case 15:return 89;
break;
case 16:return 88;
break;
case 17:return 16;
break;
case 18:return 18;
break;
case 19:return 19;
break;
case 20:return 90;
break;
case 21:return 97;
break;
case 22:return 94;
break;
case 23:return 58;
break;
case 24:return 59;
break;
case 25:return 60;
break;
case 26:return 62;
break;
case 27:return 93;
break;
case 28:return 63;
break;
case 29:return 38;
break;
case 30:return 68;
break;
case 31:return 91;
break;
case 32:return 45; 
break;
case 33:return 47; 
break;
case 34:return 46; 
break;
case 35:return 25; 
break;
case 36:return 43; 
break;
case 37:return 44; 
break;
case 38:return 28;
break;
case 39:return 29;
break;
case 40:return 30;
break;
case 41:return 31;
break;
case 42:return 32;
break;
case 43:return 48;
break;
case 44:return 42;
break;
case 45:return 49;
break;
case 46:return 50;
break;
case 47:return 51;
break;
case 48:return 52;
break;
case 49:return 'ENTRADA';
break;
case 50:return 96;
break;
case 51:return 78;
break;
case 52:return 79;
break;
case 53:return 81;
break;
case 54:return 83;
break;
case 55:return 82;
break;
case 56:return 80;
break;
case 57:return 55;
break;
case 58:return 85;
break;
case 59:return 86;
break;
case 60:return 84;
break;
case 61:return 56;
break;
case 62:return 57;
break;
case 63:return 72;
break;
case 64:return 73;
break;
case 65:return 65;
break;
case 66:return 66;
break;
case 67:return 17;
break;
case 68:return 26;
break;
case 69:return 39;
break;
case 70:return 61;
break;
case 71:return 5;
break;
case 72:console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:{COM_MULT})/i,/^(?:{COM_SIMPLE})/i,/^(?:(\/\*[\s\S]*?\*\/))/i,/^(?:(\/\/.*))/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:bool\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:cout\b)/i,/^(?:endl\b)/i,/^(?:toupper\b)/i,/^(?:tolower\b)/i,/^(?:round\b)/i,/^(?:leghth\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:std\b)/i,/^(?:c_str\b)/i,/^(?:execute\b)/i,/^(?:(true|false\b))/i,/^(?:('(([^\n\"\\]|\\.)*)'))/i,/^(?:([\"][^\"\n]+[\"]))/i,/^(?:([a-zA-Z_][a-zA-Z0-9_]*))/i,/^(?:([0-9]+\.[0-9]+\b))/i,/^(?:([0-9]+\b))/i,/^(?:\\n)/i,/^(?:\\)/i,/^(?:\\")/i,/^(?:\\t)/i,/^(?:')/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:pow\b)/i,/^(?:%)/i,/^(?:>>)/i,/^(?:<<)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?:,)/i,/^(?::)/i,/^(?:\.)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}