/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,16],$V2=[1,30],$V3=[1,31],$V4=[1,20],$V5=[1,32],$V6=[1,33],$V7=[1,34],$V8=[1,35],$V9=[1,36],$Va=[1,37],$Vb=[1,22],$Vc=[1,23],$Vd=[1,24],$Ve=[1,28],$Vf=[1,25],$Vg=[1,26],$Vh=[1,27],$Vi=[1,29],$Vj=[5,76,95,97],$Vk=[5,18,20,22,23,25,34,35,36,37,38,73,76,91,92,93,95,96,97,98,99,104,105],$Vl=[1,47],$Vm=[2,21],$Vn=[1,73],$Vo=[1,63],$Vp=[1,64],$Vq=[1,65],$Vr=[1,66],$Vs=[1,67],$Vt=[1,68],$Vu=[1,69],$Vv=[1,70],$Vw=[1,71],$Vx=[1,72],$Vy=[25,51,65],$Vz=[19,67],$VA=[1,85],$VB=[1,87],$VC=[1,91],$VD=[1,95],$VE=[1,106],$VF=[1,105],$VG=[1,104],$VH=[1,107],$VI=[1,110],$VJ=[2,51],$VK=[1,112],$VL=[19,26,51,66],$VM=[1,114],$VN=[1,113],$VO=[1,115],$VP=[1,116],$VQ=[1,117],$VR=[1,118],$VS=[19,26,39,42,51,58,59,60,61,62,66,80,82,83,84,85,86,87,89,90,103],$VT=[1,146],$VU=[1,147],$VV=[19,51,80,89,90],$VW=[2,99],$VX=[1,148],$VY=[1,149],$VZ=[1,150],$V_=[1,151],$V$=[1,152],$V01=[1,153],$V11=[19,103],$V21=[1,194],$V31=[26,51],$V41=[5,18,20,22,23,25,34,35,36,37,38,73,76,78,91,92,93,95,96,97,98,99,104,105],$V51=[1,331],$V61=[76,95,97];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracionVariables":7,"VectoresMatrices":8,"sentenciaIfCompleta":9,"ciclosWhile":10,"cicloFor":11,"funciones":12,"metodos":13,"funcionExecute":14,"impresionCout":15,"switchCase":16,"sentenciaReturn":17,"PR_BREAK":18,"PTCOMA":19,"PR_CONTINUE":20,"comentarios":21,"COM_MULT":22,"COM_SIMPLE":23,"identificadores":24,"ID":25,"COMA":26,"secuenciasEscape":27,"SALTO_LINEA":28,"BARRA_INVERTIDA":29,"COMILLA_DOBLE":30,"TABULACION":31,"COMILLA_SIMPLE":32,"tiposVar":33,"PR_INT":34,"PR_DOUBLE":35,"PR_BOOL":36,"PR_CHAR":37,"PR_STD":38,"DOSPUNTOS":39,"PR_STRING":40,"valores":41,"MENOS":42,"DECIMAL":43,"ENTERO":44,"BOOLEAN":45,"STRING":46,"CHAR":47,"PUNTO":48,"PR_LENGTH":49,"PARIZQ":50,"PARDER":51,"PR_TYPEOF":52,"PR_ROUND":53,"PR_TOUPPER":54,"PR_TOLOWER":55,"PR_TOSTRING":56,"valoresPlus":57,"MAS":58,"POR":59,"DIVIDIDO":60,"POTENCIA":61,"MODULO":62,"valoresArreglos":63,"arregloDeclaraciones":64,"CORIZQ":65,"CORDER":66,"IGUAL":67,"ternario":68,"IncrementoDecremento":69,"PR_NEW":70,"PR_C_STR":71,"sentenciaIf":72,"PR_IF":73,"sentenciaLogica":74,"LLAVIZQ":75,"LLAVDER":76,"sentenciaIfElse":77,"PR_ELSE":78,"sentenciaElse":79,"INTERROGACION":80,"sentenciaRelacional":81,"IGUALES":82,"DIFERENTE":83,"MENOR_QUE":84,"MENOR_IGUAL":85,"MAYOR_QUE":86,"MAYOR_IGUAL":87,"NOT":88,"OR":89,"AND":90,"PR_WHILE":91,"PR_DO":92,"PR_FOR":93,"recursividadCase":94,"PR_CASE":95,"PR_SWITCH":96,"PR_DEFAULT":97,"PR_VOID":98,"PR_EXECUTE":99,"posibilidadesCout":100,"PR_ENDL":101,"funcionCout":102,"SALIDA":103,"PR_COUT":104,"PR_RETURN":105,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",18:"PR_BREAK",19:"PTCOMA",20:"PR_CONTINUE",22:"COM_MULT",23:"COM_SIMPLE",25:"ID",26:"COMA",28:"SALTO_LINEA",29:"BARRA_INVERTIDA",30:"COMILLA_DOBLE",31:"TABULACION",32:"COMILLA_SIMPLE",34:"PR_INT",35:"PR_DOUBLE",36:"PR_BOOL",37:"PR_CHAR",38:"PR_STD",39:"DOSPUNTOS",40:"PR_STRING",42:"MENOS",43:"DECIMAL",44:"ENTERO",45:"BOOLEAN",46:"STRING",47:"CHAR",48:"PUNTO",49:"PR_LENGTH",50:"PARIZQ",51:"PARDER",52:"PR_TYPEOF",53:"PR_ROUND",54:"PR_TOUPPER",55:"PR_TOLOWER",56:"PR_TOSTRING",58:"MAS",59:"POR",60:"DIVIDIDO",61:"POTENCIA",62:"MODULO",65:"CORIZQ",66:"CORDER",67:"IGUAL",70:"PR_NEW",71:"PR_C_STR",73:"PR_IF",75:"LLAVIZQ",76:"LLAVDER",78:"PR_ELSE",80:"INTERROGACION",82:"IGUALES",83:"DIFERENTE",84:"MENOR_QUE",85:"MENOR_IGUAL",86:"MAYOR_QUE",87:"MAYOR_IGUAL",88:"NOT",89:"OR",90:"AND",91:"PR_WHILE",92:"PR_DO",93:"PR_FOR",95:"PR_CASE",96:"PR_SWITCH",97:"PR_DEFAULT",98:"PR_VOID",99:"PR_EXECUTE",101:"PR_ENDL",103:"SALIDA",104:"PR_COUT",105:"PR_RETURN"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,1],[21,1],[21,1],[24,3],[24,1],[27,2],[27,2],[27,2],[27,2],[27,2],[27,1],[27,1],[27,1],[27,1],[27,1],[33,1],[33,1],[33,1],[33,1],[33,4],[41,2],[41,2],[41,1],[41,1],[41,1],[41,1],[41,1],[41,5],[41,4],[41,4],[41,4],[41,4],[41,4],[41,7],[41,1],[57,3],[57,3],[57,3],[57,3],[57,3],[57,3],[57,1],[63,3],[63,1],[64,4],[64,6],[64,4],[64,2],[7,3],[7,5],[7,8],[7,7],[7,5],[7,8],[7,4],[7,7],[69,3],[69,3],[8,11],[8,16],[8,9],[8,17],[8,8],[8,11],[8,7],[8,10],[8,11],[72,7],[77,9],[77,8],[79,4],[9,3],[9,2],[9,2],[9,1],[68,5],[81,3],[81,3],[81,3],[81,3],[81,3],[81,3],[81,1],[81,2],[74,3],[74,3],[74,1],[10,7],[10,9],[11,14],[11,13],[94,5],[94,4],[16,10],[16,7],[12,8],[12,7],[13,8],[13,7],[13,5],[13,4],[14,6],[14,5],[100,1],[100,2],[100,3],[100,4],[100,1],[102,3],[102,1],[15,4],[17,3],[17,6],[17,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 121:
 console.log($$[$0-1], $$[$0]); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,20:$V1,21:17,22:$V2,23:$V3,24:19,25:$V4,33:18,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,72:21,73:$Va,91:$Vb,92:$Vc,93:$Vd,96:$Ve,98:$Vf,99:$Vg,104:$Vh,105:$Vi},{1:[3]},{5:[1,38]},o($Vj,[2,3],{6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,21:17,33:18,24:19,72:21,4:39,18:$V0,20:$V1,22:$V2,23:$V3,25:$V4,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,73:$Va,91:$Vb,92:$Vc,93:$Vd,96:$Ve,98:$Vf,99:$Vg,104:$Vh,105:$Vi}),o($Vk,[2,4]),o($Vk,[2,5]),o($Vk,[2,6]),o($Vk,[2,7]),o($Vk,[2,8]),o($Vk,[2,9]),o($Vk,[2,10]),o($Vk,[2,11]),o($Vk,[2,12]),o($Vk,[2,13]),o($Vk,[2,14]),{19:[1,40]},{19:[1,41]},o($Vk,[2,17]),{24:42,25:[1,43]},{67:[1,44]},{26:$Vl,50:[1,46],65:[1,45],67:$Vm},o($Vk,[2,91],{77:48,79:49,78:[1,50]}),{50:[1,51]},{75:[1,52]},{50:[1,53]},{25:[1,54]},{25:[1,55]},{103:[1,56]},{50:[1,57]},{19:[1,60],25:[1,59],38:$Vn,41:62,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,57:61,63:58},o($Vk,[2,18]),o($Vk,[2,19]),o($Vy,[2,32]),o($Vy,[2,33]),o($Vy,[2,34]),o($Vy,[2,35]),{39:[1,74]},{50:[1,75]},{1:[2,1]},o($Vj,[2,2]),o($Vk,[2,15]),o($Vk,[2,16]),{19:[1,76],67:[1,77]},o($Vz,$Vm,{26:$Vl,50:[1,79],65:[1,78]}),{25:[1,81],38:$Vn,41:62,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,57:80},{44:[1,82]},{25:$VA,38:$Vn,41:62,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,51:[1,84],52:$Vu,53:$Vv,54:$Vw,55:$Vx,57:61,63:83},{24:86,25:$VB},o($Vk,[2,89],{79:88,78:[1,89]}),o($Vk,[2,90]),{73:[1,90],75:$VC},{25:$VA,38:$Vn,41:62,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,57:94,74:92,81:93,88:$VD},{4:96,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,20:$V1,21:17,22:$V2,23:$V3,24:19,25:$V4,33:18,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,72:21,73:$Va,91:$Vb,92:$Vc,93:$Vd,96:$Ve,98:$Vf,99:$Vg,104:$Vh,105:$Vi},{24:98,25:$VB,33:97,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9},{50:[1,99]},{50:[1,100]},{25:$VE,38:$Vn,41:62,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,50:$VF,52:$Vu,53:$Vv,54:$Vw,55:$Vx,57:103,88:$VG,100:102,101:$VH,102:101},{25:$VA,38:$Vn,41:62,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,57:108},{19:[1,109],26:$VI},o([19,26,42,58,59,60,61,62],$VJ,{48:$VK,50:[1,111]}),o($Vk,[2,130]),o($VL,[2,60],{42:$VM,58:$VN,59:$VO,60:$VP,61:$VQ,62:$VR}),o($VS,[2,58]),{43:[1,119],44:[1,120]},o($VS,[2,39]),o($VS,[2,40]),o($VS,[2,41]),o($VS,[2,42]),o($VS,[2,43]),{50:[1,121]},{50:[1,122]},{50:[1,123]},{50:[1,124]},{39:[1,125]},{39:[1,126]},{25:$VA,38:$Vn,41:62,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,57:94,74:127,81:93,88:$VD},o($Vk,[2,65]),{25:[1,129],38:$Vn,41:62,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,50:[1,131],52:$Vu,53:$Vv,54:$Vw,55:$Vx,57:128,68:130,74:132,81:93,88:$VD},{66:[1,133]},{33:136,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,51:[1,135],64:134},{19:[1,137],42:$VM,58:$VN,59:$VO,60:$VP,61:$VQ,62:$VR},o([19,42,58,59,60,61,62],$VJ,{48:$VK,65:[1,138]}),{66:[1,139]},{26:$VI,51:[1,140]},{19:[1,141]},o($VS,$VJ,{48:$VK}),o($Vz,[2,20]),o($Vz,$Vm,{26:$Vl}),o($Vk,[2,88]),{73:[1,142],75:$VC},{50:[1,143]},{4:144,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,20:$V1,21:17,22:$V2,23:$V3,24:19,25:$V4,33:18,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,72:21,73:$Va,91:$Vb,92:$Vc,93:$Vd,96:$Ve,98:$Vf,99:$Vg,104:$Vh,105:$Vi},{51:[1,145],89:$VT,90:$VU},o($VV,[2,103]),o($VV,$VW,{42:$VM,58:$VN,59:$VO,60:$VP,61:$VQ,62:$VR,82:$VX,83:$VY,84:$VZ,85:$V_,86:$V$,87:$V01}),{25:$VA,38:$Vn,41:62,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,57:154},{76:[1,155]},{24:156,25:$VB},{67:[1,157]},{33:136,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,51:[1,159],64:158},{25:$VA,38:$Vn,41:62,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,51:[1,161],52:$Vu,53:$Vv,54:$Vw,55:$Vx,57:61,63:160},{19:[1,162],103:[1,163]},o($V11,[2,126]),o($V11,[2,120],{42:$VM,58:$VN,59:$VO,60:$VP,61:$VQ,62:$VR}),{45:[1,164]},{25:$VA,38:$Vn,41:62,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,57:94,74:165,81:93,88:$VD},o([19,42,58,59,60,61,62,103],$VJ,{48:$VK,50:[1,166]}),o($V11,[2,124]),{42:$VM,51:[1,167],58:$VN,59:$VO,60:$VP,61:$VQ,62:$VR},o($Vk,[2,128]),{25:$VA,38:$Vn,41:62,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,57:168},{25:$VA,38:$Vn,41:62,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,57:61,63:169},{49:[1,170]},{25:$VA,38:$Vn,41:171,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx},{25:$VA,38:$Vn,41:172,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx},{25:$VA,38:$Vn,41:173,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx},{25:$VA,38:$Vn,41:174,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx},{25:$VA,38:$Vn,41:175,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx},{25:$VA,38:$Vn,41:176,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx},o($VS,[2,37]),o($VS,[2,38]),{25:[1,177]},{43:[1,178],44:[1,179]},{46:[1,180]},{46:[1,181]},{39:[1,182]},{40:[1,183]},{51:[1,184],89:$VT,90:$VU},o([80,89,90],$VW,{19:[1,185],42:$VM,58:$VN,59:$VO,60:$VP,61:$VQ,62:$VR,82:$VX,83:$VY,84:$VZ,85:$V_,86:$V$,87:$V01}),o([19,42,58,59,60,61,62,80,82,83,84,85,86,87,89,90],$VJ,{48:$VK,50:[1,186],65:[1,187]}),{19:[1,188]},{33:189,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9},{80:[1,190],89:$VT,90:$VU},{65:[1,192],67:[1,191]},{26:$V21,51:[1,193]},{75:[1,195]},{25:[1,196]},o($Vk,[2,71]),{25:$VA,38:$Vn,41:62,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,57:61,63:197},{65:[1,199],67:[1,198]},{19:[1,200]},o($Vk,[2,117]),{50:[1,201]},{25:$VA,38:$Vn,41:62,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,57:94,74:202,81:93,88:$VD},{76:[1,203]},{75:[1,204]},{25:$VA,38:$Vn,41:62,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,57:94,81:205,88:$VD},{25:$VA,38:$Vn,41:62,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,57:94,81:206,88:$VD},{25:$VA,38:$Vn,41:62,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,57:207},{25:$VA,38:$Vn,41:62,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,57:208},{25:$VA,38:$Vn,41:62,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,57:209},{25:$VA,38:$Vn,41:62,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,57:210},{25:$VA,38:$Vn,41:62,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,57:211},{25:$VA,38:$Vn,41:62,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,57:212},o($VV,[2,100],{42:$VM,58:$VN,59:$VO,60:$VP,61:$VQ,62:$VR}),{91:[1,213]},{67:[1,214]},{25:$VA,38:$Vn,41:62,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,57:215},{26:$V21,51:[1,216]},{75:[1,217]},{26:$VI,51:[1,218]},{19:[1,219]},o($Vk,[2,127]),{25:$VE,38:$Vn,41:62,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,50:$VF,52:$Vu,53:$Vv,54:$Vw,55:$Vx,57:103,88:$VG,100:220,101:$VH},o($V11,[2,121]),{51:[1,221],89:$VT,90:$VU},{25:$VA,38:$Vn,41:62,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,57:61,63:222},{75:[1,223]},o($VL,[2,59],{42:$VM,58:$VN,59:$VO,60:$VP,61:$VQ,62:$VR}),{26:$VI,51:[1,224]},{50:[1,225]},o($VS,[2,52]),o($VS,[2,53]),o($VS,[2,54]),o($VS,[2,55]),o($VS,[2,56]),o($VS,[2,57]),{51:[1,226]},{51:[1,227]},{51:[1,228]},{51:[1,229]},{51:[1,230]},{56:[1,231]},o($Vy,[2,36]),{75:[1,232]},o($Vk,[2,66]),{25:$VA,38:$Vn,41:62,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,51:[1,234],52:$Vu,53:$Vv,54:$Vw,55:$Vx,57:61,63:233},{44:[1,235]},o($Vk,[2,69]),{51:[1,236]},{25:$VA,38:$Vn,41:62,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,57:237},{25:[1,240],65:[1,239],70:[1,238]},{66:[1,241]},{75:[1,242]},{33:243,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9},{4:244,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,20:$V1,21:17,22:$V2,23:$V3,24:19,25:$V4,33:18,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,72:21,73:$Va,91:$Vb,92:$Vc,93:$Vd,96:$Ve,98:$Vf,99:$Vg,104:$Vh,105:$Vi},o($V31,[2,64],{65:[1,245]}),{26:$VI,66:[1,246]},{25:$VA,38:$Vn,41:62,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,57:247},{44:[1,248]},o($Vk,[2,116]),{25:$VA,38:$Vn,41:62,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,57:94,74:249,81:93,88:$VD},{51:[1,250],89:$VT,90:$VU},o($Vk,[2,87]),{4:251,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,20:$V1,21:17,22:$V2,23:$V3,24:19,25:$V4,33:18,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,72:21,73:$Va,91:$Vb,92:$Vc,93:$Vd,96:$Ve,98:$Vf,99:$Vg,104:$Vh,105:$Vi},o($VV,[2,101]),o($VV,[2,102]),o($VV,[2,93],{42:$VM,58:$VN,59:$VO,60:$VP,61:$VQ,62:$VR}),o($VV,[2,94],{42:$VM,58:$VN,59:$VO,60:$VP,61:$VQ,62:$VR}),o($VV,[2,95],{42:$VM,58:$VN,59:$VO,60:$VP,61:$VQ,62:$VR}),o($VV,[2,96],{42:$VM,58:$VN,59:$VO,60:$VP,61:$VQ,62:$VR}),o($VV,[2,97],{42:$VM,58:$VN,59:$VO,60:$VP,61:$VQ,62:$VR}),o($VV,[2,98],{42:$VM,58:$VN,59:$VO,60:$VP,61:$VQ,62:$VR}),{50:[1,252]},{25:$VA,38:$Vn,41:62,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,57:253},{19:[1,254],42:$VM,58:$VN,59:$VO,60:$VP,61:$VQ,62:$VR},{75:[1,255]},{4:256,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,20:$V1,21:17,22:$V2,23:$V3,24:19,25:$V4,33:18,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,72:21,73:$Va,91:$Vb,92:$Vc,93:$Vd,96:$Ve,98:$Vf,99:$Vg,104:$Vh,105:$Vi},{19:[1,257]},o($Vk,[2,119]),o($V11,[2,125]),o($V11,[2,122]),{26:$VI,51:[1,258]},{94:259,95:[1,260]},{19:[1,261]},{51:[1,262]},o($VS,[2,45]),o($VS,[2,46]),o($VS,[2,47]),o($VS,[2,48]),o($VS,[2,49]),{50:[1,263]},{4:264,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,20:$V1,21:17,22:$V2,23:$V3,24:19,25:$V4,33:18,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,72:21,73:$Va,91:$Vb,92:$Vc,93:$Vd,96:$Ve,98:$Vf,99:$Vg,104:$Vh,105:$Vi},{26:$VI,51:[1,265]},{19:[1,266]},{66:[1,267]},{25:$VA,38:$Vn,41:62,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,57:268},{39:[1,269],42:$VM,58:$VN,59:$VO,60:$VP,61:$VQ,62:$VR},{33:270,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9},{25:$VA,38:$Vn,41:62,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,57:61,63:271},{48:[1,272]},{67:[1,273]},{4:274,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,20:$V1,21:17,22:$V2,23:$V3,24:19,25:$V4,33:18,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,72:21,73:$Va,91:$Vb,92:$Vc,93:$Vd,96:$Ve,98:$Vf,99:$Vg,104:$Vh,105:$Vi},{25:[1,275]},{76:[1,276]},{66:[1,277]},{19:[1,278]},{19:[1,279],42:$VM,58:$VN,59:$VO,60:$VP,61:$VQ,62:$VR},{66:[1,280]},{51:[1,281],89:$VT,90:$VU},{75:[1,282]},{76:[1,283]},{25:$VA,38:$Vn,41:62,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,57:94,74:284,81:93,88:$VD},{19:[1,285],42:$VM,58:$VN,59:$VO,60:$VP,61:$VQ,62:$VR},{25:$VA,38:$Vn,41:62,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,57:94,74:286,81:93,88:$VD},{4:287,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,20:$V1,21:17,22:$V2,23:$V3,24:19,25:$V4,33:18,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,72:21,73:$Va,91:$Vb,92:$Vc,93:$Vd,96:$Ve,98:$Vf,99:$Vg,104:$Vh,105:$Vi},{76:[1,288]},o($Vk,[2,118]),o($V11,[2,123]),{76:[1,290],95:[1,291],97:[1,289]},{25:$VA,38:$Vn,41:62,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,57:292},o($Vk,[2,129]),o($VS,[2,44]),{25:$VA,38:$Vn,41:62,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,57:293},{76:[1,294]},{19:[1,295]},o($Vk,[2,68]),{19:[1,296],65:[1,297]},{19:[1,298],42:$VM,58:$VN,59:$VO,60:$VP,61:$VQ,62:$VR},{25:$VA,38:$Vn,41:62,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,57:299},{65:[1,300]},{26:$VI,66:[1,301]},{71:[1,302]},{65:[1,304],70:[1,303]},{76:[1,305]},o($V31,[2,61],{65:[1,306]}),o($Vk,[2,113]),o($V31,[2,63]),o($Vk,[2,72]),o($Vk,[2,81]),{67:[1,307]},{75:[1,308]},{4:309,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,20:$V1,21:17,22:$V2,23:$V3,24:19,25:$V4,33:18,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,72:21,73:$Va,91:$Vb,92:$Vc,93:$Vd,96:$Ve,98:$Vf,99:$Vg,104:$Vh,105:$Vi},o($Vk,[2,104]),{51:[1,310],89:$VT,90:$VU},{25:$VA,38:$Vn,41:62,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,57:94,74:311,81:93,88:$VD},{19:[1,312],89:$VT,90:$VU},{76:[1,313]},o($Vk,[2,115]),{39:[1,314]},o($Vk,[2,111]),{25:$VA,38:$Vn,41:62,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,57:315},{39:[1,316],42:$VM,58:$VN,59:$VO,60:$VP,61:$VQ,62:$VR},{42:$VM,51:[1,317],58:$VN,59:$VO,60:$VP,61:$VQ,62:$VR},o($V41,[2,84]),o($Vk,[2,67]),o($Vk,[2,79]),{44:[1,318]},o($Vk,[2,70]),{19:[2,92],42:$VM,58:$VN,59:$VO,60:$VP,61:$VQ,62:$VR},{44:[1,319]},{19:[1,320]},{50:[1,321]},{33:322,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9},{65:[1,323]},o($Vk,[2,112]),{66:[1,324]},{25:$VA,38:$Vn,41:62,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,57:325},{4:326,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,20:$V1,21:17,22:$V2,23:$V3,24:19,25:$V4,33:18,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,72:21,73:$Va,91:$Vb,92:$Vc,93:$Vd,96:$Ve,98:$Vf,99:$Vg,104:$Vh,105:$Vi},{76:[1,327]},{19:[1,328]},{19:[1,329],89:$VT,90:$VU},{25:$V51,69:330},o($Vk,[2,114]),{4:332,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,20:$V1,21:17,22:$V2,23:$V3,24:19,25:$V4,33:18,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,72:21,73:$Va,91:$Vb,92:$Vc,93:$Vd,96:$Ve,98:$Vf,99:$Vg,104:$Vh,105:$Vi},{39:[1,333],42:$VM,58:$VN,59:$VO,60:$VP,61:$VQ,62:$VR},{4:334,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,20:$V1,21:17,22:$V2,23:$V3,24:19,25:$V4,33:18,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,72:21,73:$Va,91:$Vb,92:$Vc,93:$Vd,96:$Ve,98:$Vf,99:$Vg,104:$Vh,105:$Vi},o($VS,[2,50]),{66:[1,335]},{66:[1,336]},o($Vk,[2,77]),{51:[1,337]},{65:[1,338]},{25:$VA,38:$Vn,41:62,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,57:61,63:339},o($V31,[2,62]),{19:[1,340],42:$VM,58:$VN,59:$VO,60:$VP,61:$VQ,62:$VR},{76:[1,341]},o($V41,[2,86]),o($Vk,[2,105]),{25:$V51,69:342},{51:[1,343]},{42:[1,345],58:[1,344]},{76:[1,346]},{4:347,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,20:$V1,21:17,22:$V2,23:$V3,24:19,25:$V4,33:18,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,72:21,73:$Va,91:$Vb,92:$Vc,93:$Vd,96:$Ve,98:$Vf,99:$Vg,104:$Vh,105:$Vi},o($V61,[2,109]),{19:[1,348]},{19:[1,349]},{19:[1,350]},{44:[1,351]},{26:$VI,66:[1,352]},o($Vk,[2,82]),o($V41,[2,85]),{51:[1,353]},{75:[1,354]},{58:[1,355]},{42:[1,356]},o($Vk,[2,110]),o($V61,[2,108]),o($Vk,[2,80]),o($Vk,[2,75]),o($Vk,[2,83]),{66:[1,357]},{26:[1,358]},{75:[1,359]},{4:360,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,20:$V1,21:17,22:$V2,23:$V3,24:19,25:$V4,33:18,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,72:21,73:$Va,91:$Vb,92:$Vc,93:$Vd,96:$Ve,98:$Vf,99:$Vg,104:$Vh,105:$Vi},{51:[2,73]},{51:[2,74]},{65:[1,361]},{65:[1,362]},{4:363,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:$V0,20:$V1,21:17,22:$V2,23:$V3,24:19,25:$V4,33:18,34:$V5,35:$V6,36:$V7,37:$V8,38:$V9,72:21,73:$Va,91:$Vb,92:$Vc,93:$Vd,96:$Ve,98:$Vf,99:$Vg,104:$Vh,105:$Vi},{76:[1,364]},{44:[1,365]},{25:$VA,38:$Vn,41:62,42:$Vo,43:$Vp,44:$Vq,45:$Vr,46:$Vs,47:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,57:61,63:366},{76:[1,367]},o($Vk,[2,107]),{66:[1,368]},{26:$VI,66:[1,369]},o($Vk,[2,106]),{19:[1,370]},{66:[1,371]},o($Vk,[2,76]),{19:[1,372]},o($Vk,[2,78])],
defaultActions: {38:[2,1],355:[2,73],356:[2,74]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:return 22; 
break;
case 5:return 23; 
break;
case 6:return 34;
break;
case 7:return 35;
break;
case 8:return 36;
break;
case 9:return 37;
break;
case 10:return 40;
break;
case 11:return 70;
break;
case 12:return 73;
break;
case 13:return 78;
break;
case 14:return 91;
break;
case 15:return 93;
break;
case 16:return 92;
break;
case 17:return 18;
break;
case 18:return 20;
break;
case 19:return 105;
break;
case 20:return 98;
break;
case 21:return 104;
break;
case 22:return 101;
break;
case 23:return 54;
break;
case 24:return 55;
break;
case 25:return 53;
break;
case 26:return 49;
break;
case 27:return 52;
break;
case 28:return 56;
break;
case 29:return 38;
break;
case 30:return 71;
break;
case 31:return 99;
break;
case 32:return 96;
break;
case 33:return 95;
break;
case 34:return 97;
break;
case 35:return 45; 
break;
case 36:return 47; 
break;
case 37:return 46; 
break;
case 38:return 25; 
break;
case 39:return 43; 
break;
case 40:return 44; 
break;
case 41:return 28;
break;
case 42:return 29;
break;
case 43:return 30;
break;
case 44:return 31;
break;
case 45:return 32;
break;
case 46:return 58;
break;
case 47:return 42;
break;
case 48:return 59;
break;
case 49:return 60;
break;
case 50:return 61;
break;
case 51:return 62;
break;
case 52:return 'ENTRADA';
break;
case 53:return 103;
break;
case 54:return 82;
break;
case 55:return 83;
break;
case 56:return 85;
break;
case 57:return 87;
break;
case 58:return 86;
break;
case 59:return 84;
break;
case 60:return 67;
break;
case 61:return 89;
break;
case 62:return 90;
break;
case 63:return 88;
break;
case 64:return 50;
break;
case 65:return 51;
break;
case 66:return 75;
break;
case 67:return 76;
break;
case 68:return 65;
break;
case 69:return 66;
break;
case 70:return 19;
break;
case 71:return 26;
break;
case 72:return 39;
break;
case 73:return 48;
break;
case 74:return 80;
break;
case 75:return 5;
break;
case 76:console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:{COM_MULT})/i,/^(?:{COM_SIMPLE})/i,/^(?:(\/\*[\s\S]*?\*\/))/i,/^(?:(\/\/.*))/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:bool\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:cout\b)/i,/^(?:endl\b)/i,/^(?:toupper\b)/i,/^(?:tolower\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:std\b)/i,/^(?:c_str\b)/i,/^(?:execute\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:(true|false\b))/i,/^(?:('(([^\n\"\\]|\\.)*)'))/i,/^(?:([\"][^\"\n]+[\"]))/i,/^(?:([a-zA-Z_][a-zA-Z0-9_]*))/i,/^(?:([0-9]+\.[0-9]+\b))/i,/^(?:([0-9]+\b))/i,/^(?:\\n)/i,/^(?:\\)/i,/^(?:\\")/i,/^(?:\\t)/i,/^(?:')/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:pow\b)/i,/^(?:%)/i,/^(?:>>)/i,/^(?:<<)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?:,)/i,/^(?::)/i,/^(?:\.)/i,/^(?:\?)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}