/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,14],$V1=[1,15],$V2=[1,16],$V3=[1,28],$V4=[1,29],$V5=[1,19],$V6=[1,30],$V7=[1,31],$V8=[1,32],$V9=[1,33],$Va=[1,34],$Vb=[1,35],$Vc=[1,21],$Vd=[1,22],$Ve=[1,23],$Vf=[1,27],$Vg=[1,24],$Vh=[1,25],$Vi=[1,26],$Vj=[5,75,94,96],$Vk=[5,17,19,20,23,24,26,35,36,37,38,39,72,75,90,91,92,94,95,96,97,98,104],$Vl=[1,49],$Vm=[1,43],$Vn=[1,44],$Vo=[1,45],$Vp=[1,46],$Vq=[1,47],$Vr=[1,48],$Vs=[26,58,67],$Vt=[1,68],$Vu=[1,67],$Vv=[1,69],$Vw=[1,70],$Vx=[1,71],$Vy=[1,72],$Vz=[18,27,40,43,49,50,51,52,53,58,68,79,81,82,83,84,85,86,88,89,103],$VA=[2,45],$VB=[1,75],$VC=[18,56],$VD=[2,22],$VE=[1,79],$VF=[1,87],$VG=[1,91],$VH=[1,102],$VI=[1,103],$VJ=[1,101],$VK=[1,106],$VL=[1,107],$VM=[1,105],$VN=[1,100],$VO=[1,104],$VP=[1,108],$VQ=[5,17,18,19,20,23,24,26,35,36,37,38,39,72,75,90,91,92,94,95,96,97,98,104],$VR=[1,123],$VS=[1,125],$VT=[1,120],$VU=[1,121],$VV=[1,122],$VW=[1,132],$VX=[1,135],$VY=[27,58,68],$VZ=[1,141],$V_=[1,142],$V$=[18,58,79,88,89],$V01=[2,95],$V11=[1,143],$V21=[1,144],$V31=[1,145],$V41=[1,146],$V51=[1,147],$V61=[1,148],$V71=[18,103],$V81=[79,88,89],$V91=[18,43,49,50,51,52,53,79,81,82,83,84,85,86,88,89],$Va1=[1,172],$Vb1=[1,173],$Vc1=[1,185],$Vd1=[2,58],$Ve1=[27,58],$Vf1=[1,289],$Vg1=[5,17,19,20,23,24,26,35,36,37,38,39,72,75,77,90,91,92,94,95,96,97,98,104],$Vh1=[75,94,96];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracionVariables":7,"VectoresMatrices":8,"sentenciaIfCompleta":9,"ciclosWhile":10,"cicloFor":11,"funciones":12,"metodos":13,"funcionExecute":14,"impresionCout":15,"switchCase":16,"PR_BREAK":17,"PTCOMA":18,"PR_CONTINUE":19,"PR_RETURN":20,"valoresPlus":21,"comentarios":22,"COM_MULT":23,"COM_SIMPLE":24,"identificadores":25,"ID":26,"COMA":27,"secuenciasEscape":28,"SALTO_LINEA":29,"BARRA_INVERTIDA":30,"COMILLA_DOBLE":31,"TABULACION":32,"COMILLA_SIMPLE":33,"tiposVar":34,"PR_INT":35,"PR_DOUBLE":36,"PR_BOOL":37,"PR_CHAR":38,"PR_STD":39,"DOSPUNTOS":40,"PR_STRING":41,"valores":42,"MENOS":43,"DECIMAL":44,"ENTERO":45,"BOOLEAN":46,"STRING":47,"CHAR":48,"MAS":49,"POR":50,"DIVIDIDO":51,"POTENCIA":52,"MODULO":53,"valoresArreglos":54,"arregloDeclaraciones":55,"IGUAL":56,"PARIZQ":57,"PARDER":58,"PR_TOUPPER":59,"PR_TOLOWER":60,"PR_ROUND":61,"PUNTO":62,"PR_LENGTH":63,"PR_TOSTRING":64,"ternario":65,"IncrementoDecremento":66,"CORIZQ":67,"CORDER":68,"PR_NEW":69,"PR_C_STR":70,"sentenciaIf":71,"PR_IF":72,"sentenciaLogica":73,"LLAVIZQ":74,"LLAVDER":75,"sentenciaIfElse":76,"PR_ELSE":77,"sentenciaElse":78,"INTERROGACION":79,"sentenciaRelacional":80,"IGUALES":81,"DIFERENTE":82,"MENOR_QUE":83,"MENOR_IGUAL":84,"MAYOR_QUE":85,"MAYOR_IGUAL":86,"NOT":87,"OR":88,"AND":89,"PR_WHILE":90,"PR_DO":91,"PR_FOR":92,"recursividadCase":93,"PR_CASE":94,"PR_SWITCH":95,"PR_DEFAULT":96,"PR_VOID":97,"PR_EXECUTE":98,"posibilidadesCout":99,"PR_TYPEOF":100,"PR_ENDL":101,"funcionCout":102,"SALIDA":103,"PR_COUT":104,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",17:"PR_BREAK",18:"PTCOMA",19:"PR_CONTINUE",20:"PR_RETURN",23:"COM_MULT",24:"COM_SIMPLE",26:"ID",27:"COMA",29:"SALTO_LINEA",30:"BARRA_INVERTIDA",31:"COMILLA_DOBLE",32:"TABULACION",33:"COMILLA_SIMPLE",35:"PR_INT",36:"PR_DOUBLE",37:"PR_BOOL",38:"PR_CHAR",39:"PR_STD",40:"DOSPUNTOS",41:"PR_STRING",43:"MENOS",44:"DECIMAL",45:"ENTERO",46:"BOOLEAN",47:"STRING",48:"CHAR",49:"MAS",50:"POR",51:"DIVIDIDO",52:"POTENCIA",53:"MODULO",56:"IGUAL",57:"PARIZQ",58:"PARDER",59:"PR_TOUPPER",60:"PR_TOLOWER",61:"PR_ROUND",62:"PUNTO",63:"PR_LENGTH",64:"PR_TOSTRING",67:"CORIZQ",68:"CORDER",69:"PR_NEW",70:"PR_C_STR",72:"PR_IF",74:"LLAVIZQ",75:"LLAVDER",77:"PR_ELSE",79:"INTERROGACION",81:"IGUALES",82:"DIFERENTE",83:"MENOR_QUE",84:"MENOR_IGUAL",85:"MAYOR_QUE",86:"MAYOR_IGUAL",87:"NOT",88:"OR",89:"AND",90:"PR_WHILE",91:"PR_DO",92:"PR_FOR",94:"PR_CASE",95:"PR_SWITCH",96:"PR_DEFAULT",97:"PR_VOID",98:"PR_EXECUTE",100:"PR_TYPEOF",101:"PR_ENDL",103:"SALIDA",104:"PR_COUT"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,3],[6,2],[6,1],[22,1],[22,1],[25,3],[25,1],[28,2],[28,2],[28,2],[28,2],[28,2],[28,1],[28,1],[28,1],[28,1],[28,1],[34,1],[34,1],[34,1],[34,1],[34,4],[42,2],[42,2],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,1],[54,3],[54,1],[55,4],[55,2],[7,3],[7,5],[7,8],[7,7],[7,8],[7,8],[7,8],[7,8],[7,9],[7,11],[7,5],[7,8],[66,3],[66,3],[8,11],[8,16],[8,9],[8,17],[8,8],[8,11],[8,7],[8,10],[8,11],[71,7],[76,9],[76,8],[78,4],[9,3],[9,2],[9,2],[9,1],[65,5],[80,3],[80,3],[80,3],[80,3],[80,3],[80,3],[80,1],[80,2],[73,3],[73,3],[73,1],[10,7],[10,9],[11,11],[11,14],[93,5],[93,4],[16,10],[16,7],[12,8],[12,7],[13,8],[13,7],[13,5],[13,4],[14,6],[14,5],[99,1],[99,2],[99,3],[99,4],[99,7],[99,4],[99,5],[99,4],[99,4],[99,4],[99,4],[99,1],[102,3],[102,1],[15,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,19:$V1,20:$V2,22:17,23:$V3,24:$V4,26:$V5,34:18,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,71:20,72:$Vb,90:$Vc,91:$Vd,92:$Ve,95:$Vf,97:$Vg,98:$Vh,104:$Vi},{1:[3]},{5:[1,36]},o($Vj,[2,3],{6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,22:17,34:18,71:20,4:37,17:$V0,19:$V1,20:$V2,23:$V3,24:$V4,26:$V5,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,72:$Vb,90:$Vc,91:$Vd,92:$Ve,95:$Vf,97:$Vg,98:$Vh,104:$Vi}),o($Vk,[2,4]),o($Vk,[2,5]),o($Vk,[2,6]),o($Vk,[2,7]),o($Vk,[2,8]),o($Vk,[2,9]),o($Vk,[2,10]),o($Vk,[2,11]),o($Vk,[2,12]),o($Vk,[2,13]),{18:[1,38]},{18:[1,39]},{18:[1,41],21:40,26:$Vl,42:42,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr},o($Vk,[2,18]),{25:50,26:[1,51]},{57:[1,53],67:[1,52]},o($Vk,[2,87],{76:54,78:55,77:[1,56]}),{57:[1,57]},{74:[1,58]},{57:[1,59]},{26:[1,60]},{26:[1,61]},{103:[1,62]},{57:[1,63]},o($Vk,[2,19]),o($Vk,[2,20]),o($Vs,[2,33]),o($Vs,[2,34]),o($Vs,[2,35]),o($Vs,[2,36]),{40:[1,64]},{57:[1,65]},{1:[2,1]},o($Vj,[2,2]),o($Vk,[2,14]),o($Vk,[2,15]),{18:[1,66],43:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy},o($Vk,[2,17]),o($Vz,[2,52]),{44:[1,73],45:[1,74]},o($Vz,[2,40]),o($Vz,[2,41]),o($Vz,[2,42]),o($Vz,[2,43]),o($Vz,[2,44]),o($Vz,$VA),{18:$VB,56:[1,76]},o($VC,$VD,{27:$VE,57:[1,78],67:[1,77]}),{45:[1,80]},{21:83,26:$Vl,42:42,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,54:81,58:[1,82]},o($Vk,[2,85],{78:84,77:[1,85]}),o($Vk,[2,86]),{72:[1,86],74:$VF},{21:90,26:$Vl,42:42,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,73:88,80:89,87:$VG},{4:92,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,19:$V1,20:$V2,22:17,23:$V3,24:$V4,26:$V5,34:18,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,71:20,72:$Vb,90:$Vc,91:$Vd,92:$Ve,95:$Vf,97:$Vg,98:$Vh,104:$Vi},{7:93,34:94,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va},{57:[1,95]},{57:[1,96]},{21:99,26:$VH,39:$VI,42:42,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,57:$VJ,59:$VK,60:$VL,61:$VM,87:$VN,99:98,100:$VO,101:$VP,102:97},{21:109,26:$Vl,42:42,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr},{40:[1,110]},{21:90,26:$Vl,42:42,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,73:111,80:89,87:$VG},o($Vk,[2,16]),{26:$Vl,42:112,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr},{26:$Vl,42:113,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr},{26:$Vl,42:114,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr},{26:$Vl,42:115,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr},{26:$Vl,42:116,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr},{26:$Vl,42:117,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr},o($Vz,[2,38]),o($Vz,[2,39]),o($VQ,[2,57]),{21:118,26:[1,119],39:$VR,42:42,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,57:$VS,59:$VT,60:$VU,61:$VV,65:124,73:126,80:89,87:$VG},{68:[1,127]},{34:130,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,55:128,58:[1,129]},{25:131,26:$VW},{68:[1,133]},{27:$VX,58:[1,134]},{18:[1,136]},o($VY,[2,54],{43:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy}),o($Vk,[2,84]),{72:[1,137],74:$VF},{57:[1,138]},{4:139,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,19:$V1,20:$V2,22:17,23:$V3,24:$V4,26:$V5,34:18,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,71:20,72:$Vb,90:$Vc,91:$Vd,92:$Ve,95:$Vf,97:$Vg,98:$Vh,104:$Vi},{58:[1,140],88:$VZ,89:$V_},o($V$,[2,99]),o($V$,$V01,{43:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,81:$V11,82:$V21,83:$V31,84:$V41,85:$V51,86:$V61}),{21:149,26:$Vl,42:42,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr},{75:[1,150]},{18:[1,151]},{25:152,26:$VW},{34:130,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,55:153,58:[1,154]},{21:83,26:$Vl,42:42,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,54:155,58:[1,156]},{18:[1,157],103:[1,158]},o($V71,[2,129]),o($V71,[2,116],{43:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy}),{46:[1,159]},{21:90,26:$Vl,42:42,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,73:160,80:89,87:$VG},o([18,43,49,50,51,52,53,103],$VA,{57:[1,161],62:[1,162]}),{40:[1,163]},{57:[1,164]},{57:[1,165]},{57:[1,166]},{57:[1,167]},o($V71,[2,127]),{43:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,58:[1,168]},{41:[1,169]},{58:[1,170],88:$VZ,89:$V_},o($Vz,[2,46]),o($Vz,[2,47]),o($Vz,[2,48]),o($Vz,[2,49]),o($Vz,[2,50]),o($Vz,[2,51]),o($V81,$V01,{18:[1,171],43:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,81:$V11,82:$V21,83:$V31,84:$V41,85:$V51,86:$V61}),o($V91,$VA,{57:$Va1,62:$Vb1,67:[1,174]}),{57:[1,175]},{57:[1,176]},{57:[1,177]},{40:[1,178]},{18:[1,179]},{34:180,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va},{79:[1,181],88:$VZ,89:$V_},{56:[1,182],67:[1,183]},{27:$Vc1,58:[1,184]},{74:[1,186]},{26:[1,187]},o($VC,[2,21]),o($VC,$VD,{27:$VE}),{56:[1,188],67:[1,189]},{18:[1,190]},{21:191,26:$Vl,42:42,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr},o($Vk,[2,113]),{57:[1,192]},{21:90,26:$Vl,42:42,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,73:193,80:89,87:$VG},{75:[1,194]},{74:[1,195]},{21:90,26:$Vl,42:42,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,80:196,87:$VG},{21:90,26:$Vl,42:42,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,80:197,87:$VG},{21:198,26:$Vl,42:42,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr},{21:199,26:$Vl,42:42,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr},{21:200,26:$Vl,42:42,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr},{21:201,26:$Vl,42:42,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr},{21:202,26:$Vl,42:42,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr},{21:203,26:$Vl,42:42,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr},o($V$,[2,96],{43:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy}),{90:[1,204]},{21:90,26:$Vl,42:42,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,73:205,80:89,87:$VG},{18:$VB,56:[1,206]},{27:$Vc1,58:[1,207]},{74:[1,208]},{27:$VX,58:[1,209]},{18:[1,210]},o($Vk,[2,130]),{21:99,26:$VH,39:$VI,42:42,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,57:$VJ,59:$VK,60:$VL,61:$VM,87:$VN,99:211,100:$VO,101:$VP},o($V71,[2,117]),{58:[1,212],88:$VZ,89:$V_},{21:83,26:$Vl,42:42,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,54:213},{63:[1,214]},{40:[1,215]},{26:[1,216]},{44:[1,217],45:[1,218]},{47:[1,219]},{47:[1,220]},{74:[1,221]},o($Vs,[2,37]),{74:[1,222]},o($Vk,$Vd1),{21:83,26:$Vl,42:42,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,54:223,58:[1,224]},{63:[1,225]},{45:[1,226]},{47:[1,227]},{47:[1,228]},{44:[1,229],45:[1,230]},{40:[1,231]},o($VQ,[2,67]),{58:[1,232]},{21:233,26:$Vl,42:42,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr},{26:[1,236],67:[1,235],69:[1,234]},{68:[1,237]},{74:[1,238]},{34:239,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va},{4:240,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,19:$V1,20:$V2,22:17,23:$V3,24:$V4,26:$V5,34:18,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,71:20,72:$Vb,90:$Vc,91:$Vd,92:$Ve,95:$Vf,97:$Vg,98:$Vh,104:$Vi},o($Ve1,[2,56]),{21:241,26:$Vl,42:42,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr},{45:[1,242]},o($Vk,[2,112]),o($VY,[2,53],{43:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy}),{21:90,26:$Vl,42:42,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,73:243,80:89,87:$VG},{58:[1,244],88:$VZ,89:$V_},o($Vk,[2,83]),{4:245,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,19:$V1,20:$V2,22:17,23:$V3,24:$V4,26:$V5,34:18,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,71:20,72:$Vb,90:$Vc,91:$Vd,92:$Ve,95:$Vf,97:$Vg,98:$Vh,104:$Vi},o($V$,[2,97]),o($V$,[2,98]),o($V$,[2,89],{43:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy}),o($V$,[2,90],{43:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy}),o($V$,[2,91],{43:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy}),o($V$,[2,92],{43:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy}),o($V$,[2,93],{43:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy}),o($V$,[2,94],{43:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy}),{57:[1,246]},{18:[1,247],88:$VZ,89:$V_},{21:248,26:[1,249],39:$VR,42:42,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,57:$VS,59:$VT,60:$VU,61:$VV,65:124,73:126,80:89,87:$VG},{74:[1,250]},{4:251,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,19:$V1,20:$V2,22:17,23:$V3,24:$V4,26:$V5,34:18,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,71:20,72:$Vb,90:$Vc,91:$Vd,92:$Ve,95:$Vf,97:$Vg,98:$Vh,104:$Vi},{18:[1,252]},o($Vk,[2,115]),o($V71,[2,128]),o($V71,[2,118]),{27:$VX,58:[1,253]},{57:[1,254]},{64:[1,255]},{58:[1,256]},{58:[1,257]},{58:[1,258]},{58:[1,259]},{58:[1,260]},{93:261,94:[1,262]},{4:263,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,19:$V1,20:$V2,22:17,23:$V3,24:$V4,26:$V5,34:18,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,71:20,72:$Vb,90:$Vc,91:$Vd,92:$Ve,95:$Vf,97:$Vg,98:$Vh,104:$Vi},{27:$VX,58:[1,264]},{18:[1,265]},{57:[1,266]},{68:[1,267]},{58:[1,268]},{58:[1,269]},{58:[1,270]},{58:[1,271]},{64:[1,272]},{21:273,26:$Vl,42:42,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr},{40:[1,274],43:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy},{34:275,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va},{21:83,26:$Vl,42:42,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,54:276},{62:[1,277]},{56:[1,278]},{4:279,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,19:$V1,20:$V2,22:17,23:$V3,24:$V4,26:$V5,34:18,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,71:20,72:$Vb,90:$Vc,91:$Vd,92:$Ve,95:$Vf,97:$Vg,98:$Vh,104:$Vi},{26:[1,280]},{75:[1,281]},{18:[1,282],43:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy},{68:[1,283]},{58:[1,284],88:$VZ,89:$V_},{74:[1,285]},{75:[1,286]},{21:90,26:$Vl,42:42,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,73:287,80:89,87:$VG},{26:$Vf1,66:288},o($V81,$V01,{18:[1,290],43:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,81:$V11,82:$V21,83:$V31,84:$V41,85:$V51,86:$V61}),o($V91,$VA,{57:$Va1,62:$Vb1}),{4:291,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,19:$V1,20:$V2,22:17,23:$V3,24:$V4,26:$V5,34:18,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,71:20,72:$Vb,90:$Vc,91:$Vd,92:$Ve,95:$Vf,97:$Vg,98:$Vh,104:$Vi},{75:[1,292]},o($Vk,[2,114]),o($V71,[2,119]),{58:[1,293]},{57:[1,294]},o($V71,[2,121]),o($V71,[2,123]),o($V71,[2,124]),o($V71,[2,125]),o($V71,[2,126]),{75:[1,296],94:[1,297],96:[1,295]},{21:298,26:$Vl,42:42,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr},{75:[1,299]},{18:[1,300]},o($VQ,[2,60]),{58:[1,301]},{18:[1,302],67:[1,303]},{18:[1,304]},{18:[1,305]},{18:[1,306]},{18:[1,307]},{57:[1,308]},{18:[1,309],43:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy},{21:310,26:$Vl,42:42,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr},{67:[1,311]},{27:$VX,68:[1,312]},{70:[1,313]},{67:[1,315],69:[1,314]},{75:[1,316]},o($Ve1,[2,55]),o($Vk,[2,109]),o($Vk,[2,77]),{56:[1,317]},{74:[1,318]},{4:319,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,19:$V1,20:$V2,22:17,23:$V3,24:$V4,26:$V5,34:18,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,71:20,72:$Vb,90:$Vc,91:$Vd,92:$Ve,95:$Vf,97:$Vg,98:$Vh,104:$Vi},o($Vk,[2,100]),{58:[1,320],88:$VZ,89:$V_},{58:[1,321]},{43:[1,323],49:[1,322]},{18:$Vd1,21:90,26:$Vl,42:42,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,73:324,80:89,87:$VG},{75:[1,325]},o($Vk,[2,111]),o($V71,[2,122]),{21:326,26:$Vl,42:42,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr},{40:[1,327]},o($Vk,[2,107]),{21:328,26:$Vl,42:42,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr},{40:[1,329],43:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy},o($Vg1,[2,80]),o($VQ,[2,59]),{18:[1,330]},o($Vk,[2,75]),{45:[1,331]},o($VQ,[2,61]),o($VQ,[2,62]),o($VQ,[2,63]),o($VQ,[2,64]),{21:332,26:$Vl,42:42,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr},o($VQ,[2,68]),{18:[2,88],43:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy},{45:[1,333]},{18:[1,334]},{57:[1,335]},{34:336,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va},{67:[1,337]},o($Vk,[2,108]),{21:338,26:$Vl,42:42,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr},{4:339,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,19:$V1,20:$V2,22:17,23:$V3,24:$V4,26:$V5,34:18,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,71:20,72:$Vb,90:$Vc,91:$Vd,92:$Ve,95:$Vf,97:$Vg,98:$Vh,104:$Vi},{75:[1,340]},{18:[1,341]},{74:[1,342]},{49:[1,343]},{43:[1,344]},{18:[1,345],88:$VZ,89:$V_},o($Vk,[2,110]),{43:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,58:[1,346]},{4:347,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,19:$V1,20:$V2,22:17,23:$V3,24:$V4,26:$V5,34:18,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,71:20,72:$Vb,90:$Vc,91:$Vd,92:$Ve,95:$Vf,97:$Vg,98:$Vh,104:$Vi},{40:[1,348],43:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy},{4:349,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,19:$V1,20:$V2,22:17,23:$V3,24:$V4,26:$V5,34:18,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,71:20,72:$Vb,90:$Vc,91:$Vd,92:$Ve,95:$Vf,97:$Vg,98:$Vh,104:$Vi},o($VQ,[2,65]),{68:[1,350]},{43:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,58:[1,351]},{68:[1,352]},o($Vk,[2,73]),{58:[1,353]},{67:[1,354]},{21:83,26:$Vl,42:42,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,54:355},{18:[1,356],43:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy},{75:[1,357]},o($Vg1,[2,82]),o($Vk,[2,101]),{4:358,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,19:$V1,20:$V2,22:17,23:$V3,24:$V4,26:$V5,34:18,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,71:20,72:$Vb,90:$Vc,91:$Vd,92:$Ve,95:$Vf,97:$Vg,98:$Vh,104:$Vi},{58:[2,69]},{58:[2,70]},{26:$Vf1,66:359},o($V71,[2,120]),{75:[1,360]},{4:361,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,19:$V1,20:$V2,22:17,23:$V3,24:$V4,26:$V5,34:18,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,71:20,72:$Vb,90:$Vc,91:$Vd,92:$Ve,95:$Vf,97:$Vg,98:$Vh,104:$Vi},o($Vh1,[2,105]),{18:[1,362]},{18:[1,363]},{18:[1,364]},{18:[1,365]},{45:[1,366]},{27:$VX,68:[1,367]},o($Vk,[2,78]),o($Vg1,[2,81]),{75:[1,368]},{58:[1,369]},o($Vk,[2,106]),o($Vh1,[2,104]),o($Vk,[2,76]),o($VQ,[2,66]),o($Vk,[2,71]),o($Vk,[2,79]),{68:[1,370]},{27:[1,371]},o($Vk,[2,102]),{74:[1,372]},{67:[1,373]},{67:[1,374]},{4:375,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V0,19:$V1,20:$V2,22:17,23:$V3,24:$V4,26:$V5,34:18,35:$V6,36:$V7,37:$V8,38:$V9,39:$Va,71:20,72:$Vb,90:$Vc,91:$Vd,92:$Ve,95:$Vf,97:$Vg,98:$Vh,104:$Vi},{45:[1,376]},{21:83,26:$Vl,42:42,43:$Vm,44:$Vn,45:$Vo,46:$Vp,47:$Vq,48:$Vr,54:377},{75:[1,378]},{68:[1,379]},{27:$VX,68:[1,380]},o($Vk,[2,103]),{18:[1,381]},{68:[1,382]},o($Vk,[2,72]),{18:[1,383]},o($Vk,[2,74])],
defaultActions: {36:[2,1],343:[2,69],344:[2,70]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:return 23; 
break;
case 5:return 24; 
break;
case 6:return 35;
break;
case 7:return 36;
break;
case 8:return 37;
break;
case 9:return 38;
break;
case 10:return 41;
break;
case 11:return 69;
break;
case 12:return 72;
break;
case 13:return 77;
break;
case 14:return 90;
break;
case 15:return 92;
break;
case 16:return 91;
break;
case 17:return 17;
break;
case 18:return 19;
break;
case 19:return 20;
break;
case 20:return 97;
break;
case 21:return 104;
break;
case 22:return 101;
break;
case 23:return 59;
break;
case 24:return 60;
break;
case 25:return 61;
break;
case 26:return 63;
break;
case 27:return 100;
break;
case 28:return 64;
break;
case 29:return 39;
break;
case 30:return 70;
break;
case 31:return 98;
break;
case 32:return 95;
break;
case 33:return 94;
break;
case 34:return 96;
break;
case 35:return 46; 
break;
case 36:return 48; 
break;
case 37:return 47; 
break;
case 38:return 26; 
break;
case 39:return 44; 
break;
case 40:return 45; 
break;
case 41:return 29;
break;
case 42:return 30;
break;
case 43:return 31;
break;
case 44:return 32;
break;
case 45:return 33;
break;
case 46:return 49;
break;
case 47:return 43;
break;
case 48:return 50;
break;
case 49:return 51;
break;
case 50:return 52;
break;
case 51:return 53;
break;
case 52:return 'ENTRADA';
break;
case 53:return 103;
break;
case 54:return 81;
break;
case 55:return 82;
break;
case 56:return 84;
break;
case 57:return 86;
break;
case 58:return 85;
break;
case 59:return 83;
break;
case 60:return 56;
break;
case 61:return 88;
break;
case 62:return 89;
break;
case 63:return 87;
break;
case 64:return 57;
break;
case 65:return 58;
break;
case 66:return 74;
break;
case 67:return 75;
break;
case 68:return 67;
break;
case 69:return 68;
break;
case 70:return 18;
break;
case 71:return 27;
break;
case 72:return 40;
break;
case 73:return 62;
break;
case 74:return 79;
break;
case 75:return 5;
break;
case 76:console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:{COM_MULT})/i,/^(?:{COM_SIMPLE})/i,/^(?:(\/\*[\s\S]*?\*\/))/i,/^(?:(\/\/.*))/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:bool\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:cout\b)/i,/^(?:endl\b)/i,/^(?:toupper\b)/i,/^(?:tolower\b)/i,/^(?:round\b)/i,/^(?:leghth\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:std\b)/i,/^(?:c_str\b)/i,/^(?:execute\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:(true|false\b))/i,/^(?:('(([^\n\"\\]|\\.)*)'))/i,/^(?:([\"][^\"\n]+[\"]))/i,/^(?:([a-zA-Z_][a-zA-Z0-9_]*))/i,/^(?:([0-9]+\.[0-9]+\b))/i,/^(?:([0-9]+\b))/i,/^(?:\\n)/i,/^(?:\\)/i,/^(?:\\")/i,/^(?:\\t)/i,/^(?:')/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:pow\b)/i,/^(?:%)/i,/^(?:>>)/i,/^(?:<<)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?:,)/i,/^(?::)/i,/^(?:\.)/i,/^(?:\?)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}