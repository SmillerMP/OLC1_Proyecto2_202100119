/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,13],$V2=[1,14],$V3=[1,24],$V4=[1,25],$V5=[1,17],$V6=[1,26],$V7=[1,27],$V8=[1,28],$V9=[1,29],$Va=[1,30],$Vb=[1,23],$Vc=[1,31],$Vd=[1,19],$Ve=[1,20],$Vf=[1,21],$Vg=[1,22],$Vh=[5,60],$Vi=[5,15,17,18,21,22,24,27,28,29,30,31,50,57,60,74,75,76,77],$Vj=[1,45],$Vk=[1,39],$Vl=[1,40],$Vm=[1,41],$Vn=[1,42],$Vo=[1,43],$Vp=[1,44],$Vq=[24,48,53],$Vr=[1,61],$Vs=[1,60],$Vt=[1,62],$Vu=[1,63],$Vv=[1,64],$Vw=[1,65],$Vx=[16,25,33,39,40,41,42,43,48,51,54,65,66,67,68,69,70,72,73],$Vy=[2,33],$Vz=[1,68],$VA=[16,46],$VB=[2,20],$VC=[1,72],$VD=[1,80],$VE=[1,84],$VF=[5,15,16,17,18,21,22,24,27,28,29,30,31,50,57,60,74,75,76,77],$VG=[1,99],$VH=[1,105],$VI=[1,108],$VJ=[25,48,54],$VK=[1,114],$VL=[1,115],$VM=[16,48,72,73],$VN=[16,33,39,40,41,42,43],$VO=[1,132],$VP=[1,138],$VQ=[2,46],$VR=[25,48],$VS=[1,204],$VT=[5,15,17,18,21,22,24,27,28,29,30,31,50,57,60,62,74,75,76,77];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracionVariables":7,"VectoresMatrices":8,"sentenciaIfCompleta":9,"ciclosWhile":10,"cicloFor":11,"funciones":12,"metodos":13,"impresion":14,"PR_BREAK":15,"PTCOMA":16,"PR_CONTINUE":17,"PR_RETURN":18,"valoresPlus":19,"comentarios":20,"COM_MULT":21,"COM_SIMPLE":22,"identificadores":23,"ID":24,"COMA":25,"tiposVar":26,"PR_INT":27,"PR_DOUBLE":28,"PR_BOOL":29,"PR_CHAR":30,"PR_STRING":31,"valores":32,"MENOS":33,"DECIMAL":34,"ENTERO":35,"BOOLEAN":36,"STRING":37,"CHAR":38,"MAS":39,"POR":40,"DIVIDIDO":41,"POTENCIA":42,"MODULO":43,"valoresArreglos":44,"arregloDeclaraciones":45,"IGUAL":46,"PARIZQ":47,"PARDER":48,"IncrementoDecremento":49,"PR_COUT":50,"SALIDA":51,"PR_ENDL":52,"CORIZQ":53,"CORDER":54,"PR_NEW":55,"sentenciaIf":56,"PR_IF":57,"sentenciaLogica":58,"LLAVIZQ":59,"LLAVDER":60,"sentenciaIfElse":61,"PR_ELSE":62,"sentenciaElse":63,"sentenciaRelacional":64,"IGUALES":65,"DIFERENTE":66,"MENOR_QUE":67,"MENOR_IGUAL":68,"MAYOR_QUE":69,"MAYOR_IGUAL":70,"NOT":71,"OR":72,"AND":73,"PR_WHILE":74,"PR_DO":75,"PR_FOR":76,"PR_VOID":77,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:"PR_BREAK",16:"PTCOMA",17:"PR_CONTINUE",18:"PR_RETURN",21:"COM_MULT",22:"COM_SIMPLE",24:"ID",25:"COMA",27:"PR_INT",28:"PR_DOUBLE",29:"PR_BOOL",30:"PR_CHAR",31:"PR_STRING",33:"MENOS",34:"DECIMAL",35:"ENTERO",36:"BOOLEAN",37:"STRING",38:"CHAR",39:"MAS",40:"POR",41:"DIVIDIDO",42:"POTENCIA",43:"MODULO",46:"IGUAL",47:"PARIZQ",48:"PARDER",50:"PR_COUT",51:"SALIDA",52:"PR_ENDL",53:"CORIZQ",54:"CORDER",55:"PR_NEW",57:"PR_IF",59:"LLAVIZQ",60:"LLAVDER",62:"PR_ELSE",65:"IGUALES",66:"DIFERENTE",67:"MENOR_QUE",68:"MENOR_IGUAL",69:"MAYOR_QUE",70:"MAYOR_IGUAL",71:"NOT",72:"OR",73:"AND",74:"PR_WHILE",75:"PR_DO",76:"PR_FOR",77:"PR_VOID"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,3],[6,2],[6,1],[20,1],[20,1],[23,3],[23,1],[26,1],[26,1],[26,1],[26,1],[26,1],[32,2],[32,2],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,1],[44,3],[44,1],[45,4],[45,2],[7,3],[7,5],[7,8],[7,7],[7,8],[49,3],[49,3],[14,6],[14,4],[8,11],[8,16],[8,9],[8,17],[8,8],[8,11],[8,7],[8,10],[56,7],[61,9],[61,8],[63,4],[9,3],[9,2],[9,2],[9,1],[64,3],[64,3],[64,3],[64,3],[64,3],[64,3],[64,1],[64,2],[58,3],[58,3],[58,1],[10,7],[10,9],[11,11],[11,14],[12,8],[12,7],[13,8],[13,7],[13,5],[13,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,17:$V1,18:$V2,20:15,21:$V3,22:$V4,24:$V5,26:16,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,50:$Vb,56:18,57:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg},{1:[3]},{5:[1,32]},o($Vh,[2,3],{6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,20:15,26:16,56:18,4:33,15:$V0,17:$V1,18:$V2,21:$V3,22:$V4,24:$V5,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,50:$Vb,57:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg}),o($Vi,[2,4]),o($Vi,[2,5]),o($Vi,[2,6]),o($Vi,[2,7]),o($Vi,[2,8]),o($Vi,[2,9]),o($Vi,[2,10]),o($Vi,[2,11]),{16:[1,34]},{16:[1,35]},{16:[1,37],19:36,24:$Vj,32:38,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp},o($Vi,[2,16]),{23:46,24:[1,47]},{47:[1,49],53:[1,48]},o($Vi,[2,69],{61:50,63:51,62:[1,52]}),{47:[1,53]},{59:[1,54]},{47:[1,55]},{24:[1,56]},{51:[1,57]},o($Vi,[2,17]),o($Vi,[2,18]),o($Vq,[2,21]),o($Vq,[2,22]),o($Vq,[2,23]),o($Vq,[2,24]),o($Vq,[2,25]),{47:[1,58]},{1:[2,1]},o($Vh,[2,2]),o($Vi,[2,12]),o($Vi,[2,13]),{16:[1,59],33:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw},o($Vi,[2,15]),o($Vx,[2,40]),{34:[1,66],35:[1,67]},o($Vx,[2,28]),o($Vx,[2,29]),o($Vx,[2,30]),o($Vx,[2,31]),o($Vx,[2,32]),o($Vx,$Vy),{16:$Vz,46:[1,69]},o($VA,$VB,{25:$VC,47:[1,71],53:[1,70]}),{35:[1,73]},{19:76,24:$Vj,32:38,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,44:74,48:[1,75]},o($Vi,[2,67],{63:77,62:[1,78]}),o($Vi,[2,68]),{57:[1,79],59:$VD},{19:83,24:$Vj,32:38,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,58:81,64:82,71:$VE},{4:85,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,17:$V1,18:$V2,20:15,21:$V3,22:$V4,24:$V5,26:16,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,50:$Vb,56:18,57:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg},{7:86,26:87,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va},{47:[1,88]},{19:89,24:$Vj,32:38,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp},{19:83,24:$Vj,32:38,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,58:90,64:82,71:$VE},o($Vi,[2,14]),{24:$Vj,32:91,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp},{24:$Vj,32:92,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp},{24:$Vj,32:93,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp},{24:$Vj,32:94,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp},{24:$Vj,32:95,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp},{24:$Vj,32:96,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp},o($Vx,[2,26]),o($Vx,[2,27]),o($VF,[2,45]),{19:97,24:[1,98],32:38,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,47:$VG},{54:[1,100]},{26:103,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,45:101,48:[1,102]},{23:104,24:$VH},{54:[1,106]},{25:$VI,48:[1,107]},{16:[1,109]},o($VJ,[2,42],{33:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw}),o($Vi,[2,66]),{57:[1,110],59:$VD},{47:[1,111]},{4:112,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,17:$V1,18:$V2,20:15,21:$V3,22:$V4,24:$V5,26:16,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,50:$Vb,56:18,57:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg},{48:[1,113],72:$VK,73:$VL},o($VM,[2,80]),o($VM,[2,76],{33:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,65:[1,116],66:[1,117],67:[1,118],68:[1,119],69:[1,120],70:[1,121]}),{19:122,24:$Vj,32:38,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp},{60:[1,123]},{16:[1,124]},{23:125,24:$VH},{26:103,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,45:126,48:[1,127]},{16:[1,129],33:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,51:[1,128]},{48:[1,130],72:$VK,73:$VL},o($Vx,[2,34]),o($Vx,[2,35]),o($Vx,[2,36]),o($Vx,[2,37]),o($Vx,[2,38]),o($Vx,[2,39]),{16:[1,131],33:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw},o($VN,$Vy,{47:$VO,53:[1,133]}),{26:134,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va},{46:[1,135],53:[1,136]},{25:$VP,48:[1,137]},{59:[1,139]},{24:[1,140]},o($VA,[2,19]),o($VA,$VB,{25:$VC}),{46:[1,141],53:[1,142]},{16:[1,143]},{19:144,24:$Vj,32:38,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp},o($Vi,[2,90]),{47:[1,145]},{19:83,24:$Vj,32:38,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,58:146,64:82,71:$VE},{60:[1,147]},{59:[1,148]},{19:83,24:$Vj,32:38,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,64:149,71:$VE},{19:83,24:$Vj,32:38,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,64:150,71:$VE},{19:151,24:$Vj,32:38,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp},{19:152,24:$Vj,32:38,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp},{19:153,24:$Vj,32:38,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp},{19:154,24:$Vj,32:38,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp},{19:155,24:$Vj,32:38,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp},{19:156,24:$Vj,32:38,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp},o($VM,[2,77],{33:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw}),{74:[1,157]},{19:83,24:$Vj,32:38,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,58:158,64:82,71:$VE},{16:$Vz,46:[1,159]},{25:$VP,48:[1,160]},{59:[1,161]},{52:[1,162]},o($Vi,[2,53]),{59:[1,163]},o($Vi,$VQ),{19:76,24:$Vj,32:38,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,44:164,48:[1,165]},{35:[1,166]},{48:[1,167]},{53:[1,169],55:[1,168]},{54:[1,170]},{59:[1,171]},{26:172,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va},{4:173,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,17:$V1,18:$V2,20:15,21:$V3,22:$V4,24:$V5,26:16,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,50:$Vb,56:18,57:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg},o($VR,[2,44]),{19:174,24:$Vj,32:38,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp},{35:[1,175]},o($Vi,[2,89]),o($VJ,[2,41],{33:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw}),{19:83,24:$Vj,32:38,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,58:176,64:82,71:$VE},{48:[1,177],72:$VK,73:$VL},o($Vi,[2,65]),{4:178,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,17:$V1,18:$V2,20:15,21:$V3,22:$V4,24:$V5,26:16,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,50:$Vb,56:18,57:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg},o($VM,[2,78]),o($VM,[2,79]),o($VM,[2,70],{33:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw}),o($VM,[2,71],{33:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw}),o($VM,[2,72],{33:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw}),o($VM,[2,73],{33:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw}),o($VM,[2,74],{33:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw}),o($VM,[2,75],{33:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw}),{47:[1,179]},{16:[1,180],72:$VK,73:$VL},{19:181,24:[1,182],32:38,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,47:$VG},{59:[1,183]},{4:184,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,17:$V1,18:$V2,20:15,21:$V3,22:$V4,24:$V5,26:16,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,50:$Vb,56:18,57:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg},{16:[1,185]},{4:186,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,17:$V1,18:$V2,20:15,21:$V3,22:$V4,24:$V5,26:16,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,50:$Vb,56:18,57:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg},{25:$VI,48:[1,187]},{16:[1,188]},{54:[1,189]},{19:190,24:$Vj,32:38,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp},{26:191,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va},{19:76,24:$Vj,32:38,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,44:192},{46:[1,193]},{4:194,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,17:$V1,18:$V2,20:15,21:$V3,22:$V4,24:$V5,26:16,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,50:$Vb,56:18,57:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg},{24:[1,195]},{60:[1,196]},{16:[1,197],33:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw},{54:[1,198]},{48:[1,199],72:$VK,73:$VL},{59:[1,200]},{60:[1,201]},{19:83,24:$Vj,32:38,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,58:202,64:82,71:$VE},{24:$VS,49:203},{16:[1,205],33:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw},o($VN,$Vy,{47:$VO}),{4:206,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,17:$V1,18:$V2,20:15,21:$V3,22:$V4,24:$V5,26:16,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,50:$Vb,56:18,57:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg},{60:[1,207]},o($Vi,[2,52]),{60:[1,208]},{16:[1,209]},o($VF,[2,48]),{16:[1,210],53:[1,211]},{16:[1,212],33:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw},{53:[1,213]},{25:$VI,54:[1,214]},{53:[1,216],55:[1,215]},{60:[1,217]},o($VR,[2,43]),o($Vi,[2,86]),o($Vi,[2,60]),{46:[1,218]},{59:[1,219]},{4:220,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,17:$V1,18:$V2,20:15,21:$V3,22:$V4,24:$V5,26:16,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,50:$Vb,56:18,57:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg},o($Vi,[2,81]),{48:[1,221],72:$VK,73:$VL},{48:[1,222]},{33:[1,224],39:[1,223]},{16:$VQ,19:83,24:$Vj,32:38,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,58:225,64:82,71:$VE},{60:[1,226]},o($Vi,[2,88]),o($VT,[2,62]),o($VF,[2,47]),o($Vi,[2,58]),{35:[1,227]},o($VF,[2,49]),{35:[1,228]},{16:[1,229]},{26:230,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va},{53:[1,231]},o($Vi,[2,85]),{19:232,24:$Vj,32:38,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp},{4:233,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,17:$V1,18:$V2,20:15,21:$V3,22:$V4,24:$V5,26:16,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,50:$Vb,56:18,57:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg},{60:[1,234]},{16:[1,235]},{59:[1,236]},{39:[1,237]},{33:[1,238]},{16:[1,239],72:$VK,73:$VL},o($Vi,[2,87]),{54:[1,240]},{54:[1,241]},o($Vi,[2,56]),{53:[1,242]},{19:76,24:$Vj,32:38,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,44:243},{16:[1,244],33:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw},{60:[1,245]},o($VT,[2,64]),o($Vi,[2,82]),{4:246,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,17:$V1,18:$V2,20:15,21:$V3,22:$V4,24:$V5,26:16,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,50:$Vb,56:18,57:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg},{48:[2,50]},{48:[2,51]},{24:$VS,49:247},{16:[1,248]},{16:[1,249]},{35:[1,250]},{25:$VI,54:[1,251]},o($Vi,[2,61]),o($VT,[2,63]),{60:[1,252]},{48:[1,253]},o($Vi,[2,59]),o($Vi,[2,54]),{54:[1,254]},{25:[1,255]},o($Vi,[2,83]),{59:[1,256]},{53:[1,257]},{53:[1,258]},{4:259,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V0,17:$V1,18:$V2,20:15,21:$V3,22:$V4,24:$V5,26:16,27:$V6,28:$V7,29:$V8,30:$V9,31:$Va,50:$Vb,56:18,57:$Vc,74:$Vd,75:$Ve,76:$Vf,77:$Vg},{35:[1,260]},{19:76,24:$Vj,32:38,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,44:261},{60:[1,262]},{54:[1,263]},{25:$VI,54:[1,264]},o($Vi,[2,84]),{16:[1,265]},{54:[1,266]},o($Vi,[2,55]),{16:[1,267]},o($Vi,[2,57])],
defaultActions: {32:[2,1],237:[2,50],238:[2,51]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:return 21; 
break;
case 5:return 22; 
break;
case 6:return 27;
break;
case 7:return 28;
break;
case 8:return 29;
break;
case 9:return 30;
break;
case 10:return 31;
break;
case 11:return 55;
break;
case 12:return 57;
break;
case 13:return 62;
break;
case 14:return 74;
break;
case 15:return 76;
break;
case 16:return 75;
break;
case 17:return 15;
break;
case 18:return 17;
break;
case 19:return 18;
break;
case 20:return 77;
break;
case 21:return 50;
break;
case 22:return 52;
break;
case 23:return 36; 
break;
case 24:return 38; 
break;
case 25:return 37; 
break;
case 26:return 24; 
break;
case 27:return 34; 
break;
case 28:return 35; 
break;
case 29:return 'SALTO_LINEA';
break;
case 30:return 'BARRA_INVERTIDA';
break;
case 31:return 'COMILLA_DOBLE';
break;
case 32:return 'TABULACION';
break;
case 33:return 'COMILLA_SIMPLE';
break;
case 34:return 39;
break;
case 35:return 33;
break;
case 36:return 40;
break;
case 37:return 41;
break;
case 38:return 42;
break;
case 39:return 43;
break;
case 40:return 'ENTRADA';
break;
case 41:return 51;
break;
case 42:return 65;
break;
case 43:return 66;
break;
case 44:return 68;
break;
case 45:return 70;
break;
case 46:return 69;
break;
case 47:return 67;
break;
case 48:return 46;
break;
case 49:return 72;
break;
case 50:return 73;
break;
case 51:return 71;
break;
case 52:return 47;
break;
case 53:return 48;
break;
case 54:return 59;
break;
case 55:return 60;
break;
case 56:return 53;
break;
case 57:return 54;
break;
case 58:return 16;
break;
case 59:return 25;
break;
case 60:return 5;
break;
case 61:console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:{COM_MULT})/i,/^(?:{COM_SIMPLE})/i,/^(?:(\/\*[\s\S]*?\*\/))/i,/^(?:(\/\/.*))/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:bool\b)/i,/^(?:char\b)/i,/^(?:std::string\b)/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:cout\b)/i,/^(?:endl\b)/i,/^(?:(true|false\b))/i,/^(?:('(([^\n\"\\]|\\.)*)'))/i,/^(?:([\"][^\"\n]+[\"]))/i,/^(?:([a-zA-Z_][a-zA-Z0-9_]*))/i,/^(?:([0-9]+\.[0-9]+\b))/i,/^(?:([0-9]+\b))/i,/^(?:\\n)/i,/^(?:\\)/i,/^(?:\\")/i,/^(?:\\t)/i,/^(?:')/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:pow\b)/i,/^(?:%)/i,/^(?:>>)/i,/^(?:<<)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?:,)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}