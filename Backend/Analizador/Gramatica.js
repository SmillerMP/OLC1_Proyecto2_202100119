/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,14],$V1=[1,15],$V2=[1,16],$V3=[1,17],$V4=[1,18],$V5=[1,19],$V6=[1,13],$V7=[1,12],$V8=[5,27,35,36,37,38,39,98,99],$V9=[5,7,8,20,23,24,27,35,36,37,38,39,40,47,48,50,51,53,54,55,56,57,62,65,76,90,91,92,93,95,96,97,98,99,104,105],$Va=[26,61,62,63,64,66,69],$Vb=[2,25],$Vc=[1,31],$Vd=[1,32],$Ve=[27,46,58],$Vf=[1,40],$Vg=[7,26,69],$Vh=[1,44],$Vi=[1,52],$Vj=[1,57],$Vk=[1,53],$Vl=[1,54],$Vm=[1,55],$Vn=[1,56],$Vo=[1,58],$Vp=[1,59],$Vq=[1,60],$Vr=[1,61],$Vs=[1,62],$Vt=[1,49],$Vu=[1,50],$Vv=[1,70],$Vw=[1,88],$Vx=[7,26,46,59],$Vy=[1,90],$Vz=[1,91],$VA=[1,92],$VB=[1,93],$VC=[1,94],$VD=[7,20,26,40,46,59,61,62,63,64,66,82,83,84,85,86,87,88,89,103],$VE=[2,52],$VF=[1,97],$VG=[1,98],$VH=[7,46],$VI=[1,109],$VJ=[1,110],$VK=[7,20,46,88,89,103],$VL=[7,20,46,82,83,84,85,86,87,88,89,103],$VM=[1,122],$VN=[1,127],$VO=[5,7,8,20,23,24,27,35,36,37,38,39,40,76,91,92,93,95,96,97,98,99,104,105],$VP=[1,169],$VQ=[1,171],$VR=[1,172],$VS=[1,181],$VT=[1,175],$VU=[1,176],$VV=[1,177],$VW=[1,179],$VX=[1,178],$VY=[1,180],$VZ=[26,46],$V_=[7,20,26,40,46,59,61,62,82,83,84,85,86,87,88,89,103],$V$=[7,8,20,23,24,27,35,36,37,38,39,40,76,91,92,93,95,96,97,104,105],$V01=[1,245],$V11=[1,254],$V21=[1,253],$V31=[1,255],$V41=[7,103],$V51=[26,59],$V61=[7,8,20,23,24,27,35,36,37,38,39,40,76,79,91,92,93,95,96,97,104,105],$V71=[8,95,97];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"entornos":4,"EOF":5,"entorno":6,"PTCOMA":7,"LLAVDER":8,"declaracionVariables":9,"funcionExecute":10,"funciones":11,"llamarFunciones":12,"instrucciones":13,"instruccion":14,"sentenciaIfCompleta":15,"ciclosWhile":16,"cicloFor":17,"impresionCout":18,"switchCase":19,"INTERROGACION":20,"ternario":21,"sentenciaReturn":22,"PR_BREAK":23,"PR_CONTINUE":24,"identificadores":25,"COMA":26,"ID":27,"secuenciasEscape":28,"SALTO_LINEA":29,"BARRA_INVERTIDA":30,"COMILLA_DOBLE":31,"TABULACION":32,"COMILLA_SIMPLE":33,"tiposVar":34,"PR_INT":35,"PR_DOUBLE":36,"PR_BOOL":37,"PR_CHAR":38,"PR_STD":39,"DOSPUNTOS":40,"PR_STRING":41,"valores":42,"PUNTO":43,"PR_LENGTH":44,"PARIZQ":45,"PARDER":46,"PR_TYPEOF":47,"PR_ROUND":48,"valoresPlus":49,"PR_TOUPPER":50,"PR_TOLOWER":51,"PR_TOSTRING":52,"DECIMAL":53,"ENTERO":54,"BOOLEAN":55,"STRING":56,"CHAR":57,"CORIZQ":58,"CORDER":59,"valoresArreglos":60,"MAS":61,"MENOS":62,"POR":63,"DIVIDIDO":64,"POTENCIA":65,"MODULO":66,"valoresArregloMatrices":67,"arregloDeclaraciones":68,"IGUAL":69,"sentenciaLogica":70,"modificarVariables":71,"VectoresMatrices":72,"PR_NEW":73,"PR_C_STR":74,"sentenciaIf":75,"PR_IF":76,"LLAVIZQ":77,"sentenciaIfElse":78,"PR_ELSE":79,"sentenciaElse":80,"sentenciaRelacional":81,"IGUALES":82,"DIFERENTE":83,"MENOR_QUE":84,"MENOR_IGUAL":85,"MAYOR_QUE":86,"MAYOR_IGUAL":87,"OR":88,"AND":89,"NOT":90,"PR_WHILE":91,"PR_DO":92,"PR_FOR":93,"recursividadCase":94,"PR_CASE":95,"PR_SWITCH":96,"PR_DEFAULT":97,"PR_VOID":98,"PR_EXECUTE":99,"posibilidadesCout":100,"PR_ENDL":101,"funcionCout":102,"SALIDA":103,"PR_COUT":104,"PR_RETURN":105,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"PTCOMA",8:"LLAVDER",20:"INTERROGACION",23:"PR_BREAK",24:"PR_CONTINUE",26:"COMA",27:"ID",29:"SALTO_LINEA",30:"BARRA_INVERTIDA",31:"COMILLA_DOBLE",32:"TABULACION",33:"COMILLA_SIMPLE",35:"PR_INT",36:"PR_DOUBLE",37:"PR_BOOL",38:"PR_CHAR",39:"PR_STD",40:"DOSPUNTOS",41:"PR_STRING",43:"PUNTO",44:"PR_LENGTH",45:"PARIZQ",46:"PARDER",47:"PR_TYPEOF",48:"PR_ROUND",50:"PR_TOUPPER",51:"PR_TOLOWER",52:"PR_TOSTRING",53:"DECIMAL",54:"ENTERO",55:"BOOLEAN",56:"STRING",57:"CHAR",58:"CORIZQ",59:"CORDER",61:"MAS",62:"MENOS",63:"POR",64:"DIVIDIDO",65:"POTENCIA",66:"MODULO",69:"IGUAL",73:"PR_NEW",74:"PR_C_STR",76:"PR_IF",77:"LLAVIZQ",79:"PR_ELSE",82:"IGUALES",83:"DIFERENTE",84:"MENOR_QUE",85:"MENOR_IGUAL",86:"MAYOR_QUE",87:"MAYOR_IGUAL",88:"OR",89:"AND",90:"NOT",91:"PR_WHILE",92:"PR_DO",93:"PR_FOR",95:"PR_CASE",96:"PR_SWITCH",97:"PR_DEFAULT",98:"PR_VOID",99:"PR_EXECUTE",101:"PR_ENDL",103:"SALIDA",104:"PR_COUT",105:"PR_RETURN"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[4,2],[4,2],[6,1],[6,1],[6,1],[6,1],[13,2],[13,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,3],[14,1],[14,2],[14,2],[25,3],[25,1],[28,2],[28,2],[28,2],[28,2],[28,2],[28,1],[28,1],[28,1],[28,1],[28,1],[34,1],[34,1],[34,1],[34,1],[34,4],[42,5],[42,4],[42,4],[42,4],[42,4],[42,7],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[42,4],[42,7],[42,4],[49,3],[49,3],[49,2],[49,3],[49,3],[49,6],[49,3],[49,1],[60,3],[60,1],[67,5],[67,3],[68,4],[68,2],[9,3],[9,5],[9,7],[9,5],[9,8],[9,2],[9,1],[71,3],[71,3],[71,3],[71,4],[71,4],[71,4],[71,4],[71,4],[72,11],[72,16],[72,9],[72,11],[72,7],[72,10],[72,11],[75,7],[78,9],[78,8],[80,4],[15,3],[15,2],[15,2],[15,1],[21,5],[81,3],[81,3],[81,3],[81,3],[81,3],[81,3],[81,1],[70,3],[70,3],[70,2],[70,1],[16,7],[16,9],[17,10],[94,5],[94,4],[19,10],[19,7],[11,8],[11,7],[11,8],[11,7],[12,5],[12,4],[10,2],[100,1],[100,3],[100,3],[100,1],[102,3],[102,1],[18,4],[22,3],[22,2],[22,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = $$[$0-1]; return this.$; 
break;
case 2: case 11:
this.$ = $$[$0-1]; this.$.push($$[$0]);
break;
case 3: case 12: case 25: case 65:
this.$ = []; this.$.push($$[$0]);
break;
case 4: case 5: case 6:
 agregarSalida('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
case 7: case 8: case 9: case 10: case 126:
 this.$ = $$[$0];
break;
case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 21: case 76:
this.$ = $$[$0];
break;
case 20: case 75:
this.$ = $$[$0-1];
break;
case 22:
this.$ = new Break($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column+1);
break;
case 23:
this.$ = new Continue($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column+1);
break;
case 24: case 64:
this.$ = $$[$0-2]; this.$.push($$[$0]);
break;
case 36:
this.$ = "ENTERO";
break;
case 37:
this.$ = "DECIMAL";
break;
case 38:
this.$ = "BOOL";
break;
case 39:
this.$ = "CHAR";
break;
case 40:
this.$ = "STRING";
break;
case 43: case 44: case 45:
this.$ = new FuncionCout($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column+1);
break;
case 46:
this.$ = new FuncionCout($$[$0-3], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column+1);
break;
case 47:
 this.$ = new Dato($$[$0], TipoDato.DECIMAL, _$[$0].first_line, _$[$0].first_column+1); 
break;
case 48:
 this.$ = new Dato($$[$0], TipoDato.ENTERO, _$[$0].first_line, _$[$0].first_column+1); 
break;
case 49:
 this.$ = new Dato($$[$0], TipoDato.BOOL, _$[$0].first_line, _$[$0].first_column+1); 
break;
case 50:
 this.$ = new Dato($$[$0], TipoDato.STRING, _$[$0].first_line, _$[$0].first_column+1); 
break;
case 51:
 this.$ = new Dato($$[$0], TipoDato.CHAR, _$[$0].first_line, _$[$0].first_column+1); 
break;
case 52:
 this.$ = new Variable($$[$0], null, null, _$[$0].first_line, _$[$0].first_column+1); 
break;
case 53:
 this.$ = new Variable($$[$0-3], $$[$0-1], null, _$[$0-3].first_line, _$[$0-3].first_column+1); 
break;
case 54:
 this.$ = new Variable($$[$0-6], $$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column+1); 
break;
case 55:
 this.$ = new LlamarFuncion($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column+1);
break;
case 56: case 57: case 59: case 60: case 62:
 this.$ = new Aritmetica($$[$0-2], $$[$0], $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column+1); 
break;
case 58:
 this.$ = new Negativo($$[$0], _$[$0-1].first_line, _$[$0-1].first_column+1);           
break;
case 61:
 this.$ = new Aritmetica($$[$0-3], $$[$0-1], $$[$0-4], _$[$0-5].first_line, _$[$0-5].first_column+1); 
break;
case 63: case 107: case 111:
 this.$ = $$[$0]; 
break;
case 66:
this.$ = $$[$0-4]; this.$.push($$[$0-1]);
break;
case 67:
this.$ = []; this.$.push($$[$0-1]);
break;
case 68:
this.$ = $$[$0-3]; this.$.push(new Declaracion($$[$0-1], $$[$0], null, _$[$0-3].first_line, _$[$0-3].first_column+1));
break;
case 69:
this.$ = []; this.$.push(new Declaracion($$[$0-1], $$[$0], null, _$[$0-1].first_line, _$[$0-1].first_column+1));
break;
case 70:
this.$ = new Declaracion($$[$0-2], $$[$0-1], null, _$[$0-2].first_line, _$[$0-2].first_column+1);
break;
case 71:
this.$ = new Declaracion($$[$0-4], $$[$0-3], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column+1);
break;
case 77: case 78:
this.$ = new ActualizacionFor($$[$0-2], $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column+1);
break;
case 79:
this.$ = new ModificarVar($$[$0-2], $$[$0-1], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column+1);
break;
case 80: case 81: case 82: case 83: case 84:
this.$ = new ModificarVar($$[$0-3], $$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column+1);
break;
case 85:
this.$ = new DeclaracionVec($$[$0-10], $$[$0-9], $$[$0-4], $$[$0-2], _$[$0-10].first_line, _$[$0-10].first_column+1);
break;
case 86:
this.$ = new DeclaracionMatriz($$[$0-15], $$[$0-14], $$[$0-7], $$[$0-5], $$[$0-2], _$[$0-15].first_line, _$[$0-15].first_column+1);
break;
case 87:
this.$ = new DeclaracionVec($$[$0-8], $$[$0-7], null, $$[$0-2], _$[$0-8].first_line, _$[$0-8].first_column+1);
break;
case 88:
this.$ = new DeclaracionMatriz($$[$0-10], $$[$0-9], null, $$[$0-2], null, _$[$0-10].first_line, _$[$0-10].first_column+1);
break;
case 89:
this.$ = new ModificarVar(new Variable($$[$0-6], $$[$0-4], null, _$[$0-6].first_line, _$[$0-6].first_column+1) , $$[$0-2], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column+1);
break;
case 90:
this.$ = new ModificarVar(new Variable($$[$0-9], $$[$0-7], $$[$0-4], _$[$0-9].first_line, _$[$0-9].first_column+1) , $$[$0-2], $$[$0-1], _$[$0-9].first_line, _$[$0-9].first_column+1);
break;
case 92:
this.$ = new If($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column+1)
break;
case 93:
this.$ = $$[$0-8]; this.$.push(new ElseIf($$[$0-4], $$[$0-1], _$[$0-8].first_line, _$[$0-8].first_column+1))
break;
case 94:
this.$ = []; this.$.push(new ElseIf($$[$0-4], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column+1))
break;
case 95:
this.$ = new Else($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column+1)
break;
case 96:
this.$ = new SentenciaIf($$[$0-2], $$[$0-1], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column+1);
break;
case 97:
this.$ = new SentenciaIf($$[$0-1], $$[$0], null, _$[$0-1].first_line, _$[$0-1].first_column+1);
break;
case 98:
this.$ = new SentenciaIf($$[$0-1], null, $$[$0], _$[$0-1].first_line, _$[$0-1].first_column+1);
break;
case 99:
this.$ = new SentenciaIf($$[$0], null, null, _$[$0].first_line, _$[$0].first_column+1);
break;
case 100:
this.$ = new Ternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column+1);
break;
case 101: case 102: case 103: case 104: case 105: case 106:
 this.$ = new Relacional($$[$0-2], $$[$0], $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column+1); 
break;
case 108:
 this.$ = new opLogicos($$[$0-2], $$[$0], $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column+1); 
break;
case 109:
 this.$ = new opLogico($$[$0-2], $$[$0], $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column+1); 
break;
case 110:
 this.$ = new Negacion($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column+1); 
break;
case 112:
 this.$ = new While($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column+1); 
break;
case 113:
 this.$ = new DoWhile($$[$0-2], $$[$0-6], _$[$0-8].first_line, _$[$0-8].first_column+1); 
break;
case 114:
 this.$ = new For($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1], _$[$0-9].first_line, _$[$0-9].first_column+1);
break;
case 115:
this.$ = $$[$0-4]; this.$.push(new Case($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column+1));
break;
case 116:
this.$ = []; this.$.push(new Case($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column+1));
break;
case 117:
this.$ = new Switch($$[$0-7], $$[$0-4], $$[$0-1], _$[$0-9].first_line, _$[$0-9].first_column+1);
break;
case 118:
this.$ = new Switch($$[$0-4], $$[$0-1], null, _$[$0-6].first_line, _$[$0-6].first_column+1);
break;
case 119:
this.$ = new DeclararFuncion($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1], null, _$[$0-7].first_line, _$[$0-7].first_column+1);
break;
case 120:
this.$ = new DeclararFuncion($$[$0-6], $$[$0-5], null, $$[$0-1], null, _$[$0-6].first_line, _$[$0-6].first_column+1);
break;
case 121:
;this.$ = new DeclararFuncion(null, $$[$0-6], $$[$0-4], $$[$0-1], null, _$[$0-7].first_line, _$[$0-7].first_column+1);
break;
case 122:
this.$ = new DeclararFuncion(null, $$[$0-5], null, $$[$0-1], null, _$[$0-6].first_line, _$[$0-6].first_column+1);
break;
case 123:
this.$ = new LlamarFuncion($$[$0-4], $$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column+1);
break;
case 124:
this.$ = new LlamarFuncion($$[$0-3], null, _$[$0-3].first_line, _$[$0-3].first_column+1);
break;
case 125:
this.$ = new Execute($$[$0], _$[$0-1].first_line, _$[$0-1].first_column+1);
break;
case 127:
 this.$ = $$[$0-2];
break;
case 128:
 this.$ = new LlamarFuncion($$[$0-2], null, _$[$0-2].first_line, _$[$0-2].first_column+1);
break;
case 129:
 this.$ = new Dato("\n", TipoDato.STRING, _$[$0].first_line, _$[$0].first_column+1);
break;
case 130:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 131:
 this.$ = []; this.$.push($$[$0]); 
break;
case 132:
 this.$ = new Cout($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column+1);
break;
case 133:
 this.$ = new Return($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column+1);
break;
case 134:
 this.$ = new Return(null, _$[$0-1].first_line, _$[$0-1].first_column+1);
break;
case 135:
 this.$ = new Return($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column+1);
break;
}
},
table: [{2:[1,4],3:1,4:2,6:3,9:5,10:6,11:7,12:8,25:20,27:$V0,34:9,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,71:10,72:11,98:$V6,99:$V7},{1:[3]},{5:[1,21],6:22,9:5,10:6,11:7,12:8,25:20,27:$V0,34:9,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,71:10,72:11,98:$V6,99:$V7},o($V8,[2,3]),o($V8,[2,4],{7:[1,23],8:[1,24]}),o($V8,[2,7]),o($V8,[2,8]),o($V8,[2,9]),o($V8,[2,10]),{25:25,27:[1,26]},{7:[1,27]},o($V9,[2,76]),{12:28,27:[1,29]},{27:[1,30]},o($Va,$Vb,{45:$Vc,58:$Vd}),o($Ve,[2,36]),o($Ve,[2,37]),o($Ve,[2,38]),o($Ve,[2,39]),{40:[1,33]},{26:$Vf,61:[1,34],62:[1,35],63:[1,37],64:[1,38],66:[1,39],69:[1,36]},{1:[2,1]},o($V8,[2,2]),o($V8,[2,5]),o($V8,[2,6]),{7:[1,41],26:$Vf,69:[1,42]},o($Vg,$Vb,{45:[1,43],58:$Vh}),o($V9,[2,75]),o($V8,[2,125]),{45:$Vc},{45:[1,45]},{27:$Vi,39:$Vj,42:51,46:[1,47],47:$Vk,48:$Vl,49:48,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,60:46,62:$Vt,65:$Vu},{27:$Vi,39:$Vj,42:51,47:$Vk,48:$Vl,49:63,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,62:$Vt,65:$Vu},{40:[1,64]},{61:[1,65],69:[1,66]},{62:[1,67],69:[1,68]},{27:$Vi,39:$Vj,42:51,47:$Vk,48:$Vl,49:72,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,62:$Vt,65:$Vu,70:69,81:71,90:$Vv},{69:[1,73]},{69:[1,74]},{69:[1,75]},{27:[1,76]},o($V9,[2,70]),{21:79,27:[1,78],39:$Vj,42:51,45:[1,80],47:$Vk,48:$Vl,49:72,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,62:$Vt,65:$Vu,70:77,81:71,90:$Vv},{34:83,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,46:[1,82],68:81},{59:[1,84]},{34:83,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,46:[1,86],68:85},{26:$Vw,46:[1,87]},{7:[1,89]},o($Vx,[2,65],{61:$Vy,62:$Vz,63:$VA,64:$VB,66:$VC}),{27:$Vi,39:$Vj,42:51,47:$Vk,48:$Vl,49:95,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,62:$Vt,65:$Vu},{45:[1,96]},o($VD,[2,63]),o($VD,$VE,{43:$VF,45:[1,99],58:$VG}),{45:[1,100]},{45:[1,101]},{45:[1,102]},{45:[1,103]},{40:[1,104]},o($VD,[2,47]),o($VD,[2,48]),o($VD,[2,49]),o($VD,[2,50]),o($VD,[2,51]),{59:[1,105],61:$Vy,62:$Vz,63:$VA,64:$VB,66:$VC},{41:[1,106]},o($VH,[2,77]),{27:$Vi,39:$Vj,42:51,47:$Vk,48:$Vl,49:72,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,62:$Vt,65:$Vu,70:107,81:71,90:$Vv},o($VH,[2,78]),{27:$Vi,39:$Vj,42:51,47:$Vk,48:$Vl,49:108,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,62:$Vt,65:$Vu},o($VH,[2,79],{88:$VI,89:$VJ}),{27:$Vi,39:$Vj,42:51,47:$Vk,48:$Vl,49:72,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,62:$Vt,65:$Vu,70:111,81:71,90:$Vv},o($VK,[2,111],{82:[1,112],83:[1,113],84:[1,114],85:[1,115],86:[1,116],87:[1,117]}),o($VL,[2,107],{61:$Vy,62:$Vz,63:$VA,64:$VB,66:$VC}),{27:$Vi,39:$Vj,42:51,47:$Vk,48:$Vl,49:72,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,62:$Vt,65:$Vu,70:118,81:71,90:$Vv},{27:$Vi,39:$Vj,42:51,47:$Vk,48:$Vl,49:72,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,62:$Vt,65:$Vu,70:119,81:71,90:$Vv},{27:$Vi,39:$Vj,42:51,47:$Vk,48:$Vl,49:72,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,62:$Vt,65:$Vu,70:120,81:71,90:$Vv},o([7,26,61,62,63,64,66,69],[2,24]),{7:[1,121],20:$VM,88:$VI,89:$VJ},o([7,20,61,62,63,64,66,82,83,84,85,86,87,88,89],$VE,{43:$VF,45:[1,123],58:$VG}),{7:[1,124]},{34:125,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5},{26:$VN,46:[1,126]},{77:[1,128]},{27:[1,129]},{58:[1,131],69:[1,130]},{26:$VN,46:[1,132]},{77:[1,133]},{7:[1,134]},{27:$Vi,39:$Vj,42:51,47:$Vk,48:$Vl,49:135,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,62:$Vt,65:$Vu},o($VO,[2,124]),{27:$Vi,39:$Vj,42:51,47:$Vk,48:$Vl,49:136,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,62:$Vt,65:$Vu},{27:$Vi,39:$Vj,42:51,47:$Vk,48:$Vl,49:137,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,62:$Vt,65:$Vu},{27:$Vi,39:$Vj,42:51,47:$Vk,48:$Vl,49:138,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,62:$Vt,65:$Vu},{27:$Vi,39:$Vj,42:51,47:$Vk,48:$Vl,49:139,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,62:$Vt,65:$Vu},{27:$Vi,39:$Vj,42:51,47:$Vk,48:$Vl,49:140,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,62:$Vt,65:$Vu},o($VD,[2,58]),{27:$Vi,39:$Vj,42:51,47:$Vk,48:$Vl,49:141,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,62:$Vt,65:$Vu},{44:[1,142]},{27:$Vi,39:$Vj,42:51,47:$Vk,48:$Vl,49:143,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,62:$Vt,65:$Vu},{27:$Vi,39:$Vj,42:51,47:$Vk,48:$Vl,49:48,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,60:144,62:$Vt,65:$Vu},{27:$Vi,39:$Vj,42:145,47:$Vk,48:$Vl,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs},{27:$Vi,39:$Vj,42:51,47:$Vk,48:$Vl,49:146,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,62:$Vt,65:$Vu},{27:$Vi,39:$Vj,42:51,47:$Vk,48:$Vl,49:147,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,62:$Vt,65:$Vu},{27:$Vi,39:$Vj,42:51,47:$Vk,48:$Vl,49:148,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,62:$Vt,65:$Vu},{40:[1,149]},{58:[1,151],69:[1,150]},o($Ve,[2,40]),o($VH,[2,80],{88:$VI,89:$VJ}),o($VH,[2,81],{61:$Vy,62:$Vz,63:$VA,64:$VB,66:$VC}),{27:$Vi,39:$Vj,42:51,47:$Vk,48:$Vl,49:72,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,62:$Vt,65:$Vu,70:152,81:71,90:$Vv},{27:$Vi,39:$Vj,42:51,47:$Vk,48:$Vl,49:72,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,62:$Vt,65:$Vu,70:153,81:71,90:$Vv},o($VK,[2,110]),{27:$Vi,39:$Vj,42:51,47:$Vk,48:$Vl,49:72,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,62:$Vt,65:$Vu,81:154},{27:$Vi,39:$Vj,42:51,47:$Vk,48:$Vl,49:72,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,62:$Vt,65:$Vu,81:155},{27:$Vi,39:$Vj,42:51,47:$Vk,48:$Vl,49:72,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,62:$Vt,65:$Vu,81:156},{27:$Vi,39:$Vj,42:51,47:$Vk,48:$Vl,49:72,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,62:$Vt,65:$Vu,81:157},{27:$Vi,39:$Vj,42:51,47:$Vk,48:$Vl,49:72,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,62:$Vt,65:$Vu,81:158},{27:$Vi,39:$Vj,42:51,47:$Vk,48:$Vl,49:72,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,62:$Vt,65:$Vu,81:159},o($VH,[2,82],{88:$VI,89:$VJ}),o($VH,[2,83],{88:$VI,89:$VJ}),o($VH,[2,84],{88:$VI,89:$VJ}),o($V9,[2,71]),{9:162,12:163,13:160,14:161,15:164,16:165,17:166,18:167,19:168,20:$VP,22:170,23:$VQ,24:$VR,25:20,27:$V0,34:173,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,71:10,72:11,75:174,76:$VS,91:$VT,92:$VU,93:$VV,96:$VW,104:$VX,105:$VY},{27:$Vi,39:$Vj,42:51,46:[1,182],47:$Vk,48:$Vl,49:48,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,60:144,62:$Vt,65:$Vu},o($V9,[2,73]),{46:[1,183]},{77:[1,184]},{34:185,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5},{9:162,12:163,13:186,14:161,15:164,16:165,17:166,18:167,19:168,20:$VP,22:170,23:$VQ,24:$VR,25:20,27:$V0,34:173,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,71:10,72:11,75:174,76:$VS,91:$VT,92:$VU,93:$VV,96:$VW,104:$VX,105:$VY},o($VZ,[2,69]),{27:[1,189],58:[1,188],73:[1,187]},{59:[1,190]},{77:[1,191]},{9:162,12:163,13:192,14:161,15:164,16:165,17:166,18:167,19:168,20:$VP,22:170,23:$VQ,24:$VR,25:20,27:$V0,34:173,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,71:10,72:11,75:174,76:$VS,91:$VT,92:$VU,93:$VV,96:$VW,104:$VX,105:$VY},o($VO,[2,123]),o($Vx,[2,64],{61:$Vy,62:$Vz,63:$VA,64:$VB,66:$VC}),o($V_,[2,56],{63:$VA,64:$VB,66:$VC}),o($V_,[2,57],{63:$VA,64:$VB,66:$VC}),o($VD,[2,59]),o($VD,[2,60]),o($VD,[2,62]),{26:[1,193],61:$Vy,62:$Vz,63:$VA,64:$VB,66:$VC},{45:[1,194]},{59:[1,195],61:$Vy,62:$Vz,63:$VA,64:$VB,66:$VC},{26:$Vw,46:[1,196]},{46:[1,197]},{46:[1,198],61:$Vy,62:$Vz,63:$VA,64:$VB,66:$VC},{46:[1,199],61:$Vy,62:$Vz,63:$VA,64:$VB,66:$VC},{46:[1,200],61:$Vy,62:$Vz,63:$VA,64:$VB,66:$VC},{52:[1,201]},{27:$Vi,39:$Vj,42:51,47:$Vk,48:$Vl,49:202,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,62:$Vt,65:$Vu},{27:$Vi,39:$Vj,42:51,47:$Vk,48:$Vl,49:203,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,62:$Vt,65:$Vu},o([7,20,46,88,103],[2,108],{89:$VJ}),o($VK,[2,109]),o($VL,[2,101]),o($VL,[2,102]),o($VL,[2,103]),o($VL,[2,104]),o($VL,[2,105]),o($VL,[2,106]),{9:162,12:163,14:205,15:164,16:165,17:166,18:167,19:168,20:$VP,22:170,23:$VQ,24:$VR,25:20,27:$V0,34:173,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,40:[1,204],71:10,72:11,75:174,76:$VS,91:$VT,92:$VU,93:$VV,96:$VW,104:$VX,105:$VY},o($V$,[2,12]),o($V$,[2,13]),o($V$,[2,14]),o($V$,[2,15]),o($V$,[2,16]),o($V$,[2,17]),o($V$,[2,18]),o($V$,[2,19]),{21:206,27:$Vi,39:$Vj,42:51,47:$Vk,48:$Vl,49:72,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,62:$Vt,65:$Vu,70:207,81:71,90:$Vv},o($V$,[2,21]),{7:[1,208]},{7:[1,209]},{25:25,27:[1,210]},o($V$,[2,99],{78:211,80:212,79:[1,213]}),{45:[1,214]},{77:[1,215]},{45:[1,216]},{103:[1,217]},{45:[1,218]},{7:[1,220],27:$Vi,39:$Vj,42:51,45:[1,221],47:$Vk,48:$Vl,49:48,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,60:219,62:$Vt,65:$Vu},{45:[1,222]},{7:[1,223]},{27:$Vi,39:$Vj,42:51,47:$Vk,48:$Vl,49:224,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,62:$Vt,65:$Vu},{9:162,12:163,13:225,14:161,15:164,16:165,17:166,18:167,19:168,20:$VP,22:170,23:$VQ,24:$VR,25:20,27:$V0,34:173,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,71:10,72:11,75:174,76:$VS,91:$VT,92:$VU,93:$VV,96:$VW,104:$VX,105:$VY},{27:[1,226]},{8:[1,227],9:162,12:163,14:205,15:164,16:165,17:166,18:167,19:168,20:$VP,22:170,23:$VQ,24:$VR,25:20,27:$V0,34:173,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,71:10,72:11,75:174,76:$VS,91:$VT,92:$VU,93:$VV,96:$VW,104:$VX,105:$VY},{34:228,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5},{27:$Vi,39:$Vj,42:51,47:$Vk,48:$Vl,49:48,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,60:229,62:$Vt,65:$Vu},{43:[1,230]},{69:[1,231]},{9:162,12:163,13:232,14:161,15:164,16:165,17:166,18:167,19:168,20:$VP,22:170,23:$VQ,24:$VR,25:20,27:$V0,34:173,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,71:10,72:11,75:174,76:$VS,91:$VT,92:$VU,93:$VV,96:$VW,104:$VX,105:$VY},{8:[1,233],9:162,12:163,14:205,15:164,16:165,17:166,18:167,19:168,20:$VP,22:170,23:$VQ,24:$VR,25:20,27:$V0,34:173,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,71:10,72:11,75:174,76:$VS,91:$VT,92:$VU,93:$VV,96:$VW,104:$VX,105:$VY},{27:$Vi,39:$Vj,42:51,47:$Vk,48:$Vl,49:234,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,62:$Vt,65:$Vu},{46:[1,235]},o($VD,[2,53],{58:[1,236]}),o($VD,[2,55]),o($VD,[2,42]),o($VD,[2,43]),o($VD,[2,44]),o($VD,[2,45]),{45:[1,237]},{7:[1,238],61:$Vy,62:$Vz,63:$VA,64:$VB,66:$VC},{59:[1,239],61:$Vy,62:$Vz,63:$VA,64:$VB,66:$VC},{9:162,12:163,13:240,14:161,15:164,16:165,17:166,18:167,19:168,20:$VP,22:170,23:$VQ,24:$VR,25:20,27:$V0,34:173,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,71:10,72:11,75:174,76:$VS,91:$VT,92:$VU,93:$VV,96:$VW,104:$VX,105:$VY},o($V$,[2,11]),{7:[1,241]},{20:$VM,88:$VI,89:$VJ},o($V$,[2,22]),o($V$,[2,23]),o($Vg,$Vb,{58:$Vh}),o($V$,[2,97],{80:242,79:[1,243]}),o($V$,[2,98]),{76:[1,244],77:$V01},{27:$Vi,39:$Vj,42:51,47:$Vk,48:$Vl,49:72,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,62:$Vt,65:$Vu,70:246,81:71,90:$Vv},{9:162,12:163,13:247,14:161,15:164,16:165,17:166,18:167,19:168,20:$VP,22:170,23:$VQ,24:$VR,25:20,27:$V0,34:173,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,71:10,72:11,75:174,76:$VS,91:$VT,92:$VU,93:$VV,96:$VW,104:$VX,105:$VY},{9:248,25:20,27:[1,249],34:173,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,71:10,72:11},{27:$V11,39:$Vj,42:51,45:$V21,47:$Vk,48:$Vl,49:72,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,62:$Vt,65:$Vu,70:252,81:71,90:$Vv,100:251,101:$V31,102:250},{27:$Vi,39:$Vj,42:51,47:$Vk,48:$Vl,49:256,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,62:$Vt,65:$Vu},{7:[1,257],26:$Vw},o($V$,[2,134]),{27:$Vi,39:$Vj,42:51,47:$Vk,48:$Vl,49:48,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,60:258,62:$Vt,65:$Vu},{27:$Vi,39:$Vj,42:51,47:$Vk,48:$Vl,49:72,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,62:$Vt,65:$Vu,70:259,81:71,90:$Vv},o($V9,[2,72]),{7:[1,260],61:$Vy,62:$Vz,63:$VA,64:$VB,66:$VC},{8:[1,261],9:162,12:163,14:205,15:164,16:165,17:166,18:167,19:168,20:$VP,22:170,23:$VQ,24:$VR,25:20,27:$V0,34:173,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,71:10,72:11,75:174,76:$VS,91:$VT,92:$VU,93:$VV,96:$VW,104:$VX,105:$VY},o($VZ,[2,68]),o($V8,[2,120]),{58:[1,262]},{26:$Vw,59:[1,263]},{74:[1,264]},{58:[1,266],73:[1,265]},{8:[1,267],9:162,12:163,14:205,15:164,16:165,17:166,18:167,19:168,20:$VP,22:170,23:$VQ,24:$VR,25:20,27:$V0,34:173,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,71:10,72:11,75:174,76:$VS,91:$VT,92:$VU,93:$VV,96:$VW,104:$VX,105:$VY},o($V8,[2,122]),{46:[1,268],61:$Vy,62:$Vz,63:$VA,64:$VB,66:$VC},o($VD,[2,41]),{27:$Vi,39:$Vj,42:51,47:$Vk,48:$Vl,49:269,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,62:$Vt,65:$Vu},{27:$Vi,39:$Vj,42:51,47:$Vk,48:$Vl,49:270,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,62:$Vt,65:$Vu},o($V9,[2,89]),{69:[1,271]},{7:[2,100],9:162,12:163,14:205,15:164,16:165,17:166,18:167,19:168,20:$VP,22:170,23:$VQ,24:$VR,25:20,27:$V0,34:173,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,71:10,72:11,75:174,76:$VS,91:$VT,92:$VU,93:$VV,96:$VW,104:$VX,105:$VY},o($V$,[2,20]),o($V$,[2,96]),{76:[1,272],77:$V01},{45:[1,273]},{9:162,12:163,13:274,14:161,15:164,16:165,17:166,18:167,19:168,20:$VP,22:170,23:$VQ,24:$VR,25:20,27:$V0,34:173,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,71:10,72:11,75:174,76:$VS,91:$VT,92:$VU,93:$VV,96:$VW,104:$VX,105:$VY},{46:[1,275],88:$VI,89:$VJ},{8:[1,276],9:162,12:163,14:205,15:164,16:165,17:166,18:167,19:168,20:$VP,22:170,23:$VQ,24:$VR,25:20,27:$V0,34:173,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,71:10,72:11,75:174,76:$VS,91:$VT,92:$VU,93:$VV,96:$VW,104:$VX,105:$VY},{27:$Vi,39:$Vj,42:51,47:$Vk,48:$Vl,49:72,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,62:$Vt,65:$Vu,70:277,81:71,90:$Vv},o($Va,$Vb,{58:$Vd}),{7:[1,278],103:[1,279]},o($V41,[2,131]),o($V41,[2,126],{88:$VI,89:$VJ}),{27:$Vi,39:$Vj,42:51,47:$Vk,48:$Vl,49:72,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,62:$Vt,65:$Vu,70:280,81:71,90:$Vv},o([7,61,62,63,64,66,82,83,84,85,86,87,88,89,103],$VE,{43:$VF,45:[1,281],58:$VG}),o($V41,[2,129]),{46:[1,282],61:$Vy,62:$Vz,63:$VA,64:$VB,66:$VC},o($V$,[2,133]),{26:$Vw,46:[1,283]},{46:[1,284],88:$VI,89:$VJ},o($V9,[2,74]),o($V8,[2,119]),{27:$Vi,39:$Vj,42:51,47:$Vk,48:$Vl,49:285,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,62:$Vt,65:$Vu},{7:[1,286]},{45:[1,287]},{34:288,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5},{58:[1,290],67:289},o($V8,[2,121]),o($VD,[2,61]),{59:[1,291],61:$Vy,62:$Vz,63:$VA,64:$VB,66:$VC},{46:[1,292],61:$Vy,62:$Vz,63:$VA,64:$VB,66:$VC},{27:$Vi,39:$Vj,42:51,47:$Vk,48:$Vl,49:293,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,62:$Vt,65:$Vu},{45:[1,294]},{27:$Vi,39:$Vj,42:51,47:$Vk,48:$Vl,49:72,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,62:$Vt,65:$Vu,70:295,81:71,90:$Vv},{8:[1,296],9:162,12:163,14:205,15:164,16:165,17:166,18:167,19:168,20:$VP,22:170,23:$VQ,24:$VR,25:20,27:$V0,34:173,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,71:10,72:11,75:174,76:$VS,91:$VT,92:$VU,93:$VV,96:$VW,104:$VX,105:$VY},{77:[1,297]},{91:[1,298]},{7:[1,299],88:$VI,89:$VJ},o($V$,[2,132]),{27:$V11,39:$Vj,42:51,45:$V21,47:$Vk,48:$Vl,49:72,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,62:$Vt,65:$Vu,70:252,81:71,90:$Vv,100:300,101:$V31},{46:[1,301],88:$VI,89:$VJ},{27:$Vi,39:$Vj,42:51,46:[1,302],47:$Vk,48:$Vl,49:48,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,60:144,62:$Vt,65:$Vu},{77:[1,303]},{7:[1,304]},{77:[1,305]},{59:[1,306],61:$Vy,62:$Vz,63:$VA,64:$VB,66:$VC},o($V9,[2,87]),{46:[1,307]},{58:[1,308]},{26:[1,310],59:[1,309]},{27:$Vi,39:$Vj,42:51,47:$Vk,48:$Vl,49:48,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,60:311,62:$Vt,65:$Vu},o($VD,[2,54]),o($VD,[2,46]),{7:[1,312],61:$Vy,62:$Vz,63:$VA,64:$VB,66:$VC},{27:$Vi,39:$Vj,42:51,47:$Vk,48:$Vl,49:72,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,62:$Vt,65:$Vu,70:313,81:71,90:$Vv},{46:[1,314],88:$VI,89:$VJ},o($V$,[2,95]),{9:162,12:163,13:315,14:161,15:164,16:165,17:166,18:167,19:168,20:$VP,22:170,23:$VQ,24:$VR,25:20,27:$V0,34:173,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,71:10,72:11,75:174,76:$VS,91:$VT,92:$VU,93:$VV,96:$VW,104:$VX,105:$VY},{45:[1,316]},{25:20,27:[1,318],71:317},o($V41,[2,130]),o($V41,[2,127]),o($V41,[2,128]),{94:319,95:[1,320]},o($V$,[2,135]),{9:162,12:163,13:321,14:161,15:164,16:165,17:166,18:167,19:168,20:$VP,22:170,23:$VQ,24:$VR,25:20,27:$V0,34:173,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,71:10,72:11,75:174,76:$VS,91:$VT,92:$VU,93:$VV,96:$VW,104:$VX,105:$VY},{7:[1,322]},{7:[1,323]},{27:$Vi,39:$Vj,42:51,47:$Vk,48:$Vl,49:324,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,62:$Vt,65:$Vu},{7:[1,325]},{58:[1,326]},{26:$Vw,59:[1,327]},o($V9,[2,90]),{46:[1,328],88:$VI,89:$VJ},{77:[1,329]},{8:[1,330],9:162,12:163,14:205,15:164,16:165,17:166,18:167,19:168,20:$VP,22:170,23:$VQ,24:$VR,25:20,27:$V0,34:173,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,71:10,72:11,75:174,76:$VS,91:$VT,92:$VU,93:$VV,96:$VW,104:$VX,105:$VY},{27:$Vi,39:$Vj,42:51,47:$Vk,48:$Vl,49:72,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,62:$Vt,65:$Vu,70:331,81:71,90:$Vv},{46:[1,332]},o($Va,$Vb),{8:[1,334],95:[1,335],97:[1,333]},{27:$Vi,39:$Vj,42:51,47:$Vk,48:$Vl,49:336,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,62:$Vt,65:$Vu},{8:[1,337],9:162,12:163,14:205,15:164,16:165,17:166,18:167,19:168,20:$VP,22:170,23:$VQ,24:$VR,25:20,27:$V0,34:173,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,71:10,72:11,75:174,76:$VS,91:$VT,92:$VU,93:$VV,96:$VW,104:$VX,105:$VY},o($V9,[2,85]),o($V9,[2,91]),{59:[1,338],61:$Vy,62:$Vz,63:$VA,64:$VB,66:$VC},o($V9,[2,88]),{27:$Vi,39:$Vj,42:51,47:$Vk,48:$Vl,49:48,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,60:339,62:$Vt,65:$Vu},o($V51,[2,67]),{77:[1,340]},{9:162,12:163,13:341,14:161,15:164,16:165,17:166,18:167,19:168,20:$VP,22:170,23:$VQ,24:$VR,25:20,27:$V0,34:173,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,71:10,72:11,75:174,76:$VS,91:$VT,92:$VU,93:$VV,96:$VW,104:$VX,105:$VY},o($V$,[2,112]),{46:[1,342],88:$VI,89:$VJ},{77:[1,343]},{40:[1,344]},o($V$,[2,118]),{27:$Vi,39:$Vj,42:51,47:$Vk,48:$Vl,49:345,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,62:$Vt,65:$Vu},{40:[1,346],61:$Vy,62:$Vz,63:$VA,64:$VB,66:$VC},o($V61,[2,92]),{58:[1,347]},{26:$Vw,59:[1,348]},{9:162,12:163,13:349,14:161,15:164,16:165,17:166,18:167,19:168,20:$VP,22:170,23:$VQ,24:$VR,25:20,27:$V0,34:173,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,71:10,72:11,75:174,76:$VS,91:$VT,92:$VU,93:$VV,96:$VW,104:$VX,105:$VY},{8:[1,350],9:162,12:163,14:205,15:164,16:165,17:166,18:167,19:168,20:$VP,22:170,23:$VQ,24:$VR,25:20,27:$V0,34:173,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,71:10,72:11,75:174,76:$VS,91:$VT,92:$VU,93:$VV,96:$VW,104:$VX,105:$VY},{7:[1,351]},{9:162,12:163,13:352,14:161,15:164,16:165,17:166,18:167,19:168,20:$VP,22:170,23:$VQ,24:$VR,25:20,27:$V0,34:173,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,71:10,72:11,75:174,76:$VS,91:$VT,92:$VU,93:$VV,96:$VW,104:$VX,105:$VY},{9:162,12:163,13:353,14:161,15:164,16:165,17:166,18:167,19:168,20:$VP,22:170,23:$VQ,24:$VR,25:20,27:$V0,34:173,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,71:10,72:11,75:174,76:$VS,91:$VT,92:$VU,93:$VV,96:$VW,104:$VX,105:$VY},{40:[1,354],61:$Vy,62:$Vz,63:$VA,64:$VB,66:$VC},{9:162,12:163,13:355,14:161,15:164,16:165,17:166,18:167,19:168,20:$VP,22:170,23:$VQ,24:$VR,25:20,27:$V0,34:173,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,71:10,72:11,75:174,76:$VS,91:$VT,92:$VU,93:$VV,96:$VW,104:$VX,105:$VY},{27:$Vi,39:$Vj,42:51,47:$Vk,48:$Vl,49:356,50:$Vm,51:$Vn,53:$Vo,54:$Vp,55:$Vq,56:$Vr,57:$Vs,62:$Vt,65:$Vu},o($V51,[2,66]),{8:[1,357],9:162,12:163,14:205,15:164,16:165,17:166,18:167,19:168,20:$VP,22:170,23:$VQ,24:$VR,25:20,27:$V0,34:173,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,71:10,72:11,75:174,76:$VS,91:$VT,92:$VU,93:$VV,96:$VW,104:$VX,105:$VY},o($V61,[2,94]),o($V$,[2,113]),{8:[1,358],9:162,12:163,14:205,15:164,16:165,17:166,18:167,19:168,20:$VP,22:170,23:$VQ,24:$VR,25:20,27:$V0,34:173,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,71:10,72:11,75:174,76:$VS,91:$VT,92:$VU,93:$VV,96:$VW,104:$VX,105:$VY},{8:[1,359],9:162,12:163,14:205,15:164,16:165,17:166,18:167,19:168,20:$VP,22:170,23:$VQ,24:$VR,25:20,27:$V0,34:173,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,71:10,72:11,75:174,76:$VS,91:$VT,92:$VU,93:$VV,96:$VW,104:$VX,105:$VY},{9:162,12:163,13:360,14:161,15:164,16:165,17:166,18:167,19:168,20:$VP,22:170,23:$VQ,24:$VR,25:20,27:$V0,34:173,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,71:10,72:11,75:174,76:$VS,91:$VT,92:$VU,93:$VV,96:$VW,104:$VX,105:$VY},o($V71,[2,116],{71:10,72:11,25:20,9:162,12:163,15:164,16:165,17:166,18:167,19:168,22:170,34:173,75:174,14:205,20:$VP,23:$VQ,24:$VR,27:$V0,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,76:$VS,91:$VT,92:$VU,93:$VV,96:$VW,104:$VX,105:$VY}),{59:[1,361],61:$Vy,62:$Vz,63:$VA,64:$VB,66:$VC},o($V61,[2,93]),o($V$,[2,114]),o($V$,[2,117]),o($V71,[2,115],{71:10,72:11,25:20,9:162,12:163,15:164,16:165,17:166,18:167,19:168,22:170,34:173,75:174,14:205,20:$VP,23:$VQ,24:$VR,27:$V0,35:$V1,36:$V2,37:$V3,38:$V4,39:$V5,76:$VS,91:$VT,92:$VU,93:$VV,96:$VW,104:$VX,105:$VY}),{7:[1,362]},o($V9,[2,86])],
defaultActions: {21:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};


    const {TipoDato} = require("../Interprete/expresion")

    // Expresiones
    const Aritmetica = require("../Interprete/Expresiones/aritmetica")
    const Relacional = require("../Interprete/Expresiones/relacional")
    const Dato = require("../Interprete/Expresiones/dato")
    const Negativo = require("../Interprete/Expresiones/negativo")
    const opLogico = require("../Interprete/Expresiones/opLogicos")
    const Negacion = require("../Interprete/Expresiones/negacion")
    const FuncionCout = require("../Interprete/Expresiones/funcioncout")
    const Variable = require("../Interprete/Expresiones/variable")

    // Instrucciones
    const Cout = require("../Interprete/Instrucciones/cout")
    const If = require("../Interprete/Instrucciones/if")
    const ElseIf = require("../Interprete/Instrucciones/elseif")
    const Else = require("../Interprete/Instrucciones/else")
    const While = require("../Interprete/Instrucciones/while")
    const DoWhile = require("../Interprete/Instrucciones/doWhile")
    const For = require("../Interprete/Instrucciones/for")
    const Break = require("../Interprete/Instrucciones/break")
    const Continue = require("../Interprete/Instrucciones/continue")
    const Declaracion = require("../Interprete/Instrucciones/declaracion")
    const Ternario = require("../Interprete/Instrucciones/ternario")
    const ActualizacionFor = require("../Interprete/Instrucciones/actualizacionFor")
    const ModificarVar = require("../Interprete/Instrucciones/modificarVar")
    const Case = require("../Interprete/Instrucciones/case")
    const Switch = require("../Interprete/Instrucciones/switch")
    const DeclaracionVec = require("../Interprete/Instrucciones/declaracionVector")
    const DeclaracionMatriz = require("../Interprete/Instrucciones/declaracionMatriz")
    const Return = require("../Interprete/Instrucciones/return")

    //Funciones
    const DeclararFuncion = require("../Interprete/Funciones/declararFuncion")
    const LlamarFuncion = require("../Interprete/Funciones/llamarFuncion")
    const Execute = require("../Interprete/Funciones/execute")

    // Operaciones Mayores
    const SentenciaIf = require("../Interprete/OperacionesMayores/sentenciaIf")


    let { agregarSalida } = require('../Interprete/salidas');
    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:return 35;
break;
case 5:return 36;
break;
case 6:return 37;
break;
case 7:return 38;
break;
case 8:return 41;
break;
case 9:return 73;
break;
case 10:return 76;
break;
case 11:return 79;
break;
case 12:return 91;
break;
case 13:return 93;
break;
case 14:return 92;
break;
case 15:return 23;
break;
case 16:return 24;
break;
case 17:return 105;
break;
case 18:return 98;
break;
case 19:return 104;
break;
case 20:return 101;
break;
case 21:return 50;
break;
case 22:return 51;
break;
case 23:return 48;
break;
case 24:return 44;
break;
case 25:return 47;
break;
case 26:return 52;
break;
case 27:return 39;
break;
case 28:return 74;
break;
case 29:return 99;
break;
case 30:return 96;
break;
case 31:return 95;
break;
case 32:return 97;
break;
case 33:return 55; 
break;
case 34:return 57; 
break;
case 35:return 56; 
break;
case 36:return 27; 
break;
case 37:return 53; 
break;
case 38:return 54; 
break;
case 39:return 29;
break;
case 40:return 30;
break;
case 41:return 31;
break;
case 42:return 32;
break;
case 43:return 33;
break;
case 44:return 61;
break;
case 45:return 62;
break;
case 46:return 63;
break;
case 47:return 64;
break;
case 48:return 65;
break;
case 49:return 66;
break;
case 50:return 'ENTRADA';
break;
case 51:return 103;
break;
case 52:return 82;
break;
case 53:return 83;
break;
case 54:return 85;
break;
case 55:return 87;
break;
case 56:return 86;
break;
case 57:return 84;
break;
case 58:return 69;
break;
case 59:return 88;
break;
case 60:return 89;
break;
case 61:return 90;
break;
case 62:return 45;
break;
case 63:return 46;
break;
case 64:return 77;
break;
case 65:return 8;
break;
case 66:return 58;
break;
case 67:return 59;
break;
case 68:return 7;
break;
case 69:return 26;
break;
case 70:return 40;
break;
case 71:return 43;
break;
case 72:return 20;
break;
case 73:return 5;
break;
case 74:agregarSalida('Este es un error l√©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:(\/\*[\s\S]*?\*\/))/i,/^(?:(\/\/.*))/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:bool\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:cout\b)/i,/^(?:endl\b)/i,/^(?:toupper\b)/i,/^(?:tolower\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:std\b)/i,/^(?:c_str\b)/i,/^(?:execute\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:(true|false\b))/i,/^(?:('(([^\n\"\\]|\\.)*)'))/i,/^(?:([\"][^\"\n]+[\"]))/i,/^(?:([a-zA-Z_][a-zA-Z0-9_]*))/i,/^(?:([0-9]+\.[0-9]+\b))/i,/^(?:([0-9]+\b))/i,/^(?:\\n)/i,/^(?:\\)/i,/^(?:\\")/i,/^(?:\\t)/i,/^(?:')/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:pow\b)/i,/^(?:%)/i,/^(?:>>)/i,/^(?:<<)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?:,)/i,/^(?::)/i,/^(?:\.)/i,/^(?:\?)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}