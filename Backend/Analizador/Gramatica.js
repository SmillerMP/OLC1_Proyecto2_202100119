/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,17],$V1=[1,18],$V2=[1,29],$V3=[1,24],$V4=[1,25],$V5=[1,26],$V6=[1,27],$V7=[1,28],$V8=[1,13],$V9=[1,30],$Va=[1,21],$Vb=[1,22],$Vc=[1,23],$Vd=[1,16],$Ve=[1,15],$Vf=[1,19],$Vg=[5,24,25,28,36,37,38,39,40,71,77,93,94,95,100,101,106],$Vh=[5,20,22,23,24,25,28,36,37,38,39,40,41,48,49,51,52,54,55,56,57,58,60,63,71,77,79,92,93,94,95,97,98,99,100,101,106,107],$Vi=[28,47,67],$Vj=[1,47],$Vk=[1,51],$Vl=[20,27,69],$Vm=[2,30],$Vn=[1,53],$Vo=[27,69],$Vp=[1,62],$Vq=[1,72],$Vr=[1,61],$Vs=[1,68],$Vt=[1,69],$Vu=[1,70],$Vv=[1,71],$Vw=[1,73],$Vx=[1,74],$Vy=[1,75],$Vz=[1,76],$VA=[1,77],$VB=[1,65],$VC=[1,66],$VD=[1,60],$VE=[1,63],$VF=[1,81],$VG=[1,85],$VH=[1,83],$VI=[1,98],$VJ=[1,99],$VK=[1,102],$VL=[1,106],$VM=[1,103],$VN=[1,105],$VO=[20,105],$VP=[1,131],$VQ=[1,132],$VR=[1,133],$VS=[1,134],$VT=[1,135],$VU=[1,136],$VV=[2,57],$VW=[1,140],$VX=[20,47,71,84,85,86,87,88,89,90,91,105],$VY=[1,141],$VZ=[1,142],$V_=[1,143],$V$=[1,144],$V01=[1,145],$V11=[20,27,41,47,59,60,61,62,64,68,71,84,85,86,87,88,89,90,91,105],$V21=[1,157],$V31=[1,158],$V41=[20,47,71,90,91],$V51=[20,22,23,24,25,28,36,37,38,39,40,41,48,49,51,52,54,55,56,57,58,60,63,71,77,79,92,93,94,95,97,98,99,101,106,107],$V61=[1,168],$V71=[1,175],$V81=[1,184],$V91=[1,192],$Va1=[20,27,47,68],$Vb1=[27,47],$Vc1=[20,27,41,47,59,60,68,71,84,85,86,87,88,89,90,91,105],$Vd1=[1,260],$Ve1=[1,271],$Vf1=[5,20,22,23,24,25,28,36,37,38,39,40,41,48,49,51,52,54,55,56,57,58,60,63,71,77,79,81,92,93,94,95,97,98,99,100,101,106,107],$Vg1=[79,97,99];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"entornos":4,"EOF":5,"entorno":6,"declaracionVariables":7,"funcionExecute":8,"funciones":9,"comentarios":10,"impresionCout":11,"sentenciaIfCompleta":12,"ciclosWhile":13,"cicloFor":14,"instrucciones":15,"instruccion":16,"llamarFunciones":17,"switchCase":18,"ternario":19,"PTCOMA":20,"sentenciaReturn":21,"PR_BREAK":22,"PR_CONTINUE":23,"COM_MULT":24,"COM_SIMPLE":25,"identificadores":26,"COMA":27,"ID":28,"secuenciasEscape":29,"SALTO_LINEA":30,"BARRA_INVERTIDA":31,"COMILLA_DOBLE":32,"TABULACION":33,"COMILLA_SIMPLE":34,"tiposVar":35,"PR_INT":36,"PR_DOUBLE":37,"PR_BOOL":38,"PR_CHAR":39,"PR_STD":40,"DOSPUNTOS":41,"PR_STRING":42,"valores":43,"PUNTO":44,"PR_LENGTH":45,"PARIZQ":46,"PARDER":47,"PR_TYPEOF":48,"PR_ROUND":49,"valoresPlus":50,"PR_TOUPPER":51,"PR_TOLOWER":52,"PR_TOSTRING":53,"DECIMAL":54,"ENTERO":55,"BOOLEAN":56,"STRING":57,"CHAR":58,"MAS":59,"MENOS":60,"POR":61,"DIVIDIDO":62,"POTENCIA":63,"MODULO":64,"valoresArreglos":65,"arregloDeclaraciones":66,"CORIZQ":67,"CORDER":68,"IGUAL":69,"sentenciaLogica":70,"INTERROGACION":71,"VectoresMatrices":72,"IncrementoDecremento":73,"PR_NEW":74,"PR_C_STR":75,"sentenciaIf":76,"PR_IF":77,"LLAVIZQ":78,"LLAVDER":79,"sentenciaIfElse":80,"PR_ELSE":81,"sentenciaElse":82,"sentenciaRelacional":83,"IGUALES":84,"DIFERENTE":85,"MENOR_QUE":86,"MENOR_IGUAL":87,"MAYOR_QUE":88,"MAYOR_IGUAL":89,"OR":90,"AND":91,"NOT":92,"PR_WHILE":93,"PR_DO":94,"PR_FOR":95,"recursividadCase":96,"PR_CASE":97,"PR_SWITCH":98,"PR_DEFAULT":99,"PR_VOID":100,"PR_EXECUTE":101,"posibilidadesCout":102,"PR_ENDL":103,"funcionCout":104,"SALIDA":105,"PR_COUT":106,"PR_RETURN":107,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",20:"PTCOMA",22:"PR_BREAK",23:"PR_CONTINUE",24:"COM_MULT",25:"COM_SIMPLE",27:"COMA",28:"ID",30:"SALTO_LINEA",31:"BARRA_INVERTIDA",32:"COMILLA_DOBLE",33:"TABULACION",34:"COMILLA_SIMPLE",36:"PR_INT",37:"PR_DOUBLE",38:"PR_BOOL",39:"PR_CHAR",40:"PR_STD",41:"DOSPUNTOS",42:"PR_STRING",44:"PUNTO",45:"PR_LENGTH",46:"PARIZQ",47:"PARDER",48:"PR_TYPEOF",49:"PR_ROUND",51:"PR_TOUPPER",52:"PR_TOLOWER",53:"PR_TOSTRING",54:"DECIMAL",55:"ENTERO",56:"BOOLEAN",57:"STRING",58:"CHAR",59:"MAS",60:"MENOS",61:"POR",62:"DIVIDIDO",63:"POTENCIA",64:"MODULO",67:"CORIZQ",68:"CORDER",69:"IGUAL",71:"INTERROGACION",74:"PR_NEW",75:"PR_C_STR",77:"PR_IF",78:"LLAVIZQ",79:"LLAVDER",81:"PR_ELSE",84:"IGUALES",85:"DIFERENTE",86:"MENOR_QUE",87:"MENOR_IGUAL",88:"MAYOR_QUE",89:"MAYOR_IGUAL",90:"OR",91:"AND",92:"NOT",93:"PR_WHILE",94:"PR_DO",95:"PR_FOR",97:"PR_CASE",98:"PR_SWITCH",99:"PR_DEFAULT",100:"PR_VOID",101:"PR_EXECUTE",103:"PR_ENDL",105:"SALIDA",106:"PR_COUT",107:"PR_RETURN"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[15,2],[15,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,2],[16,1],[16,2],[16,2],[16,1],[10,1],[10,1],[26,3],[26,1],[29,2],[29,2],[29,2],[29,2],[29,2],[29,1],[29,1],[29,1],[29,1],[29,1],[35,1],[35,1],[35,1],[35,1],[35,4],[43,5],[43,4],[43,4],[43,4],[43,4],[43,7],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[50,3],[50,3],[50,2],[50,3],[50,3],[50,6],[50,3],[50,1],[65,3],[65,1],[66,4],[66,6],[66,4],[66,2],[7,3],[7,5],[7,8],[7,7],[7,5],[7,8],[7,5],[7,8],[7,1],[73,3],[73,3],[72,11],[72,16],[72,9],[72,17],[72,8],[72,11],[72,7],[72,10],[72,11],[76,7],[80,9],[80,8],[82,4],[12,3],[12,2],[12,2],[12,1],[19,5],[83,3],[83,3],[83,3],[83,3],[83,3],[83,3],[83,1],[70,3],[70,3],[70,2],[70,1],[13,7],[13,9],[14,10],[14,13],[96,5],[96,4],[18,10],[18,7],[9,8],[9,7],[9,8],[9,7],[17,5],[17,4],[8,6],[8,5],[102,1],[102,2],[102,3],[102,4],[102,1],[104,3],[104,1],[11,4],[21,3],[21,6],[21,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = $$[$0-1]; return this.$; 
break;
case 2: case 12:
this.$ = $$[$0-1]; this.$.push($$[$0]);
break;
case 3: case 13: case 30: case 67:
this.$ = []; this.$.push($$[$0]);
break;
case 4: case 8: case 9: case 10: case 11: case 20:
this.$ = $$[$0];
break;
case 24:
this.$ = new Break($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 29:
this.$ = $$[$0-2]; this.$.push($$[$0]);
break;
case 41:
this.$ = "ENTERO";
break;
case 42:
this.$ = "DECIMAL";
break;
case 43:
this.$ = "BOOL";
break;
case 44:
this.$ = "CHAR";
break;
case 45:
this.$ = "STRING";
break;
case 48: case 49: case 50:
this.$ = new FuncionCout($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 51:
this.$ = new FuncionCout($$[$0-3], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 52:
this.$ = new Dato($$[$0], TipoDato.DECIMAL, _$[$0].first_line, _$[$0].first_column); 
break;
case 53:
this.$ = new Dato($$[$0], TipoDato.ENTERO, _$[$0].first_line, _$[$0].first_column); 
break;
case 54:
this.$ = new Dato($$[$0], TipoDato.BOOL, _$[$0].first_line, _$[$0].first_column); 
break;
case 55:
this.$ = new Dato($$[$0], TipoDato.STRING, _$[$0].first_line, _$[$0].first_column); 
break;
case 56:
this.$ = new Dato($$[$0], TipoDato.CHAR, _$[$0].first_line, _$[$0].first_column); 
break;
case 57:
this.$ = new Variable($$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 58: case 59: case 61: case 62: case 64:
 this.$ = new Aritmetica($$[$0-2], $$[$0], $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 60:
 this.$ = new Negativo($$[$0], _$[$0-1].first_line, _$[$0-1].first_column);           
break;
case 63:
 this.$ = new Aritmetica($$[$0-3], $$[$0-1], $$[$0-4], _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 65: case 107: case 111: case 133: case 134:
 this.$ = $$[$0]; 
break;
case 66:
this.$ = $$[$0-2]; this.$.push($$[$0-1]);
break;
case 72:
this.$ = new Declaracion($$[$0-2], $$[$0-1], null, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 73:
this.$ = new Declaracion($$[$0-4], $$[$0-3], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 81: case 82:
this.$ = new ActualizacionFor($$[$0-2], $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 92:
this.$ = new If($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column)
break;
case 93:
this.$ = $$[$0-8]; this.$.push(new ElseIf($$[$0-4], $$[$0-1], _$[$0-8].first_line, _$[$0-8].first_column))
break;
case 94:
this.$ = []; this.$.push(new ElseIf($$[$0-4], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column))
break;
case 95:
this.$ = new Else($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 96:
this.$ = new SentenciaIf($$[$0-2], $$[$0-1], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 97:
this.$ = new SentenciaIf($$[$0-1], $$[$0], null, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 98:
this.$ = new SentenciaIf($$[$0-1], null, $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 99:
this.$ = new SentenciaIf($$[$0], null, null, _$[$0].first_line, _$[$0].first_column);
break;
case 100:
this.$ = new Ternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 101: case 102: case 103: case 104: case 105: case 106:
 this.$ = new Relacional($$[$0-2], $$[$0], $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 108:
 this.$ = new opLogicos($$[$0-2], $$[$0], $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 109:
 this.$ = new opLogico($$[$0-2], $$[$0], $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 110:
 this.$ = new Negacion($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 112:
 this.$ = new While($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 113:
 this.$ = new DoWhile($$[$0-2], $$[$0-6], _$[$0-8].first_line, _$[$0-8].first_column); 
break;
case 114:
 this.$ = new For($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1], _$[$0-9].first_line, _$[$0-9].first_column);
break;
case 128:
 this.$ = $$[$0];
break;
case 129:
 this.$ = Negacion($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 135:
 this.$ = new Cout($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,24:$V0,25:$V1,28:$V2,35:12,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7,71:$V8,72:14,76:20,77:$V9,93:$Va,94:$Vb,95:$Vc,100:$Vd,101:$Ve,106:$Vf},{1:[3]},{5:[1,31],6:32,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,24:$V0,25:$V1,28:$V2,35:12,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7,71:$V8,72:14,76:20,77:$V9,93:$Va,94:$Vb,95:$Vc,100:$Vd,101:$Ve,106:$Vf},o($Vg,[2,3]),o($Vg,[2,4]),o($Vg,[2,5]),o($Vg,[2,6]),o($Vg,[2,7]),o($Vg,[2,8]),o($Vg,[2,9]),o($Vg,[2,10]),o($Vg,[2,11]),{26:33,28:[1,34]},{26:35,28:[1,36]},o($Vh,[2,80]),{28:[1,37]},{28:[1,38]},o($Vh,[2,27]),o($Vh,[2,28]),{105:[1,39]},o($Vh,[2,99],{80:40,82:41,81:[1,42]}),{46:[1,43]},{78:[1,44]},{46:[1,45]},o($Vi,[2,41]),o($Vi,[2,42]),o($Vi,[2,43]),o($Vi,[2,44]),{41:[1,46]},{67:$Vj},{46:[1,48]},{1:[2,1]},o($Vg,[2,2]),{20:[1,49],27:$Vk,69:[1,50]},o($Vl,$Vm,{46:[1,52],67:$Vn}),{27:$Vk,69:[1,54]},o($Vo,$Vm),{46:[1,55]},{46:[1,56]},{28:$Vp,40:$Vq,43:67,46:$Vr,48:$Vs,49:$Vt,50:64,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,83:59,92:$VD,102:58,103:$VE,104:57},o($Vh,[2,97],{82:78,81:[1,79]}),o($Vh,[2,98]),{77:[1,80],78:$VF},{28:$VG,40:$Vq,43:67,48:$Vs,49:$Vt,50:64,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,70:82,83:84,92:$VH},{7:88,8:93,10:100,11:94,12:90,13:91,14:92,15:86,16:87,17:89,18:95,19:96,21:97,22:$VI,23:$VJ,24:$V0,25:$V1,28:$VK,35:101,36:$V3,37:$V4,38:$V5,39:$V6,40:$VL,43:67,48:$Vs,49:$Vt,50:64,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,70:104,71:$V8,72:14,76:20,77:$V9,83:84,92:$VH,93:$Va,94:$Vb,95:$Vc,98:$VM,101:$Ve,106:$Vf,107:$VN},{7:107,26:108,28:[1,109],35:101,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7,71:$V8,72:14},{41:[1,110]},{55:[1,111]},{28:$VG,40:$Vq,43:67,48:$Vs,49:$Vt,50:64,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,70:112,83:84,92:$VH},o($Vh,[2,72]),{19:115,28:[1,114],40:$Vq,43:67,46:[1,116],48:$Vs,49:$Vt,50:64,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,70:113,83:84,92:$VH},{28:[1,117]},{35:120,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7,47:[1,119],66:118},{68:[1,121]},{28:[1,123],40:$Vq,43:67,48:$Vs,49:$Vt,50:64,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,70:122,83:84,92:$VH},{28:$VG,40:$Vq,43:67,47:[1,125],48:$Vs,49:$Vt,50:126,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,65:124},{35:120,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7,47:[1,128],66:127},{20:[1,129],105:[1,130]},o($VO,[2,134]),o($VO,[2,128],{84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU}),{56:[1,137]},{28:$VG,40:$Vq,43:67,48:$Vs,49:$Vt,50:64,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,70:138,83:84,92:$VH},o([20,59,60,61,62,64,84,85,86,87,88,89,105],$VV,{44:$VW,46:[1,139]}),o($VO,[2,132]),o($VX,[2,107],{59:$VY,60:$VZ,61:$V_,62:$V$,64:$V01}),{28:$VG,40:$Vq,43:67,48:$Vs,49:$Vt,50:146,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC},{46:[1,147]},o($V11,[2,65]),{46:[1,148]},{46:[1,149]},{46:[1,150]},{46:[1,151]},{41:[1,152]},o($V11,[2,52]),o($V11,[2,53]),o($V11,[2,54]),o($V11,[2,55]),o($V11,[2,56]),o($Vh,[2,96]),{77:[1,153],78:$VF},{46:[1,154]},{7:88,8:93,10:100,11:94,12:90,13:91,14:92,15:155,16:87,17:89,18:95,19:96,21:97,22:$VI,23:$VJ,24:$V0,25:$V1,28:$VK,35:101,36:$V3,37:$V4,38:$V5,39:$V6,40:$VL,43:67,48:$Vs,49:$Vt,50:64,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,70:104,71:$V8,72:14,76:20,77:$V9,83:84,92:$VH,93:$Va,94:$Vb,95:$Vc,98:$VM,101:$Ve,106:$Vf,107:$VN},{47:[1,156],90:$V21,91:$V31},{28:$VG,40:$Vq,43:67,48:$Vs,49:$Vt,50:64,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,70:159,83:84,92:$VH},o($V41,[2,111],{84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU}),o($V11,$VV,{44:$VW}),{7:88,8:93,10:100,11:94,12:90,13:91,14:92,16:161,17:89,18:95,19:96,21:97,22:$VI,23:$VJ,24:$V0,25:$V1,28:$VK,35:101,36:$V3,37:$V4,38:$V5,39:$V6,40:$VL,43:67,48:$Vs,49:$Vt,50:64,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,70:104,71:$V8,72:14,76:20,77:$V9,79:[1,160],83:84,92:$VH,93:$Va,94:$Vb,95:$Vc,98:$VM,101:$Ve,106:$Vf,107:$VN},o($V51,[2,13]),o($V51,[2,14]),o($V51,[2,15]),o($V51,[2,16]),o($V51,[2,17]),o($V51,[2,18]),o($V51,[2,19]),o($V51,[2,20]),o($V51,[2,21]),{20:[1,162]},o($V51,[2,23]),{20:[1,163]},{20:[1,164]},o($V51,[2,26]),{26:33,28:[1,165]},o([59,60,61,62,64,71,84,85,86,87,88,89,90,91],$VV,{44:$VW,46:[1,166],67:$Vj}),{46:[1,167]},{71:$V61,90:$V21,91:$V31},{20:[1,171],28:[1,170],40:$Vq,43:67,48:$Vs,49:$Vt,50:126,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,65:169},{41:[1,172]},{28:$VG,40:$Vq,43:67,48:$Vs,49:$Vt,50:64,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,70:173,83:84,92:$VH},{27:$Vk,69:[1,174]},o($Vo,$Vm,{67:$Vj}),{42:$V71},{68:[1,176]},{47:[1,177],90:$V21,91:$V31},{20:[1,178],71:$V61,90:$V21,91:$V31},o([20,59,60,61,62,64,71,84,85,86,87,88,89,90,91],$VV,{44:$VW,46:[1,179],67:[1,180]}),{20:[1,181]},{35:182,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7},o($Vl,[2,29]),{27:$V81,47:[1,183]},{78:[1,185]},{28:[1,186]},{67:[1,188],69:[1,187]},{20:[1,189],90:$V21,91:$V31},o([20,59,60,61,62,64,84,85,86,87,88,89,90,91],$VV,{44:$VW,67:[1,190]}),{27:$V91,47:[1,191]},{20:[1,193]},o($Va1,[2,67],{59:$VY,60:$VZ,61:$V_,62:$V$,64:$V01}),{27:$V81,47:[1,194]},{78:[1,195]},o($Vh,[2,135]),{28:$Vp,40:$Vq,43:67,46:$Vr,48:$Vs,49:$Vt,50:64,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,83:59,92:$VD,102:196,103:$VE},{28:$VG,40:$Vq,43:67,48:$Vs,49:$Vt,50:64,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,83:197},{28:$VG,40:$Vq,43:67,48:$Vs,49:$Vt,50:64,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,83:198},{28:$VG,40:$Vq,43:67,48:$Vs,49:$Vt,50:64,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,83:199},{28:$VG,40:$Vq,43:67,48:$Vs,49:$Vt,50:64,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,83:200},{28:$VG,40:$Vq,43:67,48:$Vs,49:$Vt,50:64,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,83:201},{28:$VG,40:$Vq,43:67,48:$Vs,49:$Vt,50:64,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,83:202},o($VO,[2,129]),{47:[1,203],90:$V21,91:$V31},{28:$VG,40:$Vq,43:67,48:$Vs,49:$Vt,50:126,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,65:204},{45:[1,205]},{28:$VG,40:$Vq,43:67,48:$Vs,49:$Vt,50:206,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC},{28:$VG,40:$Vq,43:67,48:$Vs,49:$Vt,50:207,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC},{28:$VG,40:$Vq,43:67,48:$Vs,49:$Vt,50:208,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC},{28:$VG,40:$Vq,43:67,48:$Vs,49:$Vt,50:209,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC},{28:$VG,40:$Vq,43:67,48:$Vs,49:$Vt,50:210,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC},o($V11,[2,60]),{28:$VG,40:$Vq,43:67,48:$Vs,49:$Vt,50:211,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC},{28:[1,212]},{28:$VG,40:$Vq,43:67,48:$Vs,49:$Vt,50:213,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC},{28:$VG,40:$Vq,43:214,48:$Vs,49:$Vt,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA},{28:$VG,40:$Vq,43:215,48:$Vs,49:$Vt,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA},{41:[1,216]},{46:[1,217]},{28:$VG,40:$Vq,43:67,48:$Vs,49:$Vt,50:64,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,70:218,83:84,92:$VH},{7:88,8:93,10:100,11:94,12:90,13:91,14:92,16:161,17:89,18:95,19:96,21:97,22:$VI,23:$VJ,24:$V0,25:$V1,28:$VK,35:101,36:$V3,37:$V4,38:$V5,39:$V6,40:$VL,43:67,48:$Vs,49:$Vt,50:64,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,70:104,71:$V8,72:14,76:20,77:$V9,79:[1,219],83:84,92:$VH,93:$Va,94:$Vb,95:$Vc,98:$VM,101:$Ve,106:$Vf,107:$VN},{78:[1,220]},{28:$VG,40:$Vq,43:67,48:$Vs,49:$Vt,50:64,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,70:221,83:84,92:$VH},{28:$VG,40:$Vq,43:67,48:$Vs,49:$Vt,50:64,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,70:222,83:84,92:$VH},o($V41,[2,110]),{93:[1,223]},o($V51,[2,12]),o($V51,[2,22]),o($V51,[2,24]),o($V51,[2,25]),o($Vl,$Vm,{67:$Vn}),{28:$VG,40:$Vq,43:67,47:[1,225],48:$Vs,49:$Vt,50:126,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,65:224},{28:$VG,40:$Vq,43:67,48:$Vs,49:$Vt,50:226,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC},{7:88,8:93,10:100,11:94,12:90,13:91,14:92,15:227,16:87,17:89,18:95,19:96,21:97,22:$VI,23:$VJ,24:$V0,25:$V1,28:$VK,35:101,36:$V3,37:$V4,38:$V5,39:$V6,40:$VL,43:67,48:$Vs,49:$Vt,50:64,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,70:104,71:$V8,72:14,76:20,77:$V9,83:84,92:$VH,93:$Va,94:$Vb,95:$Vc,98:$VM,101:$Ve,106:$Vf,107:$VN},{20:[1,228],27:$V91},o([20,27,59,60,61,62,64],$VV,{44:$VW,46:[1,229]}),o($V51,[2,138]),{41:[1,230]},{20:[1,231],90:$V21,91:$V31},{28:$VG,40:$Vq,43:67,48:$Vs,49:$Vt,50:232,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC},o($Vi,[2,45]),{67:[1,234],69:[1,233]},{78:[1,235]},o($Vh,[2,73]),{28:$VG,40:$Vq,43:67,47:[1,237],48:$Vs,49:$Vt,50:126,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,65:236},{55:[1,238]},o($Vh,[2,76]),{47:[1,239]},{78:[1,240]},{35:241,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7},{7:88,8:93,10:100,11:94,12:90,13:91,14:92,15:242,16:87,17:89,18:95,19:96,21:97,22:$VI,23:$VJ,24:$V0,25:$V1,28:$VK,35:101,36:$V3,37:$V4,38:$V5,39:$V6,40:$VL,43:67,48:$Vs,49:$Vt,50:64,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,70:104,71:$V8,72:14,76:20,77:$V9,83:84,92:$VH,93:$Va,94:$Vb,95:$Vc,98:$VM,101:$Ve,106:$Vf,107:$VN},o($Vb1,[2,71],{67:[1,243]}),{28:[1,246],67:[1,245],74:[1,244]},{68:[1,247]},o($Vh,[2,78]),{28:$VG,40:$Vq,43:67,48:$Vs,49:$Vt,50:126,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,65:248},{20:[1,249]},{28:$VG,40:$Vq,43:67,48:$Vs,49:$Vt,50:250,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC},o($Vh,[2,127]),{78:[1,251]},{7:88,8:93,10:100,11:94,12:90,13:91,14:92,15:252,16:87,17:89,18:95,19:96,21:97,22:$VI,23:$VJ,24:$V0,25:$V1,28:$VK,35:101,36:$V3,37:$V4,38:$V5,39:$V6,40:$VL,43:67,48:$Vs,49:$Vt,50:64,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,70:104,71:$V8,72:14,76:20,77:$V9,83:84,92:$VH,93:$Va,94:$Vb,95:$Vc,98:$VM,101:$Ve,106:$Vf,107:$VN},o($VO,[2,133]),o($VX,[2,101]),o($VX,[2,102]),o($VX,[2,103]),o($VX,[2,104]),o($VX,[2,105]),o($VX,[2,106]),o($VO,[2,130]),{27:$V91,47:[1,253]},{46:[1,254]},o($Vc1,[2,58],{61:$V_,62:$V$,64:$V01}),o($Vc1,[2,59],{61:$V_,62:$V$,64:$V01}),o($V11,[2,61]),o($V11,[2,62]),o($V11,[2,64]),{27:[1,255],59:$VY,60:$VZ,61:$V_,62:$V$,64:$V01},{47:[1,256]},{47:[1,257],59:$VY,60:$VZ,61:$V_,62:$V$,64:$V01},{47:[1,258]},{47:[1,259]},{53:$Vd1},{28:$VG,40:$Vq,43:67,48:$Vs,49:$Vt,50:64,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,70:261,83:84,92:$VH},{47:[1,262],90:$V21,91:$V31},o($Vh,[2,95]),{7:88,8:93,10:100,11:94,12:90,13:91,14:92,15:263,16:87,17:89,18:95,19:96,21:97,22:$VI,23:$VJ,24:$V0,25:$V1,28:$VK,35:101,36:$V3,37:$V4,38:$V5,39:$V6,40:$VL,43:67,48:$Vs,49:$Vt,50:64,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,70:104,71:$V8,72:14,76:20,77:$V9,83:84,92:$VH,93:$Va,94:$Vb,95:$Vc,98:$VM,101:$Ve,106:$Vf,107:$VN},o([20,47,71,90],[2,108],{91:$V31}),o($V41,[2,109]),{46:[1,264]},{27:$V91,47:[1,265]},{20:[1,266]},{47:[1,267],59:$VY,60:$VZ,61:$V_,62:$V$,64:$V01},{7:88,8:93,10:100,11:94,12:90,13:91,14:92,16:161,17:89,18:95,19:96,21:97,22:$VI,23:$VJ,24:$V0,25:$V1,28:$VK,35:101,36:$V3,37:$V4,38:$V5,39:$V6,40:$VL,41:[1,268],43:67,48:$Vs,49:$Vt,50:64,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,70:104,71:$V8,72:14,76:20,77:$V9,83:84,92:$VH,93:$Va,94:$Vb,95:$Vc,98:$VM,101:$Ve,106:$Vf,107:$VN},o($V51,[2,136]),{28:$VG,40:$Vq,43:67,48:$Vs,49:$Vt,50:126,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,65:269},{42:$V71,53:$Vd1},{28:$Ve1,73:270},{20:[1,272],59:$VY,60:$VZ,61:$V_,62:$V$,64:$V01},{28:$VG,40:$Vq,43:67,48:$Vs,49:$Vt,50:273,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC},{55:[1,274]},{7:88,8:93,10:100,11:94,12:90,13:91,14:92,15:275,16:87,17:89,18:95,19:96,21:97,22:$VI,23:$VJ,24:$V0,25:$V1,28:$VK,35:101,36:$V3,37:$V4,38:$V5,39:$V6,40:$VL,43:67,48:$Vs,49:$Vt,50:64,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,70:104,71:$V8,72:14,76:20,77:$V9,83:84,92:$VH,93:$Va,94:$Vb,95:$Vc,98:$VM,101:$Ve,106:$Vf,107:$VN},{27:$V91,47:[1,276]},{20:[1,277]},{68:[1,278]},{28:$VG,40:$Vq,43:67,48:$Vs,49:$Vt,50:279,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC},{7:88,8:93,10:100,11:94,12:90,13:91,14:92,15:280,16:87,17:89,18:95,19:96,21:97,22:$VI,23:$VJ,24:$V0,25:$V1,28:$VK,35:101,36:$V3,37:$V4,38:$V5,39:$V6,40:$VL,43:67,48:$Vs,49:$Vt,50:64,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,70:104,71:$V8,72:14,76:20,77:$V9,83:84,92:$VH,93:$Va,94:$Vb,95:$Vc,98:$VM,101:$Ve,106:$Vf,107:$VN},{28:[1,281]},{7:88,8:93,10:100,11:94,12:90,13:91,14:92,16:161,17:89,18:95,19:96,21:97,22:$VI,23:$VJ,24:$V0,25:$V1,28:$VK,35:101,36:$V3,37:$V4,38:$V5,39:$V6,40:$VL,43:67,48:$Vs,49:$Vt,50:64,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,70:104,71:$V8,72:14,76:20,77:$V9,79:[1,282],83:84,92:$VH,93:$Va,94:$Vb,95:$Vc,98:$VM,101:$Ve,106:$Vf,107:$VN},{68:[1,283]},{35:284,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7},{28:$VG,40:$Vq,43:67,48:$Vs,49:$Vt,50:126,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,65:285},{44:[1,286]},{69:[1,287]},{27:$V91,68:[1,288]},o($Vh,[2,126]),o($Va1,[2,66],{59:$VY,60:$VZ,61:$V_,62:$V$,64:$V01}),{7:88,8:93,10:100,11:94,12:90,13:91,14:92,15:289,16:87,17:89,18:95,19:96,21:97,22:$VI,23:$VJ,24:$V0,25:$V1,28:$VK,35:101,36:$V3,37:$V4,38:$V5,39:$V6,40:$VL,43:67,48:$Vs,49:$Vt,50:64,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,70:104,71:$V8,72:14,76:20,77:$V9,83:84,92:$VH,93:$Va,94:$Vb,95:$Vc,98:$VM,101:$Ve,106:$Vf,107:$VN},{7:88,8:93,10:100,11:94,12:90,13:91,14:92,16:161,17:89,18:95,19:96,21:97,22:$VI,23:$VJ,24:$V0,25:$V1,28:$VK,35:101,36:$V3,37:$V4,38:$V5,39:$V6,40:$VL,43:67,48:$Vs,49:$Vt,50:64,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,70:104,71:$V8,72:14,76:20,77:$V9,79:[1,290],83:84,92:$VH,93:$Va,94:$Vb,95:$Vc,98:$VM,101:$Ve,106:$Vf,107:$VN},o($VO,[2,131]),{47:[1,291]},{28:$VG,40:$Vq,43:67,48:$Vs,49:$Vt,50:292,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC},o($V11,[2,47]),o($V11,[2,48]),o($V11,[2,49]),o($V11,[2,50]),{46:[1,293]},{47:[1,294],90:$V21,91:$V31},{78:[1,295]},{7:88,8:93,10:100,11:94,12:90,13:91,14:92,16:161,17:89,18:95,19:96,21:97,22:$VI,23:$VJ,24:$V0,25:$V1,28:$VK,35:101,36:$V3,37:$V4,38:$V5,39:$V6,40:$VL,43:67,48:$Vs,49:$Vt,50:64,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,70:104,71:$V8,72:14,76:20,77:$V9,79:[1,296],83:84,92:$VH,93:$Va,94:$Vb,95:$Vc,98:$VM,101:$Ve,106:$Vf,107:$VN},{28:$VG,40:$Vq,43:67,48:$Vs,49:$Vt,50:64,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,70:297,83:84,92:$VH},{20:[1,298]},o($V51,[2,125]),{78:[1,299]},{7:88,8:93,10:100,11:94,12:90,13:91,14:92,15:300,16:87,17:89,18:95,19:96,21:97,22:$VI,23:$VJ,24:$V0,25:$V1,28:$VK,35:101,36:$V3,37:$V4,38:$V5,39:$V6,40:$VL,43:67,48:$Vs,49:$Vt,50:64,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,70:104,71:$V8,72:14,76:20,77:$V9,83:84,92:$VH,93:$Va,94:$Vb,95:$Vc,98:$VM,101:$Ve,106:$Vf,107:$VN},{27:$V91,47:[1,301]},{47:[1,302]},{59:[1,303],60:[1,304]},{28:$VG,40:$Vq,43:67,48:$Vs,49:$Vt,50:64,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,70:305,83:84,92:$VH},{20:[1,306],59:$VY,60:$VZ,61:$V_,62:$V$,64:$V01},{68:[1,307]},{7:88,8:93,10:100,11:94,12:90,13:91,14:92,16:161,17:89,18:95,19:96,21:97,22:$VI,23:$VJ,24:$V0,25:$V1,28:$VK,35:101,36:$V3,37:$V4,38:$V5,39:$V6,40:$VL,43:67,48:$Vs,49:$Vt,50:64,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,70:104,71:$V8,72:14,76:20,77:$V9,79:[1,308],83:84,92:$VH,93:$Va,94:$Vb,95:$Vc,98:$VM,101:$Ve,106:$Vf,107:$VN},{20:[1,309]},o($Vh,[2,75]),{20:[1,310],67:[1,311]},{20:[1,312],59:$VY,60:$VZ,61:$V_,62:$V$,64:$V01},{7:88,8:93,10:100,11:94,12:90,13:91,14:92,16:161,17:89,18:95,19:96,21:97,22:$VI,23:$VJ,24:$V0,25:$V1,28:$VK,35:101,36:$V3,37:$V4,38:$V5,39:$V6,40:$VL,43:67,48:$Vs,49:$Vt,50:64,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,70:104,71:$V8,72:14,76:20,77:$V9,79:[1,313],83:84,92:$VH,93:$Va,94:$Vb,95:$Vc,98:$VM,101:$Ve,106:$Vf,107:$VN},o($Vb1,[2,68],{67:[1,314]}),o($Vg,[2,121]),o($Vb1,[2,70]),{67:[1,315]},{27:$V91,68:[1,316]},{75:[1,317]},{67:[1,319],74:[1,318]},{20:[1,320]},{7:88,8:93,10:100,11:94,12:90,13:91,14:92,16:161,17:89,18:95,19:96,21:97,22:$VI,23:$VJ,24:$V0,25:$V1,28:$VK,35:101,36:$V3,37:$V4,38:$V5,39:$V6,40:$VL,43:67,48:$Vs,49:$Vt,50:64,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,70:104,71:$V8,72:14,76:20,77:$V9,79:[1,321],83:84,92:$VH,93:$Va,94:$Vb,95:$Vc,98:$VM,101:$Ve,106:$Vf,107:$VN},o($Vg,[2,123]),o($V11,[2,46]),{47:[1,322],59:$VY,60:$VZ,61:$V_,62:$V$,64:$V01},{28:$VG,40:$Vq,43:67,48:$Vs,49:$Vt,50:323,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC},{78:[1,324]},{7:88,8:93,10:100,11:94,12:90,13:91,14:92,15:325,16:87,17:89,18:95,19:96,21:97,22:$VI,23:$VJ,24:$V0,25:$V1,28:$VK,35:101,36:$V3,37:$V4,38:$V5,39:$V6,40:$VL,43:67,48:$Vs,49:$Vt,50:64,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,70:104,71:$V8,72:14,76:20,77:$V9,83:84,92:$VH,93:$Va,94:$Vb,95:$Vc,98:$VM,101:$Ve,106:$Vf,107:$VN},o($Vh,[2,112]),{47:[1,326],90:$V21,91:$V31},o($V51,[2,124]),{96:327,97:[1,328]},{7:88,8:93,10:100,11:94,12:90,13:91,14:92,16:161,17:89,18:95,19:96,20:[2,100],21:97,22:$VI,23:$VJ,24:$V0,25:$V1,28:$VK,35:101,36:$V3,37:$V4,38:$V5,39:$V6,40:$VL,43:67,48:$Vs,49:$Vt,50:64,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,70:104,71:$V8,72:14,76:20,77:$V9,83:84,92:$VH,93:$Va,94:$Vb,95:$Vc,98:$VM,101:$Ve,106:$Vf,107:$VN},{20:[1,329]},{78:[1,330]},{59:[1,331]},{60:[1,332]},{20:[1,333],90:$V21,91:$V31},o($Vh,[2,89]),{69:[1,334]},o($Vf1,[2,92]),o($Vh,[2,74]),o($Vh,[2,87]),{55:[1,335]},o($Vh,[2,77]),o($Vg,[2,120]),{68:[1,336]},{55:[1,337]},{20:[1,338]},{46:[1,339]},{35:340,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7},{67:[1,341]},o($Vh,[2,79]),o($Vg,[2,122]),o($V11,[2,63]),{47:[1,342],59:$VY,60:$VZ,61:$V_,62:$V$,64:$V01},{7:88,8:93,10:100,11:94,12:90,13:91,14:92,15:343,16:87,17:89,18:95,19:96,21:97,22:$VI,23:$VJ,24:$V0,25:$V1,28:$VK,35:101,36:$V3,37:$V4,38:$V5,39:$V6,40:$VL,43:67,48:$Vs,49:$Vt,50:64,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,70:104,71:$V8,72:14,76:20,77:$V9,83:84,92:$VH,93:$Va,94:$Vb,95:$Vc,98:$VM,101:$Ve,106:$Vf,107:$VN},{7:88,8:93,10:100,11:94,12:90,13:91,14:92,16:161,17:89,18:95,19:96,21:97,22:$VI,23:$VJ,24:$V0,25:$V1,28:$VK,35:101,36:$V3,37:$V4,38:$V5,39:$V6,40:$VL,43:67,48:$Vs,49:$Vt,50:64,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,70:104,71:$V8,72:14,76:20,77:$V9,79:[1,344],83:84,92:$VH,93:$Va,94:$Vb,95:$Vc,98:$VM,101:$Ve,106:$Vf,107:$VN},{20:[1,345]},{79:[1,347],97:[1,348],99:[1,346]},{28:$VG,40:$Vq,43:67,48:$Vs,49:$Vt,50:349,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC},o($V51,[2,137]),{7:88,8:93,10:100,11:94,12:90,13:91,14:92,15:350,16:87,17:89,18:95,19:96,21:97,22:$VI,23:$VJ,24:$V0,25:$V1,28:$VK,35:101,36:$V3,37:$V4,38:$V5,39:$V6,40:$VL,43:67,48:$Vs,49:$Vt,50:64,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,70:104,71:$V8,72:14,76:20,77:$V9,83:84,92:$VH,93:$Va,94:$Vb,95:$Vc,98:$VM,101:$Ve,106:$Vf,107:$VN},{47:[2,81]},{47:[2,82]},{28:$Ve1,73:351},{28:$VG,40:$Vq,43:67,48:$Vs,49:$Vt,50:352,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC},{68:[1,353]},o($Vb1,[2,69]),{68:[1,354]},o($Vh,[2,85]),{47:[1,355]},{67:[1,356]},{28:$VG,40:$Vq,43:67,48:$Vs,49:$Vt,50:126,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,65:357},o($V11,[2,51]),{7:88,8:93,10:100,11:94,12:90,13:91,14:92,16:161,17:89,18:95,19:96,21:97,22:$VI,23:$VJ,24:$V0,25:$V1,28:$VK,35:101,36:$V3,37:$V4,38:$V5,39:$V6,40:$VL,43:67,48:$Vs,49:$Vt,50:64,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,70:104,71:$V8,72:14,76:20,77:$V9,79:[1,358],83:84,92:$VH,93:$Va,94:$Vb,95:$Vc,98:$VM,101:$Ve,106:$Vf,107:$VN},o($Vf1,[2,94]),o($Vh,[2,113]),{41:[1,359]},o($V51,[2,119]),{28:$VG,40:$Vq,43:67,48:$Vs,49:$Vt,50:360,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC},{41:[1,361],59:$VY,60:$VZ,61:$V_,62:$V$,64:$V01},{7:88,8:93,10:100,11:94,12:90,13:91,14:92,16:161,17:89,18:95,19:96,21:97,22:$VI,23:$VJ,24:$V0,25:$V1,28:$VK,35:101,36:$V3,37:$V4,38:$V5,39:$V6,40:$VL,43:67,48:$Vs,49:$Vt,50:64,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,70:104,71:$V8,72:14,76:20,77:$V9,79:[1,362],83:84,92:$VH,93:$Va,94:$Vb,95:$Vc,98:$VM,101:$Ve,106:$Vf,107:$VN},{47:[1,363]},{20:[1,364],59:$VY,60:$VZ,61:$V_,62:$V$,64:$V01},{20:[1,365]},{20:[1,366]},{20:[1,367]},{55:[1,368]},{27:$V91,68:[1,369]},o($Vf1,[2,93]),{7:88,8:93,10:100,11:94,12:90,13:91,14:92,15:370,16:87,17:89,18:95,19:96,21:97,22:$VI,23:$VJ,24:$V0,25:$V1,28:$VK,35:101,36:$V3,37:$V4,38:$V5,39:$V6,40:$VL,43:67,48:$Vs,49:$Vt,50:64,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,70:104,71:$V8,72:14,76:20,77:$V9,83:84,92:$VH,93:$Va,94:$Vb,95:$Vc,98:$VM,101:$Ve,106:$Vf,107:$VN},{41:[1,371],59:$VY,60:$VZ,61:$V_,62:$V$,64:$V01},{7:88,8:93,10:100,11:94,12:90,13:91,14:92,15:372,16:87,17:89,18:95,19:96,21:97,22:$VI,23:$VJ,24:$V0,25:$V1,28:$VK,35:101,36:$V3,37:$V4,38:$V5,39:$V6,40:$VL,43:67,48:$Vs,49:$Vt,50:64,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,70:104,71:$V8,72:14,76:20,77:$V9,83:84,92:$VH,93:$Va,94:$Vb,95:$Vc,98:$VM,101:$Ve,106:$Vf,107:$VN},o($Vh,[2,114]),{78:[1,373]},o($Vh,[2,90]),o($Vh,[2,88]),o($Vh,[2,83]),o($Vh,[2,91]),{68:[1,374]},{27:[1,375]},{7:88,8:93,10:100,11:94,12:90,13:91,14:92,16:161,17:89,18:95,19:96,21:97,22:$VI,23:$VJ,24:$V0,25:$V1,28:$VK,35:101,36:$V3,37:$V4,38:$V5,39:$V6,40:$VL,43:67,48:$Vs,49:$Vt,50:64,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,70:104,71:$V8,72:14,76:20,77:$V9,79:[1,376],83:84,92:$VH,93:$Va,94:$Vb,95:$Vc,98:$VM,101:$Ve,106:$Vf,107:$VN},{7:88,8:93,10:100,11:94,12:90,13:91,14:92,15:377,16:87,17:89,18:95,19:96,21:97,22:$VI,23:$VJ,24:$V0,25:$V1,28:$VK,35:101,36:$V3,37:$V4,38:$V5,39:$V6,40:$VL,43:67,48:$Vs,49:$Vt,50:64,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,70:104,71:$V8,72:14,76:20,77:$V9,83:84,92:$VH,93:$Va,94:$Vb,95:$Vc,98:$VM,101:$Ve,106:$Vf,107:$VN},o($Vg1,[2,117],{72:14,76:20,50:64,43:67,83:84,7:88,17:89,12:90,13:91,14:92,8:93,11:94,18:95,19:96,21:97,10:100,35:101,70:104,16:161,22:$VI,23:$VJ,24:$V0,25:$V1,28:$VK,36:$V3,37:$V4,38:$V5,39:$V6,40:$VL,48:$Vs,49:$Vt,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,71:$V8,77:$V9,92:$VH,93:$Va,94:$Vb,95:$Vc,98:$VM,101:$Ve,106:$Vf,107:$VN}),{7:88,8:93,10:100,11:94,12:90,13:91,14:92,15:378,16:87,17:89,18:95,19:96,21:97,22:$VI,23:$VJ,24:$V0,25:$V1,28:$VK,35:101,36:$V3,37:$V4,38:$V5,39:$V6,40:$VL,43:67,48:$Vs,49:$Vt,50:64,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,70:104,71:$V8,72:14,76:20,77:$V9,83:84,92:$VH,93:$Va,94:$Vb,95:$Vc,98:$VM,101:$Ve,106:$Vf,107:$VN},{67:[1,379]},{67:[1,380]},o($V51,[2,118]),o($Vg1,[2,116],{72:14,76:20,50:64,43:67,83:84,7:88,17:89,12:90,13:91,14:92,8:93,11:94,18:95,19:96,21:97,10:100,35:101,70:104,16:161,22:$VI,23:$VJ,24:$V0,25:$V1,28:$VK,36:$V3,37:$V4,38:$V5,39:$V6,40:$VL,48:$Vs,49:$Vt,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,71:$V8,77:$V9,92:$VH,93:$Va,94:$Vb,95:$Vc,98:$VM,101:$Ve,106:$Vf,107:$VN}),{7:88,8:93,10:100,11:94,12:90,13:91,14:92,16:161,17:89,18:95,19:96,21:97,22:$VI,23:$VJ,24:$V0,25:$V1,28:$VK,35:101,36:$V3,37:$V4,38:$V5,39:$V6,40:$VL,43:67,48:$Vs,49:$Vt,50:64,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,70:104,71:$V8,72:14,76:20,77:$V9,79:[1,381],83:84,92:$VH,93:$Va,94:$Vb,95:$Vc,98:$VM,101:$Ve,106:$Vf,107:$VN},{55:[1,382]},{28:$VG,40:$Vq,43:67,48:$Vs,49:$Vt,50:126,51:$Vu,52:$Vv,54:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,60:$VB,63:$VC,65:383},o($Vh,[2,115]),{68:[1,384]},{27:$V91,68:[1,385]},{20:[1,386]},{68:[1,387]},o($Vh,[2,84]),{20:[1,388]},o($Vh,[2,86])],
defaultActions: {31:[2,1],331:[2,81],332:[2,82]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


    const {TipoDato} = require("../Interprete/expresion")

    // Expresiones
    const Aritmetica = require("../Interprete/Expresiones/aritmetica")
    const Relacional = require("../Interprete/Expresiones/relacional")
    const Dato = require("../Interprete/Expresiones/dato")
    const Negativo = require("../Interprete/Expresiones/negativo")
    const opLogico = require("../Interprete/Expresiones/opLogicos")
    const Negacion = require("../Interprete/Expresiones/negacion")
    const FuncionCout = require("../Interprete/Expresiones/funcioncout")
    const Variable = require("../Interprete/Expresiones/variable")

    // Instrucciones
    const Cout = require("../Interprete/Instrucciones/cout")
    const If = require("../Interprete/Instrucciones/if")
    const ElseIf = require("../Interprete/Instrucciones/elseif")
    const Else = require("../Interprete/Instrucciones/else")
    const While = require("../Interprete/Instrucciones/while")
    const DoWhile = require("../Interprete/Instrucciones/dowhile")
    const For = require("../Interprete/Instrucciones/for")
    const Break = require("../Interprete/Instrucciones/break")
    const Declaracion = require("../Interprete/Instrucciones/declaracion")
    const Ternario = require("../Interprete/Instrucciones/ternario")
    const ActualizacionFor = require("../Interprete/Instrucciones/actualizacionfor")

    // Operaciones Mayores
    const SentenciaIf = require("../Interprete/OperacionesMayores/sentenciaIf")
    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:return 24; 
break;
case 5:return 25; 
break;
case 6:return 36;
break;
case 7:return 37;
break;
case 8:return 38;
break;
case 9:return 39;
break;
case 10:return 42;
break;
case 11:return 74;
break;
case 12:return 77;
break;
case 13:return 81;
break;
case 14:return 93;
break;
case 15:return 95;
break;
case 16:return 94;
break;
case 17:return 22;
break;
case 18:return 23;
break;
case 19:return 107;
break;
case 20:return 100;
break;
case 21:return 106;
break;
case 22:return 103;
break;
case 23:return 51;
break;
case 24:return 52;
break;
case 25:return 49;
break;
case 26:return 45;
break;
case 27:return 48;
break;
case 28:return 53;
break;
case 29:return 40;
break;
case 30:return 75;
break;
case 31:return 101;
break;
case 32:return 98;
break;
case 33:return 97;
break;
case 34:return 99;
break;
case 35:return 56; 
break;
case 36:return 58; 
break;
case 37:return 57; 
break;
case 38:return 28; 
break;
case 39:return 54; 
break;
case 40:return 55; 
break;
case 41:return 30;
break;
case 42:return 31;
break;
case 43:return 32;
break;
case 44:return 33;
break;
case 45:return 34;
break;
case 46:return 59;
break;
case 47:return 60;
break;
case 48:return 61;
break;
case 49:return 62;
break;
case 50:return 63;
break;
case 51:return 64;
break;
case 52:return 'ENTRADA';
break;
case 53:return 105;
break;
case 54:return 84;
break;
case 55:return 85;
break;
case 56:return 87;
break;
case 57:return 89;
break;
case 58:return 88;
break;
case 59:return 86;
break;
case 60:return 69;
break;
case 61:return 90;
break;
case 62:return 91;
break;
case 63:return 92;
break;
case 64:return 46;
break;
case 65:return 47;
break;
case 66:return 78;
break;
case 67:return 79;
break;
case 68:return 67;
break;
case 69:return 68;
break;
case 70:return 20;
break;
case 71:return 27;
break;
case 72:return 41;
break;
case 73:return 44;
break;
case 74:return 71;
break;
case 75:return 5;
break;
case 76:console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:{COM_MULT})/i,/^(?:{COM_SIMPLE})/i,/^(?:(\/\*[\s\S]*?\*\/))/i,/^(?:(\/\/.*))/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:bool\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:cout\b)/i,/^(?:endl\b)/i,/^(?:toupper\b)/i,/^(?:tolower\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:std\b)/i,/^(?:c_str\b)/i,/^(?:execute\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:(true|false\b))/i,/^(?:('(([^\n\"\\]|\\.)*)'))/i,/^(?:([\"][^\"\n]+[\"]))/i,/^(?:([a-zA-Z_][a-zA-Z0-9_]*))/i,/^(?:([0-9]+\.[0-9]+\b))/i,/^(?:([0-9]+\b))/i,/^(?:\\n)/i,/^(?:\\)/i,/^(?:\\")/i,/^(?:\\t)/i,/^(?:')/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:pow\b)/i,/^(?:%)/i,/^(?:>>)/i,/^(?:<<)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?:,)/i,/^(?::)/i,/^(?:\.)/i,/^(?:\?)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}