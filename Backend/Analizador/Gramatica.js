/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,16],$V1=[1,17],$V2=[1,27],$V3=[1,22],$V4=[1,23],$V5=[1,24],$V6=[1,25],$V7=[1,26],$V8=[1,12],$V9=[1,28],$Va=[1,20],$Vb=[1,21],$Vc=[1,15],$Vd=[1,14],$Ve=[1,18],$Vf=[5,24,25,28,36,37,38,39,40,71,77,93,94,100,101,106],$Vg=[1,34],$Vh=[5,20,22,23,24,25,28,36,37,38,39,40,41,48,49,51,52,54,55,56,57,58,60,63,71,77,79,92,93,94,95,97,98,99,100,101,106,107],$Vi=[28,47,67],$Vj=[1,44],$Vk=[1,48],$Vl=[20,27,69],$Vm=[2,29],$Vn=[1,50],$Vo=[1,59],$Vp=[1,69],$Vq=[1,58],$Vr=[1,65],$Vs=[1,66],$Vt=[1,67],$Vu=[1,68],$Vv=[1,70],$Vw=[1,71],$Vx=[1,72],$Vy=[1,73],$Vz=[1,74],$VA=[1,62],$VB=[1,63],$VC=[1,57],$VD=[1,60],$VE=[1,78],$VF=[1,82],$VG=[1,80],$VH=[1,95],$VI=[1,96],$VJ=[1,99],$VK=[1,104],$VL=[1,100],$VM=[1,101],$VN=[1,103],$VO=[20,105],$VP=[1,126],$VQ=[1,127],$VR=[1,128],$VS=[1,129],$VT=[1,130],$VU=[1,131],$VV=[2,56],$VW=[1,135],$VX=[20,47,71,84,85,86,87,88,89,90,91,105],$VY=[1,136],$VZ=[1,137],$V_=[1,138],$V$=[1,139],$V01=[1,140],$V11=[20,27,41,47,59,60,61,62,64,68,71,84,85,86,87,88,89,90,91,105],$V21=[1,152],$V31=[1,153],$V41=[20,47,71,90,91],$V51=[20,22,23,24,25,28,36,37,38,39,40,41,48,49,51,52,54,55,56,57,58,60,63,71,77,79,92,93,94,95,97,98,99,101,106,107],$V61=[1,164],$V71=[1,169],$V81=[1,178],$V91=[1,186],$Va1=[20,27,47,68],$Vb1=[27,47],$Vc1=[20,27,41,47,59,60,68,71,84,85,86,87,88,89,90,91,105],$Vd1=[1,254],$Ve1=[5,20,22,23,24,25,28,36,37,38,39,40,41,48,49,51,52,54,55,56,57,58,60,63,71,77,79,81,92,93,94,95,97,98,99,100,101,106,107],$Vf1=[1,361],$Vg1=[79,97,99];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"entornos":4,"EOF":5,"entorno":6,"declaracionVariables":7,"funcionExecute":8,"funciones":9,"comentarios":10,"impresionCout":11,"sentenciaIfCompleta":12,"ciclosWhile":13,"instrucciones":14,"instruccion":15,"llamarFunciones":16,"cicloFor":17,"switchCase":18,"ternario":19,"PTCOMA":20,"sentenciaReturn":21,"PR_BREAK":22,"PR_CONTINUE":23,"COM_MULT":24,"COM_SIMPLE":25,"identificadores":26,"COMA":27,"ID":28,"secuenciasEscape":29,"SALTO_LINEA":30,"BARRA_INVERTIDA":31,"COMILLA_DOBLE":32,"TABULACION":33,"COMILLA_SIMPLE":34,"tiposVar":35,"PR_INT":36,"PR_DOUBLE":37,"PR_BOOL":38,"PR_CHAR":39,"PR_STD":40,"DOSPUNTOS":41,"PR_STRING":42,"valores":43,"PUNTO":44,"PR_LENGTH":45,"PARIZQ":46,"PARDER":47,"PR_TYPEOF":48,"PR_ROUND":49,"valoresPlus":50,"PR_TOUPPER":51,"PR_TOLOWER":52,"PR_TOSTRING":53,"DECIMAL":54,"ENTERO":55,"BOOLEAN":56,"STRING":57,"CHAR":58,"MAS":59,"MENOS":60,"POR":61,"DIVIDIDO":62,"POTENCIA":63,"MODULO":64,"valoresArreglos":65,"arregloDeclaraciones":66,"CORIZQ":67,"CORDER":68,"IGUAL":69,"sentenciaLogica":70,"INTERROGACION":71,"VectoresMatrices":72,"IncrementoDecremento":73,"PR_NEW":74,"PR_C_STR":75,"sentenciaIf":76,"PR_IF":77,"LLAVIZQ":78,"LLAVDER":79,"sentenciaIfElse":80,"PR_ELSE":81,"sentenciaElse":82,"sentenciaRelacional":83,"IGUALES":84,"DIFERENTE":85,"MENOR_QUE":86,"MENOR_IGUAL":87,"MAYOR_QUE":88,"MAYOR_IGUAL":89,"OR":90,"AND":91,"NOT":92,"PR_WHILE":93,"PR_DO":94,"PR_FOR":95,"recursividadCase":96,"PR_CASE":97,"PR_SWITCH":98,"PR_DEFAULT":99,"PR_VOID":100,"PR_EXECUTE":101,"posibilidadesCout":102,"PR_ENDL":103,"funcionCout":104,"SALIDA":105,"PR_COUT":106,"PR_RETURN":107,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",20:"PTCOMA",22:"PR_BREAK",23:"PR_CONTINUE",24:"COM_MULT",25:"COM_SIMPLE",27:"COMA",28:"ID",30:"SALTO_LINEA",31:"BARRA_INVERTIDA",32:"COMILLA_DOBLE",33:"TABULACION",34:"COMILLA_SIMPLE",36:"PR_INT",37:"PR_DOUBLE",38:"PR_BOOL",39:"PR_CHAR",40:"PR_STD",41:"DOSPUNTOS",42:"PR_STRING",44:"PUNTO",45:"PR_LENGTH",46:"PARIZQ",47:"PARDER",48:"PR_TYPEOF",49:"PR_ROUND",51:"PR_TOUPPER",52:"PR_TOLOWER",53:"PR_TOSTRING",54:"DECIMAL",55:"ENTERO",56:"BOOLEAN",57:"STRING",58:"CHAR",59:"MAS",60:"MENOS",61:"POR",62:"DIVIDIDO",63:"POTENCIA",64:"MODULO",67:"CORIZQ",68:"CORDER",69:"IGUAL",71:"INTERROGACION",74:"PR_NEW",75:"PR_C_STR",77:"PR_IF",78:"LLAVIZQ",79:"LLAVDER",81:"PR_ELSE",84:"IGUALES",85:"DIFERENTE",86:"MENOR_QUE",87:"MENOR_IGUAL",88:"MAYOR_QUE",89:"MAYOR_IGUAL",90:"OR",91:"AND",92:"NOT",93:"PR_WHILE",94:"PR_DO",95:"PR_FOR",97:"PR_CASE",98:"PR_SWITCH",99:"PR_DEFAULT",100:"PR_VOID",101:"PR_EXECUTE",103:"PR_ENDL",105:"SALIDA",106:"PR_COUT",107:"PR_RETURN"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[14,2],[14,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,2],[15,1],[15,2],[15,2],[15,1],[10,1],[10,1],[26,3],[26,1],[29,2],[29,2],[29,2],[29,2],[29,2],[29,1],[29,1],[29,1],[29,1],[29,1],[35,1],[35,1],[35,1],[35,1],[35,4],[43,5],[43,4],[43,4],[43,4],[43,4],[43,7],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[50,3],[50,3],[50,2],[50,3],[50,3],[50,6],[50,3],[50,1],[65,3],[65,1],[66,4],[66,6],[66,4],[66,2],[7,3],[7,5],[7,8],[7,7],[7,5],[7,8],[7,5],[7,8],[7,1],[73,3],[73,3],[72,11],[72,16],[72,9],[72,17],[72,8],[72,11],[72,7],[72,10],[72,11],[76,7],[80,9],[80,8],[82,4],[12,3],[12,2],[12,2],[12,1],[19,5],[83,3],[83,3],[83,3],[83,3],[83,3],[83,3],[83,1],[70,3],[70,3],[70,2],[70,1],[13,7],[13,9],[17,14],[17,13],[96,5],[96,4],[18,10],[18,7],[9,8],[9,7],[9,8],[9,7],[16,5],[16,4],[8,6],[8,5],[102,1],[102,2],[102,3],[102,4],[102,1],[104,3],[104,1],[11,4],[21,3],[21,6],[21,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = $$[$0-1]; return this.$; 
break;
case 2: case 11:
this.$ = $$[$0-1]; this.$.push($$[$0]);
break;
case 3: case 12: case 29:
this.$ = []; this.$.push($$[$0]);
break;
case 4: case 8: case 9: case 10: case 19:
this.$ = $$[$0];
break;
case 23:
this.$ = new Break($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 28:
this.$ = $$[$0-2]; this.$.push($$[$0]);
break;
case 40:
this.$ = "ENTERO";
break;
case 41:
this.$ = "DECIMAL";
break;
case 42:
this.$ = "BOOL";
break;
case 43:
this.$ = "CHAR";
break;
case 44:
this.$ = "STRING";
break;
case 47: case 48: case 49:
this.$ = new FuncionCout($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 50:
this.$ = new FuncionCout($$[$0-3], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 51:
this.$ = new Dato($$[$0], TipoDato.DECIMAL, _$[$0].first_line, _$[$0].first_column); 
break;
case 52:
this.$ = new Dato($$[$0], TipoDato.ENTERO, _$[$0].first_line, _$[$0].first_column); 
break;
case 53:
this.$ = new Dato($$[$0], TipoDato.BOOL, _$[$0].first_line, _$[$0].first_column); 
break;
case 54:
this.$ = new Dato($$[$0], TipoDato.STRING, _$[$0].first_line, _$[$0].first_column); 
break;
case 55:
this.$ = new Dato($$[$0], TipoDato.CHAR, _$[$0].first_line, _$[$0].first_column); 
break;
case 57: case 58: case 60: case 61: case 63:
 this.$ = new Aritmetica($$[$0-2], $$[$0], $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 59:
 this.$ = new Negativo($$[$0], _$[$0-1].first_line, _$[$0-1].first_column);           
break;
case 62:
 this.$ = new Aritmetica($$[$0-3], $$[$0-1], $$[$0-4], _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 64: case 106: case 110: case 132: case 133:
 this.$ = $$[$0]; 
break;
case 71:
this.$ = new Declaracion($$[$0-2], $$[$0-1], null, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 72:
this.$ = new Declaracion($$[$0-4], $$[$0-3], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 91:
this.$ = new If($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column)
break;
case 92:
this.$ = $$[$0-8]; this.$.push(new ElseIf($$[$0-4], $$[$0-1], _$[$0-8].first_line, _$[$0-8].first_column))
break;
case 93:
this.$ = []; this.$.push(new ElseIf($$[$0-4], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column))
break;
case 94:
this.$ = new Else($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 95:
this.$ = new SentenciaIf($$[$0-2], $$[$0-1], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 96:
this.$ = new SentenciaIf($$[$0-1], $$[$0], null, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 97:
this.$ = new SentenciaIf($$[$0-1], null, $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 98:
this.$ = new SentenciaIf($$[$0], null, null, _$[$0].first_line, _$[$0].first_column);
break;
case 99:
this.$ = new Ternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 100: case 101: case 102: case 103: case 104: case 105:
 this.$ = new Relacional($$[$0-2], $$[$0], $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 107:
 this.$ = new opLogicos($$[$0-2], $$[$0], $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 108:
 this.$ = new opLogico($$[$0-2], $$[$0], $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 109:
 this.$ = new Negacion($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 111:
 this.$ = new While($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 112:
 this.$ = new DoWhile($$[$0-2], $$[$0-6], _$[$0-8].first_line, _$[$0-8].first_column); 
break;
case 127:
 this.$ = $$[$0];
break;
case 128:
 this.$ = Negacion($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 134:
 this.$ = new Cout($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,24:$V0,25:$V1,28:$V2,35:11,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7,71:$V8,72:13,76:19,77:$V9,93:$Va,94:$Vb,100:$Vc,101:$Vd,106:$Ve},{1:[3]},{5:[1,29],6:30,7:4,8:5,9:6,10:7,11:8,12:9,13:10,24:$V0,25:$V1,28:$V2,35:11,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7,71:$V8,72:13,76:19,77:$V9,93:$Va,94:$Vb,100:$Vc,101:$Vd,106:$Ve},o($Vf,[2,3]),o($Vf,[2,4]),o($Vf,[2,5]),o($Vf,[2,6]),o($Vf,[2,7]),o($Vf,[2,8]),o($Vf,[2,9]),o($Vf,[2,10]),{26:31,28:[1,32]},{26:33,28:$Vg},o($Vh,[2,79]),{28:[1,35]},{28:[1,36]},o($Vh,[2,26]),o($Vh,[2,27]),{105:[1,37]},o($Vh,[2,98],{80:38,82:39,81:[1,40]}),{46:[1,41]},{78:[1,42]},o($Vi,[2,40]),o($Vi,[2,41]),o($Vi,[2,42]),o($Vi,[2,43]),{41:[1,43]},{67:$Vj},{46:[1,45]},{1:[2,1]},o($Vf,[2,2]),{20:[1,46],27:$Vk,69:[1,47]},o($Vl,$Vm,{46:[1,49],67:$Vn}),{27:$Vk,69:[1,51]},o([27,69],$Vm),{46:[1,52]},{46:[1,53]},{28:$Vo,40:$Vp,43:64,46:$Vq,48:$Vr,49:$Vs,50:61,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,83:56,92:$VC,102:55,103:$VD,104:54},o($Vh,[2,96],{82:75,81:[1,76]}),o($Vh,[2,97]),{77:[1,77],78:$VE},{28:$VF,40:$Vp,43:64,48:$Vr,49:$Vs,50:61,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,70:79,83:81,92:$VG},{7:85,8:90,10:97,11:91,12:87,13:88,14:83,15:84,16:86,17:89,18:92,19:93,21:94,22:$VH,23:$VI,24:$V0,25:$V1,28:$VJ,35:98,36:$V3,37:$V4,38:$V5,39:$V6,40:$VK,43:64,48:$Vr,49:$Vs,50:61,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,70:102,71:$V8,72:13,76:19,77:$V9,83:81,92:$VG,93:$Va,94:$Vb,95:$VL,98:$VM,101:$Vd,106:$Ve,107:$VN},{41:[1,105]},{55:[1,106]},{28:$VF,40:$Vp,43:64,48:$Vr,49:$Vs,50:61,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,70:107,83:81,92:$VG},o($Vh,[2,71]),{19:110,28:[1,109],40:$Vp,43:64,46:[1,111],48:$Vr,49:$Vs,50:61,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,70:108,83:81,92:$VG},{28:[1,112]},{35:115,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7,47:[1,114],66:113},{68:[1,116]},{28:[1,118],40:$Vp,43:64,48:$Vr,49:$Vs,50:61,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,70:117,83:81,92:$VG},{28:$VF,40:$Vp,43:64,47:[1,120],48:$Vr,49:$Vs,50:121,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,65:119},{35:115,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7,47:[1,123],66:122},{20:[1,124],105:[1,125]},o($VO,[2,133]),o($VO,[2,127],{84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU}),{56:[1,132]},{28:$VF,40:$Vp,43:64,48:$Vr,49:$Vs,50:61,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,70:133,83:81,92:$VG},o([20,59,60,61,62,64,84,85,86,87,88,89,105],$VV,{44:$VW,46:[1,134]}),o($VO,[2,131]),o($VX,[2,106],{59:$VY,60:$VZ,61:$V_,62:$V$,64:$V01}),{28:$VF,40:$Vp,43:64,48:$Vr,49:$Vs,50:141,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB},{46:[1,142]},o($V11,[2,64]),{46:[1,143]},{46:[1,144]},{46:[1,145]},{46:[1,146]},{41:[1,147]},o($V11,[2,51]),o($V11,[2,52]),o($V11,[2,53]),o($V11,[2,54]),o($V11,[2,55]),o($Vh,[2,95]),{77:[1,148],78:$VE},{46:[1,149]},{7:85,8:90,10:97,11:91,12:87,13:88,14:150,15:84,16:86,17:89,18:92,19:93,21:94,22:$VH,23:$VI,24:$V0,25:$V1,28:$VJ,35:98,36:$V3,37:$V4,38:$V5,39:$V6,40:$VK,43:64,48:$Vr,49:$Vs,50:61,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,70:102,71:$V8,72:13,76:19,77:$V9,83:81,92:$VG,93:$Va,94:$Vb,95:$VL,98:$VM,101:$Vd,106:$Ve,107:$VN},{47:[1,151],90:$V21,91:$V31},{28:$VF,40:$Vp,43:64,48:$Vr,49:$Vs,50:61,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,70:154,83:81,92:$VG},o($V41,[2,110],{84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU}),o($V11,$VV,{44:$VW}),{7:85,8:90,10:97,11:91,12:87,13:88,15:156,16:86,17:89,18:92,19:93,21:94,22:$VH,23:$VI,24:$V0,25:$V1,28:$VJ,35:98,36:$V3,37:$V4,38:$V5,39:$V6,40:$VK,43:64,48:$Vr,49:$Vs,50:61,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,70:102,71:$V8,72:13,76:19,77:$V9,79:[1,155],83:81,92:$VG,93:$Va,94:$Vb,95:$VL,98:$VM,101:$Vd,106:$Ve,107:$VN},o($V51,[2,12]),o($V51,[2,13]),o($V51,[2,14]),o($V51,[2,15]),o($V51,[2,16]),o($V51,[2,17]),o($V51,[2,18]),o($V51,[2,19]),o($V51,[2,20]),{20:[1,157]},o($V51,[2,22]),{20:[1,158]},{20:[1,159]},o($V51,[2,25]),{26:31,28:[1,160]},o([59,60,61,62,64,71,84,85,86,87,88,89,90,91],$VV,{44:$VW,46:[1,161],67:$Vj}),{46:[1,162]},{46:[1,163]},{71:$V61,90:$V21,91:$V31},{20:[1,167],28:[1,166],40:$Vp,43:64,48:$Vr,49:$Vs,50:121,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,65:165},{41:[1,168]},{42:$V71},{68:[1,170]},{47:[1,171],90:$V21,91:$V31},{20:[1,172],71:$V61,90:$V21,91:$V31},o([20,59,60,61,62,64,71,84,85,86,87,88,89,90,91],$VV,{44:$VW,46:[1,173],67:[1,174]}),{20:[1,175]},{35:176,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7},o($Vl,[2,28]),{27:$V81,47:[1,177]},{78:[1,179]},{28:[1,180]},{67:[1,182],69:[1,181]},{20:[1,183],90:$V21,91:$V31},o([20,59,60,61,62,64,84,85,86,87,88,89,90,91],$VV,{44:$VW,67:[1,184]}),{27:$V91,47:[1,185]},{20:[1,187]},o($Va1,[2,66],{59:$VY,60:$VZ,61:$V_,62:$V$,64:$V01}),{27:$V81,47:[1,188]},{78:[1,189]},o($Vh,[2,134]),{28:$Vo,40:$Vp,43:64,46:$Vq,48:$Vr,49:$Vs,50:61,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,83:56,92:$VC,102:190,103:$VD},{28:$VF,40:$Vp,43:64,48:$Vr,49:$Vs,50:61,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,83:191},{28:$VF,40:$Vp,43:64,48:$Vr,49:$Vs,50:61,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,83:192},{28:$VF,40:$Vp,43:64,48:$Vr,49:$Vs,50:61,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,83:193},{28:$VF,40:$Vp,43:64,48:$Vr,49:$Vs,50:61,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,83:194},{28:$VF,40:$Vp,43:64,48:$Vr,49:$Vs,50:61,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,83:195},{28:$VF,40:$Vp,43:64,48:$Vr,49:$Vs,50:61,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,83:196},o($VO,[2,128]),{47:[1,197],90:$V21,91:$V31},{28:$VF,40:$Vp,43:64,48:$Vr,49:$Vs,50:121,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,65:198},{45:[1,199]},{28:$VF,40:$Vp,43:64,48:$Vr,49:$Vs,50:200,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB},{28:$VF,40:$Vp,43:64,48:$Vr,49:$Vs,50:201,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB},{28:$VF,40:$Vp,43:64,48:$Vr,49:$Vs,50:202,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB},{28:$VF,40:$Vp,43:64,48:$Vr,49:$Vs,50:203,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB},{28:$VF,40:$Vp,43:64,48:$Vr,49:$Vs,50:204,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB},o($V11,[2,59]),{28:$VF,40:$Vp,43:64,48:$Vr,49:$Vs,50:205,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB},{28:[1,206]},{28:$VF,40:$Vp,43:64,48:$Vr,49:$Vs,50:207,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB},{28:$VF,40:$Vp,43:208,48:$Vr,49:$Vs,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz},{28:$VF,40:$Vp,43:209,48:$Vr,49:$Vs,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz},{41:[1,210]},{46:[1,211]},{28:$VF,40:$Vp,43:64,48:$Vr,49:$Vs,50:61,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,70:212,83:81,92:$VG},{7:85,8:90,10:97,11:91,12:87,13:88,15:156,16:86,17:89,18:92,19:93,21:94,22:$VH,23:$VI,24:$V0,25:$V1,28:$VJ,35:98,36:$V3,37:$V4,38:$V5,39:$V6,40:$VK,43:64,48:$Vr,49:$Vs,50:61,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,70:102,71:$V8,72:13,76:19,77:$V9,79:[1,213],83:81,92:$VG,93:$Va,94:$Vb,95:$VL,98:$VM,101:$Vd,106:$Ve,107:$VN},{78:[1,214]},{28:$VF,40:$Vp,43:64,48:$Vr,49:$Vs,50:61,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,70:215,83:81,92:$VG},{28:$VF,40:$Vp,43:64,48:$Vr,49:$Vs,50:61,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,70:216,83:81,92:$VG},o($V41,[2,109]),{93:[1,217]},o($V51,[2,11]),o($V51,[2,21]),o($V51,[2,23]),o($V51,[2,24]),o($Vl,$Vm,{67:$Vn}),{28:$VF,40:$Vp,43:64,47:[1,219],48:$Vr,49:$Vs,50:121,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,65:218},{26:221,28:$Vg,35:220,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7},{28:$VF,40:$Vp,43:64,48:$Vr,49:$Vs,50:222,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB},{7:85,8:90,10:97,11:91,12:87,13:88,14:223,15:84,16:86,17:89,18:92,19:93,21:94,22:$VH,23:$VI,24:$V0,25:$V1,28:$VJ,35:98,36:$V3,37:$V4,38:$V5,39:$V6,40:$VK,43:64,48:$Vr,49:$Vs,50:61,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,70:102,71:$V8,72:13,76:19,77:$V9,83:81,92:$VG,93:$Va,94:$Vb,95:$VL,98:$VM,101:$Vd,106:$Ve,107:$VN},{20:[1,224],27:$V91},o([20,27,59,60,61,62,64],$VV,{44:$VW,46:[1,225]}),o($V51,[2,137]),{41:[1,226]},o($Vi,[2,44]),{67:[1,228],69:[1,227]},{78:[1,229]},o($Vh,[2,72]),{28:$VF,40:$Vp,43:64,47:[1,231],48:$Vr,49:$Vs,50:121,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,65:230},{55:[1,232]},o($Vh,[2,75]),{47:[1,233]},{78:[1,234]},{35:235,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7},{7:85,8:90,10:97,11:91,12:87,13:88,14:236,15:84,16:86,17:89,18:92,19:93,21:94,22:$VH,23:$VI,24:$V0,25:$V1,28:$VJ,35:98,36:$V3,37:$V4,38:$V5,39:$V6,40:$VK,43:64,48:$Vr,49:$Vs,50:61,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,70:102,71:$V8,72:13,76:19,77:$V9,83:81,92:$VG,93:$Va,94:$Vb,95:$VL,98:$VM,101:$Vd,106:$Ve,107:$VN},o($Vb1,[2,70],{67:[1,237]}),{28:[1,240],67:[1,239],74:[1,238]},{68:[1,241]},o($Vh,[2,77]),{28:$VF,40:$Vp,43:64,48:$Vr,49:$Vs,50:121,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,65:242},{20:[1,243]},{28:$VF,40:$Vp,43:64,48:$Vr,49:$Vs,50:244,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB},o($Vh,[2,126]),{78:[1,245]},{7:85,8:90,10:97,11:91,12:87,13:88,14:246,15:84,16:86,17:89,18:92,19:93,21:94,22:$VH,23:$VI,24:$V0,25:$V1,28:$VJ,35:98,36:$V3,37:$V4,38:$V5,39:$V6,40:$VK,43:64,48:$Vr,49:$Vs,50:61,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,70:102,71:$V8,72:13,76:19,77:$V9,83:81,92:$VG,93:$Va,94:$Vb,95:$VL,98:$VM,101:$Vd,106:$Ve,107:$VN},o($VO,[2,132]),o($VX,[2,100]),o($VX,[2,101]),o($VX,[2,102]),o($VX,[2,103]),o($VX,[2,104]),o($VX,[2,105]),o($VO,[2,129]),{27:$V91,47:[1,247]},{46:[1,248]},o($Vc1,[2,57],{61:$V_,62:$V$,64:$V01}),o($Vc1,[2,58],{61:$V_,62:$V$,64:$V01}),o($V11,[2,60]),o($V11,[2,61]),o($V11,[2,63]),{27:[1,249],59:$VY,60:$VZ,61:$V_,62:$V$,64:$V01},{47:[1,250]},{47:[1,251],59:$VY,60:$VZ,61:$V_,62:$V$,64:$V01},{47:[1,252]},{47:[1,253]},{53:$Vd1},{28:$VF,40:$Vp,43:64,48:$Vr,49:$Vs,50:61,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,70:255,83:81,92:$VG},{47:[1,256],90:$V21,91:$V31},o($Vh,[2,94]),{7:85,8:90,10:97,11:91,12:87,13:88,14:257,15:84,16:86,17:89,18:92,19:93,21:94,22:$VH,23:$VI,24:$V0,25:$V1,28:$VJ,35:98,36:$V3,37:$V4,38:$V5,39:$V6,40:$VK,43:64,48:$Vr,49:$Vs,50:61,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,70:102,71:$V8,72:13,76:19,77:$V9,83:81,92:$VG,93:$Va,94:$Vb,95:$VL,98:$VM,101:$Vd,106:$Ve,107:$VN},o([20,47,71,90],[2,107],{91:$V31}),o($V41,[2,108]),{46:[1,258]},{27:$V91,47:[1,259]},{20:[1,260]},{26:261,28:$Vg},{27:$Vk,69:[1,262]},{47:[1,263],59:$VY,60:$VZ,61:$V_,62:$V$,64:$V01},{7:85,8:90,10:97,11:91,12:87,13:88,15:156,16:86,17:89,18:92,19:93,21:94,22:$VH,23:$VI,24:$V0,25:$V1,28:$VJ,35:98,36:$V3,37:$V4,38:$V5,39:$V6,40:$VK,41:[1,264],43:64,48:$Vr,49:$Vs,50:61,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,70:102,71:$V8,72:13,76:19,77:$V9,83:81,92:$VG,93:$Va,94:$Vb,95:$VL,98:$VM,101:$Vd,106:$Ve,107:$VN},o($V51,[2,135]),{28:$VF,40:$Vp,43:64,48:$Vr,49:$Vs,50:121,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,65:265},{42:$V71,53:$Vd1},{28:$VF,40:$Vp,43:64,48:$Vr,49:$Vs,50:266,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB},{55:[1,267]},{7:85,8:90,10:97,11:91,12:87,13:88,14:268,15:84,16:86,17:89,18:92,19:93,21:94,22:$VH,23:$VI,24:$V0,25:$V1,28:$VJ,35:98,36:$V3,37:$V4,38:$V5,39:$V6,40:$VK,43:64,48:$Vr,49:$Vs,50:61,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,70:102,71:$V8,72:13,76:19,77:$V9,83:81,92:$VG,93:$Va,94:$Vb,95:$VL,98:$VM,101:$Vd,106:$Ve,107:$VN},{27:$V91,47:[1,269]},{20:[1,270]},{68:[1,271]},{28:$VF,40:$Vp,43:64,48:$Vr,49:$Vs,50:272,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB},{7:85,8:90,10:97,11:91,12:87,13:88,14:273,15:84,16:86,17:89,18:92,19:93,21:94,22:$VH,23:$VI,24:$V0,25:$V1,28:$VJ,35:98,36:$V3,37:$V4,38:$V5,39:$V6,40:$VK,43:64,48:$Vr,49:$Vs,50:61,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,70:102,71:$V8,72:13,76:19,77:$V9,83:81,92:$VG,93:$Va,94:$Vb,95:$VL,98:$VM,101:$Vd,106:$Ve,107:$VN},{28:[1,274]},{7:85,8:90,10:97,11:91,12:87,13:88,15:156,16:86,17:89,18:92,19:93,21:94,22:$VH,23:$VI,24:$V0,25:$V1,28:$VJ,35:98,36:$V3,37:$V4,38:$V5,39:$V6,40:$VK,43:64,48:$Vr,49:$Vs,50:61,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,70:102,71:$V8,72:13,76:19,77:$V9,79:[1,275],83:81,92:$VG,93:$Va,94:$Vb,95:$VL,98:$VM,101:$Vd,106:$Ve,107:$VN},{68:[1,276]},{35:277,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7},{28:$VF,40:$Vp,43:64,48:$Vr,49:$Vs,50:121,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,65:278},{44:[1,279]},{69:[1,280]},{27:$V91,68:[1,281]},o($Vh,[2,125]),o($Va1,[2,65],{59:$VY,60:$VZ,61:$V_,62:$V$,64:$V01}),{7:85,8:90,10:97,11:91,12:87,13:88,14:282,15:84,16:86,17:89,18:92,19:93,21:94,22:$VH,23:$VI,24:$V0,25:$V1,28:$VJ,35:98,36:$V3,37:$V4,38:$V5,39:$V6,40:$VK,43:64,48:$Vr,49:$Vs,50:61,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,70:102,71:$V8,72:13,76:19,77:$V9,83:81,92:$VG,93:$Va,94:$Vb,95:$VL,98:$VM,101:$Vd,106:$Ve,107:$VN},{7:85,8:90,10:97,11:91,12:87,13:88,15:156,16:86,17:89,18:92,19:93,21:94,22:$VH,23:$VI,24:$V0,25:$V1,28:$VJ,35:98,36:$V3,37:$V4,38:$V5,39:$V6,40:$VK,43:64,48:$Vr,49:$Vs,50:61,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,70:102,71:$V8,72:13,76:19,77:$V9,79:[1,283],83:81,92:$VG,93:$Va,94:$Vb,95:$VL,98:$VM,101:$Vd,106:$Ve,107:$VN},o($VO,[2,130]),{47:[1,284]},{28:$VF,40:$Vp,43:64,48:$Vr,49:$Vs,50:285,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB},o($V11,[2,46]),o($V11,[2,47]),o($V11,[2,48]),o($V11,[2,49]),{46:[1,286]},{47:[1,287],90:$V21,91:$V31},{78:[1,288]},{7:85,8:90,10:97,11:91,12:87,13:88,15:156,16:86,17:89,18:92,19:93,21:94,22:$VH,23:$VI,24:$V0,25:$V1,28:$VJ,35:98,36:$V3,37:$V4,38:$V5,39:$V6,40:$VK,43:64,48:$Vr,49:$Vs,50:61,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,70:102,71:$V8,72:13,76:19,77:$V9,79:[1,289],83:81,92:$VG,93:$Va,94:$Vb,95:$VL,98:$VM,101:$Vd,106:$Ve,107:$VN},{28:$VF,40:$Vp,43:64,48:$Vr,49:$Vs,50:61,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,70:290,83:81,92:$VG},{20:[1,291]},o($V51,[2,124]),{27:$Vk,69:[1,292]},{28:$VF,40:$Vp,43:64,48:$Vr,49:$Vs,50:293,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB},{78:[1,294]},{7:85,8:90,10:97,11:91,12:87,13:88,14:295,15:84,16:86,17:89,18:92,19:93,21:94,22:$VH,23:$VI,24:$V0,25:$V1,28:$VJ,35:98,36:$V3,37:$V4,38:$V5,39:$V6,40:$VK,43:64,48:$Vr,49:$Vs,50:61,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,70:102,71:$V8,72:13,76:19,77:$V9,83:81,92:$VG,93:$Va,94:$Vb,95:$VL,98:$VM,101:$Vd,106:$Ve,107:$VN},{27:$V91,47:[1,296]},{20:[1,297],59:$VY,60:$VZ,61:$V_,62:$V$,64:$V01},{68:[1,298]},{7:85,8:90,10:97,11:91,12:87,13:88,15:156,16:86,17:89,18:92,19:93,21:94,22:$VH,23:$VI,24:$V0,25:$V1,28:$VJ,35:98,36:$V3,37:$V4,38:$V5,39:$V6,40:$VK,43:64,48:$Vr,49:$Vs,50:61,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,70:102,71:$V8,72:13,76:19,77:$V9,79:[1,299],83:81,92:$VG,93:$Va,94:$Vb,95:$VL,98:$VM,101:$Vd,106:$Ve,107:$VN},{20:[1,300]},o($Vh,[2,74]),{20:[1,301],67:[1,302]},{20:[1,303],59:$VY,60:$VZ,61:$V_,62:$V$,64:$V01},{7:85,8:90,10:97,11:91,12:87,13:88,15:156,16:86,17:89,18:92,19:93,21:94,22:$VH,23:$VI,24:$V0,25:$V1,28:$VJ,35:98,36:$V3,37:$V4,38:$V5,39:$V6,40:$VK,43:64,48:$Vr,49:$Vs,50:61,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,70:102,71:$V8,72:13,76:19,77:$V9,79:[1,304],83:81,92:$VG,93:$Va,94:$Vb,95:$VL,98:$VM,101:$Vd,106:$Ve,107:$VN},o($Vb1,[2,67],{67:[1,305]}),o($Vf,[2,120]),o($Vb1,[2,69]),{67:[1,306]},{27:$V91,68:[1,307]},{75:[1,308]},{67:[1,310],74:[1,309]},{20:[1,311]},{7:85,8:90,10:97,11:91,12:87,13:88,15:156,16:86,17:89,18:92,19:93,21:94,22:$VH,23:$VI,24:$V0,25:$V1,28:$VJ,35:98,36:$V3,37:$V4,38:$V5,39:$V6,40:$VK,43:64,48:$Vr,49:$Vs,50:61,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,70:102,71:$V8,72:13,76:19,77:$V9,79:[1,312],83:81,92:$VG,93:$Va,94:$Vb,95:$VL,98:$VM,101:$Vd,106:$Ve,107:$VN},o($Vf,[2,122]),o($V11,[2,45]),{47:[1,313],59:$VY,60:$VZ,61:$V_,62:$V$,64:$V01},{28:$VF,40:$Vp,43:64,48:$Vr,49:$Vs,50:314,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB},{78:[1,315]},{7:85,8:90,10:97,11:91,12:87,13:88,14:316,15:84,16:86,17:89,18:92,19:93,21:94,22:$VH,23:$VI,24:$V0,25:$V1,28:$VJ,35:98,36:$V3,37:$V4,38:$V5,39:$V6,40:$VK,43:64,48:$Vr,49:$Vs,50:61,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,70:102,71:$V8,72:13,76:19,77:$V9,83:81,92:$VG,93:$Va,94:$Vb,95:$VL,98:$VM,101:$Vd,106:$Ve,107:$VN},o($Vh,[2,111]),{47:[1,317],90:$V21,91:$V31},o($V51,[2,123]),{28:$VF,40:$Vp,43:64,48:$Vr,49:$Vs,50:318,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB},{20:[1,319],59:$VY,60:$VZ,61:$V_,62:$V$,64:$V01},{96:320,97:[1,321]},{7:85,8:90,10:97,11:91,12:87,13:88,15:156,16:86,17:89,18:92,19:93,20:[2,99],21:94,22:$VH,23:$VI,24:$V0,25:$V1,28:$VJ,35:98,36:$V3,37:$V4,38:$V5,39:$V6,40:$VK,43:64,48:$Vr,49:$Vs,50:61,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,70:102,71:$V8,72:13,76:19,77:$V9,83:81,92:$VG,93:$Va,94:$Vb,95:$VL,98:$VM,101:$Vd,106:$Ve,107:$VN},{20:[1,322]},o($Vh,[2,88]),{69:[1,323]},o($Ve1,[2,91]),o($Vh,[2,73]),o($Vh,[2,86]),{55:[1,324]},o($Vh,[2,76]),o($Vf,[2,119]),{68:[1,325]},{55:[1,326]},{20:[1,327]},{46:[1,328]},{35:329,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7},{67:[1,330]},o($Vh,[2,78]),o($Vf,[2,121]),o($V11,[2,62]),{47:[1,331],59:$VY,60:$VZ,61:$V_,62:$V$,64:$V01},{7:85,8:90,10:97,11:91,12:87,13:88,14:332,15:84,16:86,17:89,18:92,19:93,21:94,22:$VH,23:$VI,24:$V0,25:$V1,28:$VJ,35:98,36:$V3,37:$V4,38:$V5,39:$V6,40:$VK,43:64,48:$Vr,49:$Vs,50:61,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,70:102,71:$V8,72:13,76:19,77:$V9,83:81,92:$VG,93:$Va,94:$Vb,95:$VL,98:$VM,101:$Vd,106:$Ve,107:$VN},{7:85,8:90,10:97,11:91,12:87,13:88,15:156,16:86,17:89,18:92,19:93,21:94,22:$VH,23:$VI,24:$V0,25:$V1,28:$VJ,35:98,36:$V3,37:$V4,38:$V5,39:$V6,40:$VK,43:64,48:$Vr,49:$Vs,50:61,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,70:102,71:$V8,72:13,76:19,77:$V9,79:[1,333],83:81,92:$VG,93:$Va,94:$Vb,95:$VL,98:$VM,101:$Vd,106:$Ve,107:$VN},{20:[1,334]},{20:[1,335],59:$VY,60:$VZ,61:$V_,62:$V$,64:$V01},{28:$VF,40:$Vp,43:64,48:$Vr,49:$Vs,50:61,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,70:336,83:81,92:$VG},{79:[1,338],97:[1,339],99:[1,337]},{28:$VF,40:$Vp,43:64,48:$Vr,49:$Vs,50:340,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB},o($V51,[2,136]),{28:$VF,40:$Vp,43:64,48:$Vr,49:$Vs,50:341,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB},{68:[1,342]},o($Vb1,[2,68]),{68:[1,343]},o($Vh,[2,84]),{47:[1,344]},{67:[1,345]},{28:$VF,40:$Vp,43:64,48:$Vr,49:$Vs,50:121,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,65:346},o($V11,[2,50]),{7:85,8:90,10:97,11:91,12:87,13:88,15:156,16:86,17:89,18:92,19:93,21:94,22:$VH,23:$VI,24:$V0,25:$V1,28:$VJ,35:98,36:$V3,37:$V4,38:$V5,39:$V6,40:$VK,43:64,48:$Vr,49:$Vs,50:61,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,70:102,71:$V8,72:13,76:19,77:$V9,79:[1,347],83:81,92:$VG,93:$Va,94:$Vb,95:$VL,98:$VM,101:$Vd,106:$Ve,107:$VN},o($Ve1,[2,93]),o($Vh,[2,112]),{28:$VF,40:$Vp,43:64,48:$Vr,49:$Vs,50:61,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,70:348,83:81,92:$VG},{20:[1,349],90:$V21,91:$V31},{41:[1,350]},o($V51,[2,118]),{28:$VF,40:$Vp,43:64,48:$Vr,49:$Vs,50:351,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB},{41:[1,352],59:$VY,60:$VZ,61:$V_,62:$V$,64:$V01},{20:[1,353],59:$VY,60:$VZ,61:$V_,62:$V$,64:$V01},{20:[1,354]},{20:[1,355]},{20:[1,356]},{55:[1,357]},{27:$V91,68:[1,358]},o($Ve1,[2,92]),{20:[1,359],90:$V21,91:$V31},{28:$Vf1,73:360},{7:85,8:90,10:97,11:91,12:87,13:88,14:362,15:84,16:86,17:89,18:92,19:93,21:94,22:$VH,23:$VI,24:$V0,25:$V1,28:$VJ,35:98,36:$V3,37:$V4,38:$V5,39:$V6,40:$VK,43:64,48:$Vr,49:$Vs,50:61,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,70:102,71:$V8,72:13,76:19,77:$V9,83:81,92:$VG,93:$Va,94:$Vb,95:$VL,98:$VM,101:$Vd,106:$Ve,107:$VN},{41:[1,363],59:$VY,60:$VZ,61:$V_,62:$V$,64:$V01},{7:85,8:90,10:97,11:91,12:87,13:88,14:364,15:84,16:86,17:89,18:92,19:93,21:94,22:$VH,23:$VI,24:$V0,25:$V1,28:$VJ,35:98,36:$V3,37:$V4,38:$V5,39:$V6,40:$VK,43:64,48:$Vr,49:$Vs,50:61,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,70:102,71:$V8,72:13,76:19,77:$V9,83:81,92:$VG,93:$Va,94:$Vb,95:$VL,98:$VM,101:$Vd,106:$Ve,107:$VN},o($Vh,[2,89]),o($Vh,[2,87]),o($Vh,[2,82]),o($Vh,[2,90]),{68:[1,365]},{27:[1,366]},{28:$Vf1,73:367},{47:[1,368]},{59:[1,369],60:[1,370]},{7:85,8:90,10:97,11:91,12:87,13:88,15:156,16:86,17:89,18:92,19:93,21:94,22:$VH,23:$VI,24:$V0,25:$V1,28:$VJ,35:98,36:$V3,37:$V4,38:$V5,39:$V6,40:$VK,43:64,48:$Vr,49:$Vs,50:61,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,70:102,71:$V8,72:13,76:19,77:$V9,79:[1,371],83:81,92:$VG,93:$Va,94:$Vb,95:$VL,98:$VM,101:$Vd,106:$Ve,107:$VN},{7:85,8:90,10:97,11:91,12:87,13:88,14:372,15:84,16:86,17:89,18:92,19:93,21:94,22:$VH,23:$VI,24:$V0,25:$V1,28:$VJ,35:98,36:$V3,37:$V4,38:$V5,39:$V6,40:$VK,43:64,48:$Vr,49:$Vs,50:61,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,70:102,71:$V8,72:13,76:19,77:$V9,83:81,92:$VG,93:$Va,94:$Vb,95:$VL,98:$VM,101:$Vd,106:$Ve,107:$VN},o($Vg1,[2,116],{72:13,76:19,50:61,43:64,83:81,7:85,16:86,12:87,13:88,17:89,8:90,11:91,18:92,19:93,21:94,10:97,35:98,70:102,15:156,22:$VH,23:$VI,24:$V0,25:$V1,28:$VJ,36:$V3,37:$V4,38:$V5,39:$V6,40:$VK,48:$Vr,49:$Vs,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,71:$V8,77:$V9,92:$VG,93:$Va,94:$Vb,95:$VL,98:$VM,101:$Vd,106:$Ve,107:$VN}),{67:[1,373]},{67:[1,374]},{47:[1,375]},{78:[1,376]},{59:[1,377]},{60:[1,378]},o($V51,[2,117]),o($Vg1,[2,115],{72:13,76:19,50:61,43:64,83:81,7:85,16:86,12:87,13:88,17:89,8:90,11:91,18:92,19:93,21:94,10:97,35:98,70:102,15:156,22:$VH,23:$VI,24:$V0,25:$V1,28:$VJ,36:$V3,37:$V4,38:$V5,39:$V6,40:$VK,48:$Vr,49:$Vs,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,71:$V8,77:$V9,92:$VG,93:$Va,94:$Vb,95:$VL,98:$VM,101:$Vd,106:$Ve,107:$VN}),{55:[1,379]},{28:$VF,40:$Vp,43:64,48:$Vr,49:$Vs,50:121,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,65:380},{78:[1,381]},{7:85,8:90,10:97,11:91,12:87,13:88,14:382,15:84,16:86,17:89,18:92,19:93,21:94,22:$VH,23:$VI,24:$V0,25:$V1,28:$VJ,35:98,36:$V3,37:$V4,38:$V5,39:$V6,40:$VK,43:64,48:$Vr,49:$Vs,50:61,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,70:102,71:$V8,72:13,76:19,77:$V9,83:81,92:$VG,93:$Va,94:$Vb,95:$VL,98:$VM,101:$Vd,106:$Ve,107:$VN},{47:[2,80]},{47:[2,81]},{68:[1,383]},{27:$V91,68:[1,384]},{7:85,8:90,10:97,11:91,12:87,13:88,14:385,15:84,16:86,17:89,18:92,19:93,21:94,22:$VH,23:$VI,24:$V0,25:$V1,28:$VJ,35:98,36:$V3,37:$V4,38:$V5,39:$V6,40:$VK,43:64,48:$Vr,49:$Vs,50:61,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,70:102,71:$V8,72:13,76:19,77:$V9,83:81,92:$VG,93:$Va,94:$Vb,95:$VL,98:$VM,101:$Vd,106:$Ve,107:$VN},{7:85,8:90,10:97,11:91,12:87,13:88,15:156,16:86,17:89,18:92,19:93,21:94,22:$VH,23:$VI,24:$V0,25:$V1,28:$VJ,35:98,36:$V3,37:$V4,38:$V5,39:$V6,40:$VK,43:64,48:$Vr,49:$Vs,50:61,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,70:102,71:$V8,72:13,76:19,77:$V9,79:[1,386],83:81,92:$VG,93:$Va,94:$Vb,95:$VL,98:$VM,101:$Vd,106:$Ve,107:$VN},{20:[1,387]},{68:[1,388]},{7:85,8:90,10:97,11:91,12:87,13:88,15:156,16:86,17:89,18:92,19:93,21:94,22:$VH,23:$VI,24:$V0,25:$V1,28:$VJ,35:98,36:$V3,37:$V4,38:$V5,39:$V6,40:$VK,43:64,48:$Vr,49:$Vs,50:61,51:$Vt,52:$Vu,54:$Vv,55:$Vw,56:$Vx,57:$Vy,58:$Vz,60:$VA,63:$VB,70:102,71:$V8,72:13,76:19,77:$V9,79:[1,389],83:81,92:$VG,93:$Va,94:$Vb,95:$VL,98:$VM,101:$Vd,106:$Ve,107:$VN},o($V51,[2,114]),o($Vh,[2,83]),{20:[1,390]},o($V51,[2,113]),o($Vh,[2,85])],
defaultActions: {29:[2,1],377:[2,80],378:[2,81]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


    const {TipoDato} = require("../Interprete/expresion")

    // Expresiones
    const Aritmetica = require("../Interprete/Expresiones/aritmetica")
    const Relacional = require("../Interprete/Expresiones/relacional")
    const Dato = require("../Interprete/Expresiones/dato")
    const Negativo = require("../Interprete/Expresiones/negativo")
    const opLogico = require("../Interprete/Expresiones/opLogicos")
    const Negacion = require("../Interprete/Expresiones/negacion")
    const FuncionCout = require("../Interprete/Expresiones/funcioncout")

    // Instrucciones
    const Cout = require("../Interprete/Instrucciones/cout")
    const If = require("../Interprete/Instrucciones/if")
    const ElseIf = require("../Interprete/Instrucciones/elseif")
    const Else = require("../Interprete/Instrucciones/else")
    const While = require("../Interprete/Instrucciones/while")
    const DoWhile = require("../Interprete/Instrucciones/dowhile")
    const Break = require("../Interprete/Instrucciones/break")
    const Declaracion = require("../Interprete/Instrucciones/declaracion")
    const Ternario = require("../Interprete/Instrucciones/ternario")
    
    

    // Operaciones Mayores
    const SentenciaIf = require("../Interprete/OperacionesMayores/sentenciaIf")
    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:return 24; 
break;
case 5:return 25; 
break;
case 6:return 36;
break;
case 7:return 37;
break;
case 8:return 38;
break;
case 9:return 39;
break;
case 10:return 42;
break;
case 11:return 74;
break;
case 12:return 77;
break;
case 13:return 81;
break;
case 14:return 93;
break;
case 15:return 95;
break;
case 16:return 94;
break;
case 17:return 22;
break;
case 18:return 23;
break;
case 19:return 107;
break;
case 20:return 100;
break;
case 21:return 106;
break;
case 22:return 103;
break;
case 23:return 51;
break;
case 24:return 52;
break;
case 25:return 49;
break;
case 26:return 45;
break;
case 27:return 48;
break;
case 28:return 53;
break;
case 29:return 40;
break;
case 30:return 75;
break;
case 31:return 101;
break;
case 32:return 98;
break;
case 33:return 97;
break;
case 34:return 99;
break;
case 35:return 56; 
break;
case 36:return 58; 
break;
case 37:return 57; 
break;
case 38:return 28; 
break;
case 39:return 54; 
break;
case 40:return 55; 
break;
case 41:return 30;
break;
case 42:return 31;
break;
case 43:return 32;
break;
case 44:return 33;
break;
case 45:return 34;
break;
case 46:return 59;
break;
case 47:return 60;
break;
case 48:return 61;
break;
case 49:return 62;
break;
case 50:return 63;
break;
case 51:return 64;
break;
case 52:return 'ENTRADA';
break;
case 53:return 105;
break;
case 54:return 84;
break;
case 55:return 85;
break;
case 56:return 87;
break;
case 57:return 89;
break;
case 58:return 88;
break;
case 59:return 86;
break;
case 60:return 69;
break;
case 61:return 90;
break;
case 62:return 91;
break;
case 63:return 92;
break;
case 64:return 46;
break;
case 65:return 47;
break;
case 66:return 78;
break;
case 67:return 79;
break;
case 68:return 67;
break;
case 69:return 68;
break;
case 70:return 20;
break;
case 71:return 27;
break;
case 72:return 41;
break;
case 73:return 44;
break;
case 74:return 71;
break;
case 75:return 5;
break;
case 76:console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:{COM_MULT})/i,/^(?:{COM_SIMPLE})/i,/^(?:(\/\*[\s\S]*?\*\/))/i,/^(?:(\/\/.*))/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:bool\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:cout\b)/i,/^(?:endl\b)/i,/^(?:toupper\b)/i,/^(?:tolower\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:std\b)/i,/^(?:c_str\b)/i,/^(?:execute\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:(true|false\b))/i,/^(?:('(([^\n\"\\]|\\.)*)'))/i,/^(?:([\"][^\"\n]+[\"]))/i,/^(?:([a-zA-Z_][a-zA-Z0-9_]*))/i,/^(?:([0-9]+\.[0-9]+\b))/i,/^(?:([0-9]+\b))/i,/^(?:\\n)/i,/^(?:\\)/i,/^(?:\\")/i,/^(?:\\t)/i,/^(?:')/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:pow\b)/i,/^(?:%)/i,/^(?:>>)/i,/^(?:<<)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?:,)/i,/^(?::)/i,/^(?:\.)/i,/^(?:\?)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}