/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,20],$V1=[1,21],$V2=[1,22],$V3=[1,29],$V4=[1,30],$V5=[1,31],$V6=[1,32],$V7=[1,33],$V8=[1,35],$V9=[1,25],$Va=[1,26],$Vb=[1,27],$Vc=[1,28],$Vd=[1,19],$Ve=[1,18],$Vf=[1,23],$Vg=[5,26,27,30,38,39,40,41,42,79,94,95,96,99,101,102,107],$Vh=[5,7,8,21,24,25,26,27,30,38,39,40,41,42,43,48,50,51,53,54,56,57,58,59,60,64,67,79,93,94,95,96,98,99,100,101,102,107,108],$Vi=[5,7,8,21,24,25,26,27,30,38,39,40,41,42,43,79,94,95,96,98,99,100,101,102,107,108],$Vj=[29,63,64,65,66,68,72],$Vk=[2,35],$Vl=[1,46],$Vm=[30,49,61],$Vn=[1,62],$Vo=[7,29,72],$Vp=[1,67],$Vq=[1,77],$Vr=[1,82],$Vs=[1,76],$Vt=[1,78],$Vu=[1,79],$Vv=[1,80],$Vw=[1,81],$Vx=[1,83],$Vy=[1,84],$Vz=[1,85],$VA=[1,86],$VB=[1,87],$VC=[1,73],$VD=[1,74],$VE=[1,93],$VF=[1,92],$VG=[1,94],$VH=[1,99],$VI=[1,101],$VJ=[1,113],$VK=[1,115],$VL=[1,116],$VM=[1,119],$VN=[1,147],$VO=[7,29,49,62],$VP=[1,149],$VQ=[1,150],$VR=[1,151],$VS=[1,152],$VT=[1,153],$VU=[7,21,29,43,49,62,63,64,65,66,68,85,86,87,88,89,90,91,92,106],$VV=[2,62],$VW=[1,157],$VX=[1,158],$VY=[7,106],$VZ=[1,167],$V_=[1,168],$V$=[1,169],$V01=[1,170],$V11=[1,171],$V21=[1,172],$V31=[7,21,49,85,86,87,88,89,90,91,92,106],$V41=[1,179],$V51=[1,180],$V61=[7,21,49,91,92],$V71=[7,8,21,24,25,26,27,30,38,39,40,41,42,43,79,94,95,96,98,99,100,102,107,108],$V81=[1,194],$V91=[7,49],$Va1=[1,202],$Vb1=[1,208],$Vc1=[29,49],$Vd1=[7,21,29,43,49,62,63,64,85,86,87,88,89,90,91,92,106],$Ve1=[1,279],$Vf1=[5,7,8,21,24,25,26,27,30,38,39,40,41,42,43,79,82,94,95,96,98,99,100,101,102,107,108],$Vg1=[8,98,100],$Vh1=[29,62];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"entornos":4,"EOF":5,"entorno":6,"PTCOMA":7,"LLAVDER":8,"declaracionVariables":9,"funcionExecute":10,"funciones":11,"comentarios":12,"llamarFunciones":13,"impresionCout":14,"sentenciaIfCompleta":15,"ciclosWhile":16,"cicloFor":17,"switchCase":18,"instrucciones":19,"instruccion":20,"INTERROGACION":21,"ternario":22,"sentenciaReturn":23,"PR_BREAK":24,"PR_CONTINUE":25,"COM_MULT":26,"COM_SIMPLE":27,"identificadores":28,"COMA":29,"ID":30,"secuenciasEscape":31,"SALTO_LINEA":32,"BARRA_INVERTIDA":33,"COMILLA_DOBLE":34,"TABULACION":35,"COMILLA_SIMPLE":36,"tiposVar":37,"PR_INT":38,"PR_DOUBLE":39,"PR_BOOL":40,"PR_CHAR":41,"PR_STD":42,"DOSPUNTOS":43,"PR_STRING":44,"valores":45,"PUNTO":46,"PR_LENGTH":47,"PARIZQ":48,"PARDER":49,"PR_TYPEOF":50,"PR_ROUND":51,"valoresPlus":52,"PR_TOUPPER":53,"PR_TOLOWER":54,"PR_TOSTRING":55,"DECIMAL":56,"ENTERO":57,"BOOLEAN":58,"STRING":59,"CHAR":60,"CORIZQ":61,"CORDER":62,"MAS":63,"MENOS":64,"POR":65,"DIVIDIDO":66,"POTENCIA":67,"MODULO":68,"valoresArreglos":69,"valoresArregloMatrices":70,"arregloDeclaraciones":71,"IGUAL":72,"sentenciaLogica":73,"modificarVariables":74,"VectoresMatrices":75,"PR_NEW":76,"PR_C_STR":77,"sentenciaIf":78,"PR_IF":79,"LLAVIZQ":80,"sentenciaIfElse":81,"PR_ELSE":82,"sentenciaElse":83,"sentenciaRelacional":84,"IGUALES":85,"DIFERENTE":86,"MENOR_QUE":87,"MENOR_IGUAL":88,"MAYOR_QUE":89,"MAYOR_IGUAL":90,"OR":91,"AND":92,"NOT":93,"PR_WHILE":94,"PR_DO":95,"PR_FOR":96,"recursividadCase":97,"PR_CASE":98,"PR_SWITCH":99,"PR_DEFAULT":100,"PR_VOID":101,"PR_EXECUTE":102,"posibilidadesCout":103,"PR_ENDL":104,"funcionCout":105,"SALIDA":106,"PR_COUT":107,"PR_RETURN":108,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"PTCOMA",8:"LLAVDER",21:"INTERROGACION",24:"PR_BREAK",25:"PR_CONTINUE",26:"COM_MULT",27:"COM_SIMPLE",29:"COMA",30:"ID",32:"SALTO_LINEA",33:"BARRA_INVERTIDA",34:"COMILLA_DOBLE",35:"TABULACION",36:"COMILLA_SIMPLE",38:"PR_INT",39:"PR_DOUBLE",40:"PR_BOOL",41:"PR_CHAR",42:"PR_STD",43:"DOSPUNTOS",44:"PR_STRING",46:"PUNTO",47:"PR_LENGTH",48:"PARIZQ",49:"PARDER",50:"PR_TYPEOF",51:"PR_ROUND",53:"PR_TOUPPER",54:"PR_TOLOWER",55:"PR_TOSTRING",56:"DECIMAL",57:"ENTERO",58:"BOOLEAN",59:"STRING",60:"CHAR",61:"CORIZQ",62:"CORDER",63:"MAS",64:"MENOS",65:"POR",66:"DIVIDIDO",67:"POTENCIA",68:"MODULO",72:"IGUAL",76:"PR_NEW",77:"PR_C_STR",79:"PR_IF",80:"LLAVIZQ",82:"PR_ELSE",85:"IGUALES",86:"DIFERENTE",87:"MENOR_QUE",88:"MENOR_IGUAL",89:"MAYOR_QUE",90:"MAYOR_IGUAL",91:"OR",92:"AND",93:"NOT",94:"PR_WHILE",95:"PR_DO",96:"PR_FOR",98:"PR_CASE",99:"PR_SWITCH",100:"PR_DEFAULT",101:"PR_VOID",102:"PR_EXECUTE",104:"PR_ENDL",106:"SALIDA",107:"PR_COUT",108:"PR_RETURN"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[4,2],[4,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[19,2],[19,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,3],[20,1],[20,2],[20,2],[20,1],[12,1],[12,1],[28,3],[28,1],[31,2],[31,2],[31,2],[31,2],[31,2],[31,1],[31,1],[31,1],[31,1],[31,1],[37,1],[37,1],[37,1],[37,1],[37,4],[45,5],[45,4],[45,4],[45,4],[45,4],[45,7],[45,1],[45,1],[45,1],[45,1],[45,1],[45,1],[45,4],[45,7],[52,3],[52,3],[52,2],[52,3],[52,3],[52,6],[52,3],[52,1],[52,3],[69,3],[69,1],[70,5],[70,3],[71,4],[71,2],[9,3],[9,5],[9,8],[9,7],[9,5],[9,8],[9,2],[9,1],[74,3],[74,3],[74,3],[74,4],[74,4],[74,4],[74,4],[74,4],[75,11],[75,16],[75,9],[75,11],[75,7],[75,10],[75,11],[78,7],[81,9],[81,8],[83,4],[15,3],[15,2],[15,2],[15,1],[22,5],[84,3],[84,3],[84,3],[84,3],[84,3],[84,3],[84,1],[73,3],[73,3],[73,2],[73,1],[16,7],[16,9],[17,10],[97,5],[97,4],[18,10],[18,7],[11,8],[11,7],[11,8],[11,7],[13,5],[13,4],[10,6],[10,5],[103,1],[103,2],[103,4],[103,3],[103,1],[105,3],[105,1],[14,4],[23,3],[23,6],[23,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = $$[$0-1]; return this.$; 
break;
case 2: case 17:
this.$ = $$[$0-1]; this.$.push($$[$0]);
break;
case 3: case 18: case 35: case 75:
this.$ = []; this.$.push($$[$0]);
break;
case 4: case 5: case 6:
 console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
case 7: case 9: case 11: case 12: case 13: case 14: case 15: case 16: case 19: case 21: case 22: case 23: case 25: case 26: case 28: case 87:
this.$ = $$[$0];
break;
case 27: case 86:
this.$ = $$[$0-1];
break;
case 29:
this.$ = new Break($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column+1);
break;
case 30:
this.$ = new Continue($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column+1);
break;
case 34: case 74:
this.$ = $$[$0-2]; this.$.push($$[$0]);
break;
case 46:
this.$ = "ENTERO";
break;
case 47:
this.$ = "DECIMAL";
break;
case 48:
this.$ = "BOOL";
break;
case 49:
this.$ = "CHAR";
break;
case 50:
this.$ = "STRING";
break;
case 53: case 54: case 55:
this.$ = new FuncionCout($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column+1);
break;
case 56:
this.$ = new FuncionCout($$[$0-3], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column+1);
break;
case 57:
this.$ = new Dato($$[$0], TipoDato.DECIMAL, _$[$0].first_line, _$[$0].first_column+1); 
break;
case 58:
this.$ = new Dato($$[$0], TipoDato.ENTERO, _$[$0].first_line, _$[$0].first_column+1); 
break;
case 59:
this.$ = new Dato($$[$0], TipoDato.BOOL, _$[$0].first_line, _$[$0].first_column+1); 
break;
case 60:
this.$ = new Dato($$[$0], TipoDato.STRING, _$[$0].first_line, _$[$0].first_column+1); 
break;
case 61:
this.$ = new Dato($$[$0], TipoDato.CHAR, _$[$0].first_line, _$[$0].first_column+1); 
break;
case 62:
this.$ = new Variable($$[$0], null, null, _$[$0].first_line, _$[$0].first_column+1); 
break;
case 63:
this.$ = new Variable($$[$0-3], $$[$0-1], null, _$[$0-3].first_line, _$[$0-3].first_column+1); 
break;
case 64:
this.$ = new Variable($$[$0-6], $$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column+1); 
break;
case 65: case 66: case 68: case 69: case 71:
 this.$ = new Aritmetica($$[$0-2], $$[$0], $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column+1); 
break;
case 67:
 this.$ = new Negativo($$[$0], _$[$0-1].first_line, _$[$0-1].first_column+1);           
break;
case 70:
 this.$ = new Aritmetica($$[$0-3], $$[$0-1], $$[$0-4], _$[$0-5].first_line, _$[$0-5].first_column+1); 
break;
case 72: case 118:
 this.$ = $$[$0]; 
break;
case 73:
 this.$ = $$[$0-1]; 
break;
case 76:
this.$ = $$[$0-4]; this.$.push($$[$0-1]);
break;
case 77:
this.$ = []; this.$.push($$[$0-1]);
break;
case 78:
this.$ = $$[$0-3]; this.$.push(new Declaracion($$[$0-1], $$[$0], null, _$[$0-3].first_line, _$[$0-3].first_column+1));
break;
case 79:
this.$ = []; this.$.push(new Declaracion($$[$0-1], $$[$0], null, _$[$0-1].first_line, _$[$0-1].first_column+1));
break;
case 80:
this.$ = new Declaracion($$[$0-2], $$[$0-1], null, _$[$0-2].first_line, _$[$0-2].first_column+1);
break;
case 81:
this.$ = new Declaracion($$[$0-4], $$[$0-3], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column+1);
break;
case 88: case 89:
this.$ = new ActualizacionFor($$[$0-2], $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column+1);
break;
case 90:
this.$ = new ModificarVar($$[$0-2], $$[$0-1], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column+1);
break;
case 91: case 92: case 93: case 94: case 95:
this.$ = new ModificarVar($$[$0-3], $$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column+1);
break;
case 96:
this.$ = new DeclaracionVec($$[$0-10], $$[$0-9], $$[$0-4], $$[$0-2], _$[$0-10].first_line, _$[$0-10].first_column+1);
break;
case 97:
this.$ = new DeclaracionMatriz($$[$0-15], $$[$0-14], $$[$0-7], $$[$0-5], $$[$0-2], _$[$0-15].first_line, _$[$0-15].first_column+1);
break;
case 98:
this.$ = new DeclaracionVec($$[$0-8], $$[$0-7], null, $$[$0-2], _$[$0-8].first_line, _$[$0-8].first_column+1);
break;
case 99:
this.$ = new DeclaracionMatriz($$[$0-10], $$[$0-9], null, $$[$0-2], null, _$[$0-10].first_line, _$[$0-10].first_column+1);
break;
case 100:
this.$ = new ModificarVar(new Variable($$[$0-6], $$[$0-4], null, _$[$0-6].first_line, _$[$0-6].first_column+1) , $$[$0-2], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column+1);
break;
case 101:
this.$ = new ModificarVar(new Variable($$[$0-9], $$[$0-7], $$[$0-4], _$[$0-9].first_line, _$[$0-9].first_column+1) , $$[$0-2], $$[$0-1], _$[$0-9].first_line, _$[$0-9].first_column+1);
break;
case 103:
this.$ = new If($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column+1)
break;
case 104:
this.$ = $$[$0-8]; this.$.push(new ElseIf($$[$0-4], $$[$0-1], _$[$0-8].first_line, _$[$0-8].first_column+1))
break;
case 105:
this.$ = []; this.$.push(new ElseIf($$[$0-4], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column+1))
break;
case 106:
this.$ = new Else($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column+1)
break;
case 107:
this.$ = new SentenciaIf($$[$0-2], $$[$0-1], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column+1);
break;
case 108:
this.$ = new SentenciaIf($$[$0-1], $$[$0], null, _$[$0-1].first_line, _$[$0-1].first_column+1);
break;
case 109:
this.$ = new SentenciaIf($$[$0-1], null, $$[$0], _$[$0-1].first_line, _$[$0-1].first_column+1);
break;
case 110:
this.$ = new SentenciaIf($$[$0], null, null, _$[$0].first_line, _$[$0].first_column+1);
break;
case 111:
this.$ = new Ternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column+1);
break;
case 112: case 113: case 114: case 115: case 116: case 117:
 this.$ = new Relacional($$[$0-2], $$[$0], $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column+1); 
break;
case 119:
 this.$ = new opLogicos($$[$0-2], $$[$0], $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column+1); 
break;
case 120:
 this.$ = new opLogico($$[$0-2], $$[$0], $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column+1); 
break;
case 121:
 this.$ = new Negacion($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column+1); 
break;
case 123:
 this.$ = new While($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column+1); 
break;
case 124:
 this.$ = new DoWhile($$[$0-2], $$[$0-6], _$[$0-8].first_line, _$[$0-8].first_column+1); 
break;
case 125:
 this.$ = new For($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1], _$[$0-9].first_line, _$[$0-9].first_column+1);
break;
case 126:
this.$ = $$[$0-4]; this.$.push(new Case($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column+1));
break;
case 127:
this.$ = []; this.$.push(new Case($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column+1));
break;
case 128:
this.$ = new Switch($$[$0-7], $$[$0-4], $$[$0-1], _$[$0-9].first_line, _$[$0-9].first_column+1);
break;
case 129:
this.$ = new Switch($$[$0-4], $$[$0-1], null, _$[$0-6].first_line, _$[$0-6].first_column+1);
break;
case 130:
this.$ = new DeclararFuncion($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1], null, _$[$0-7].first_line, _$[$0-7].first_column+1);
break;
case 131:
this.$ = new DeclararFuncion($$[$0-6], $$[$0-5], null, $$[$0-1], null, _$[$0-6].first_line, _$[$0-6].first_column+1);
break;
case 132:
this.$ = new DeclararFuncion(null, $$[$0-6], $$[$0-4], $$[$0-2], null, _$[$0-7].first_line, _$[$0-7].first_column+1);
break;
case 133:
this.$ = new DeclararFuncion(null, $$[$0-5], null, $$[$0-1], null, _$[$0-6].first_line, _$[$0-6].first_column+1);
break;
case 134:
this.$ = new LlamarFuncion($$[$0-4], $$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column+1);
break;
case 135:
this.$ = new LlamarFuncion($$[$0-3], null, _$[$0-3].first_line, _$[$0-3].first_column+1);
break;
case 138:
 this.$ = $$[$0];
break;
case 139:
 this.$ = Negacion($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column+1); 
break;
case 140:
 this.$ = new LlamarFuncion($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column+1);
break;
case 141:
 this.$ = new LlamarFuncion($$[$0-2], null, _$[$0-2].first_line, _$[$0-2].first_column+1);
break;
case 143:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 144:
 this.$ = []; this.$.push($$[$0]); 
break;
case 145:
 this.$ = new Cout($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column+1);
break;
case 146:
 this.$ = new Return($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column+1);
break;
case 147:
 this.$ = new Return(new LlamarFuncion($$[$0-4], $$[$0-2], _$[$0-5].first_line, _$[$0-5].first_column+1), _$[$0-5].first_line, _$[$0-5].first_column+1);
break;
case 148:
 this.$ = new Return(null, _$[$0-1].first_line, _$[$0-1].first_column+1);
break;
}
},
table: [{2:[1,4],3:1,4:2,6:3,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,26:$V0,27:$V1,28:34,30:$V2,37:15,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,74:16,75:17,78:24,79:$V8,94:$V9,95:$Va,96:$Vb,99:$Vc,101:$Vd,102:$Ve,107:$Vf},{1:[3]},{5:[1,36],6:37,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,26:$V0,27:$V1,28:34,30:$V2,37:15,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,74:16,75:17,78:24,79:$V8,94:$V9,95:$Va,96:$Vb,99:$Vc,101:$Vd,102:$Ve,107:$Vf},o($Vg,[2,3]),o($Vg,[2,4],{7:[1,38],8:[1,39]}),o($Vg,[2,7]),o($Vg,[2,8]),o($Vg,[2,9]),o($Vg,[2,10]),o($Vg,[2,11]),o($Vg,[2,12]),o($Vg,[2,13]),o($Vg,[2,14]),o($Vg,[2,15]),o($Vg,[2,16]),{28:40,30:[1,41]},{7:[1,42]},o($Vh,[2,87]),{30:[1,43]},{30:[1,44]},o($Vi,[2,32]),o($Vi,[2,33]),o($Vj,$Vk,{48:[1,45],61:$Vl}),{106:[1,47]},o($Vi,[2,110],{81:48,83:49,82:[1,50]}),{48:[1,51]},{80:[1,52]},{48:[1,53]},{48:[1,54]},o($Vm,[2,46]),o($Vm,[2,47]),o($Vm,[2,48]),o($Vm,[2,49]),{43:[1,55]},{29:$Vn,63:[1,56],64:[1,57],65:[1,59],66:[1,60],68:[1,61],72:[1,58]},{48:[1,63]},{1:[2,1]},o($Vg,[2,2]),o($Vg,[2,5]),o($Vg,[2,6]),{7:[1,64],29:$Vn,72:[1,65]},o($Vo,$Vk,{48:[1,66],61:$Vp}),o($Vh,[2,86]),{48:[1,68]},{48:[1,69]},{30:$Vq,42:$Vr,45:75,48:$Vs,49:[1,71],50:$Vt,51:$Vu,52:72,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD,69:70},{30:$Vq,42:$Vr,45:75,48:$Vs,50:$Vt,51:$Vu,52:88,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD},{30:$VE,42:$Vr,45:75,48:$Vs,50:$Vt,51:$Vu,52:95,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD,84:91,93:$VF,103:90,104:$VG,105:89},o($Vi,[2,108],{83:96,82:[1,97]}),o($Vi,[2,109]),{79:[1,98],80:$VH},{30:$Vq,42:$Vr,45:75,48:$Vs,50:$Vt,51:$Vu,52:95,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD,73:100,84:102,93:$VI},{9:105,10:110,12:117,13:106,14:111,15:107,16:108,17:109,18:112,19:103,20:104,21:$VJ,23:114,24:$VK,25:$VL,26:$V0,27:$V1,28:34,30:$V2,37:118,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,74:16,75:17,78:24,79:$V8,94:$V9,95:$Va,96:$Vb,99:$Vc,102:$Ve,107:$Vf,108:$VM},{9:120,28:34,30:[1,121],37:118,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,74:16,75:17},{30:$Vq,42:$Vr,45:75,48:$Vs,50:$Vt,51:$Vu,52:122,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD},{43:[1,123]},{63:[1,124],72:[1,125]},{64:[1,126],72:[1,127]},{30:$Vq,42:$Vr,45:75,48:$Vs,50:$Vt,51:$Vu,52:95,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD,73:128,84:102,93:$VI},{72:[1,129]},{72:[1,130]},{72:[1,131]},{30:[1,132]},{30:$Vq,42:$Vr,45:75,48:$Vs,50:$Vt,51:$Vu,52:95,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD,73:133,84:102,93:$VI},o($Vh,[2,80]),{22:136,30:[1,135],42:$Vr,45:75,48:[1,137],50:$Vt,51:$Vu,52:95,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD,73:134,84:102,93:$VI},{37:140,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,49:[1,139],71:138},{62:[1,141]},{30:$Vq,42:$Vr,45:75,48:$Vs,49:[1,143],50:$Vt,51:$Vu,52:72,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD,69:142},{37:140,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,49:[1,145],71:144},{29:$VN,49:[1,146]},{7:[1,148]},o($VO,[2,75],{63:$VP,64:$VQ,65:$VR,66:$VS,68:$VT}),{30:$Vq,42:$Vr,45:75,48:$Vs,50:$Vt,51:$Vu,52:154,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD},{48:[1,155]},o($VU,[2,72]),{30:$Vq,42:$Vr,45:75,48:$Vs,50:$Vt,51:$Vu,52:156,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD},o($VU,$VV,{46:$VW,61:$VX}),{48:[1,159]},{48:[1,160]},{48:[1,161]},{48:[1,162]},{43:[1,163]},o($VU,[2,57]),o($VU,[2,58]),o($VU,[2,59]),o($VU,[2,60]),o($VU,[2,61]),{62:[1,164],63:$VP,64:$VQ,65:$VR,66:$VS,68:$VT},{7:[1,165],106:[1,166]},o($VY,[2,144]),o($VY,[2,138],{85:$VZ,86:$V_,87:$V$,88:$V01,89:$V11,90:$V21}),{58:[1,173]},o([7,63,64,65,66,68,85,86,87,88,89,90,106],$VV,{46:$VW,48:[1,174],61:$VX}),o($VY,[2,142]),o($V31,[2,118],{63:$VP,64:$VQ,65:$VR,66:$VS,68:$VT}),o($Vi,[2,107]),{79:[1,175],80:$VH},{48:[1,176]},{9:105,10:110,12:117,13:106,14:111,15:107,16:108,17:109,18:112,19:177,20:104,21:$VJ,23:114,24:$VK,25:$VL,26:$V0,27:$V1,28:34,30:$V2,37:118,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,74:16,75:17,78:24,79:$V8,94:$V9,95:$Va,96:$Vb,99:$Vc,102:$Ve,107:$Vf,108:$VM},{49:[1,178],91:$V41,92:$V51},{30:$Vq,42:$Vr,45:75,48:$Vs,50:$Vt,51:$Vu,52:95,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD,73:181,84:102,93:$VI},o($V61,[2,122],{85:$VZ,86:$V_,87:$V$,88:$V01,89:$V11,90:$V21}),{8:[1,182],9:105,10:110,12:117,13:106,14:111,15:107,16:108,17:109,18:112,20:183,21:$VJ,23:114,24:$VK,25:$VL,26:$V0,27:$V1,28:34,30:$V2,37:118,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,74:16,75:17,78:24,79:$V8,94:$V9,95:$Va,96:$Vb,99:$Vc,102:$Ve,107:$Vf,108:$VM},o($V71,[2,18]),o($V71,[2,19]),o($V71,[2,20]),o($V71,[2,21]),o($V71,[2,22]),o($V71,[2,23]),o($V71,[2,24]),o($V71,[2,25]),o($V71,[2,26]),{22:184,30:$Vq,42:$Vr,45:75,48:$Vs,50:$Vt,51:$Vu,52:95,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD,73:185,84:102,93:$VI},o($V71,[2,28]),{7:[1,186]},{7:[1,187]},o($V71,[2,31]),{28:40,30:[1,188]},{7:[1,191],30:[1,190],42:$Vr,45:75,48:$Vs,50:$Vt,51:$Vu,52:72,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD,69:189},{30:$Vq,42:$Vr,45:75,48:$Vs,50:$Vt,51:$Vu,52:95,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD,73:192,84:102,93:$VI},o($Vj,$Vk,{61:$Vl}),{49:[1,193],63:$VP,64:$VQ,65:$VR,66:$VS,68:$VT},{44:$V81},o($V91,[2,88]),{30:$Vq,42:$Vr,45:75,48:$Vs,50:$Vt,51:$Vu,52:95,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD,73:195,84:102,93:$VI},o($V91,[2,89]),{30:$Vq,42:$Vr,45:75,48:$Vs,50:$Vt,51:$Vu,52:196,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD},o($V91,[2,90],{91:$V41,92:$V51}),{30:$Vq,42:$Vr,45:75,48:$Vs,50:$Vt,51:$Vu,52:95,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD,73:197,84:102,93:$VI},{30:$Vq,42:$Vr,45:75,48:$Vs,50:$Vt,51:$Vu,52:95,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD,73:198,84:102,93:$VI},{30:$Vq,42:$Vr,45:75,48:$Vs,50:$Vt,51:$Vu,52:95,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD,73:199,84:102,93:$VI},o([7,29,63,64,65,66,68,72],[2,34]),{49:[1,200],91:$V41,92:$V51},{7:[1,201],21:$Va1,91:$V41,92:$V51},o([7,21,63,64,65,66,68,85,86,87,88,89,90,91,92],$VV,{46:$VW,48:[1,203],61:$VX}),{7:[1,204]},{30:$Vq,37:205,38:$V3,39:$V4,40:$V5,41:$V6,42:[1,206],45:75,48:$Vs,50:$Vt,51:$Vu,52:156,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD},{29:$Vb1,49:[1,207]},{80:[1,209]},{30:[1,210]},{61:[1,212],72:[1,211]},{29:$VN,49:[1,213]},{7:[1,214]},{29:$Vb1,49:[1,215]},{80:[1,216]},{7:[1,217]},{30:$Vq,42:$Vr,45:75,48:$Vs,50:$Vt,51:$Vu,52:218,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD},o($Vi,[2,135]),{30:$Vq,42:$Vr,45:75,48:$Vs,50:$Vt,51:$Vu,52:219,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD},{30:$Vq,42:$Vr,45:75,48:$Vs,50:$Vt,51:$Vu,52:220,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD},{30:$Vq,42:$Vr,45:75,48:$Vs,50:$Vt,51:$Vu,52:221,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD},{30:$Vq,42:$Vr,45:75,48:$Vs,50:$Vt,51:$Vu,52:222,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD},{30:$Vq,42:$Vr,45:75,48:$Vs,50:$Vt,51:$Vu,52:223,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD},o($VU,[2,67]),{30:$Vq,42:$Vr,45:75,48:$Vs,50:$Vt,51:$Vu,52:224,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD},{49:[1,225],63:$VP,64:$VQ,65:$VR,66:$VS,68:$VT},{47:[1,226]},{30:$Vq,42:$Vr,45:75,48:$Vs,50:$Vt,51:$Vu,52:227,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD},{30:$Vq,42:$Vr,45:228,50:$Vt,51:$Vu,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB},{30:$Vq,42:$Vr,45:75,48:$Vs,50:$Vt,51:$Vu,52:229,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD},{30:$Vq,42:$Vr,45:75,48:$Vs,50:$Vt,51:$Vu,52:230,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD},{30:$Vq,42:$Vr,45:75,48:$Vs,50:$Vt,51:$Vu,52:231,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD},{43:[1,232]},{61:[1,234],72:[1,233]},o($Vi,[2,145]),{30:$VE,42:$Vr,45:75,48:$Vs,50:$Vt,51:$Vu,52:95,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD,84:91,93:$VF,103:235,104:$VG},{30:$Vq,42:$Vr,45:75,48:$Vs,50:$Vt,51:$Vu,52:95,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD,84:236},{30:$Vq,42:$Vr,45:75,48:$Vs,50:$Vt,51:$Vu,52:95,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD,84:237},{30:$Vq,42:$Vr,45:75,48:$Vs,50:$Vt,51:$Vu,52:95,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD,84:238},{30:$Vq,42:$Vr,45:75,48:$Vs,50:$Vt,51:$Vu,52:95,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD,84:239},{30:$Vq,42:$Vr,45:75,48:$Vs,50:$Vt,51:$Vu,52:95,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD,84:240},{30:$Vq,42:$Vr,45:75,48:$Vs,50:$Vt,51:$Vu,52:95,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD,84:241},o($VY,[2,139]),{30:$Vq,42:$Vr,45:75,48:$Vs,49:[1,243],50:$Vt,51:$Vu,52:72,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD,69:242},{48:[1,244]},{30:$Vq,42:$Vr,45:75,48:$Vs,50:$Vt,51:$Vu,52:95,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD,73:245,84:102,93:$VI},{8:[1,246],9:105,10:110,12:117,13:106,14:111,15:107,16:108,17:109,18:112,20:183,21:$VJ,23:114,24:$VK,25:$VL,26:$V0,27:$V1,28:34,30:$V2,37:118,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,74:16,75:17,78:24,79:$V8,94:$V9,95:$Va,96:$Vb,99:$Vc,102:$Ve,107:$Vf,108:$VM},{80:[1,247]},{30:$Vq,42:$Vr,45:75,48:$Vs,50:$Vt,51:$Vu,52:95,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD,73:248,84:102,93:$VI},{30:$Vq,42:$Vr,45:75,48:$Vs,50:$Vt,51:$Vu,52:95,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD,73:249,84:102,93:$VI},o($V61,[2,121]),{94:[1,250]},o($V71,[2,17]),{7:[1,251]},{21:$Va1,91:$V41,92:$V51},o($V71,[2,29]),o($V71,[2,30]),o($Vo,$Vk,{61:$Vp}),{7:[1,252],29:$VN},o([7,29,63,64,65,66,68],$VV,{46:$VW,48:[1,253],61:$VX}),o($V71,[2,148]),{7:[1,254],91:$V41,92:$V51},{80:[1,255]},o($Vm,[2,50]),o($V91,[2,91],{91:$V41,92:$V51}),o($V91,[2,92],{63:$VP,64:$VQ,65:$VR,66:$VS,68:$VT}),o($V91,[2,93],{91:$V41,92:$V51}),o($V91,[2,94],{91:$V41,92:$V51}),o($V91,[2,95],{91:$V41,92:$V51}),{80:[1,256]},o($Vh,[2,81]),{9:105,10:110,12:117,13:106,14:111,15:107,16:108,17:109,18:112,19:257,20:104,21:$VJ,23:114,24:$VK,25:$VL,26:$V0,27:$V1,28:34,30:$V2,37:118,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,74:16,75:17,78:24,79:$V8,94:$V9,95:$Va,96:$Vb,99:$Vc,102:$Ve,107:$Vf,108:$VM},{30:$Vq,42:$Vr,45:75,48:$Vs,49:[1,259],50:$Vt,51:$Vu,52:72,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD,69:258},o($Vh,[2,84]),{49:[1,260]},{43:[1,261]},{80:[1,262]},{37:263,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7},{9:105,10:110,12:117,13:106,14:111,15:107,16:108,17:109,18:112,19:264,20:104,21:$VJ,23:114,24:$VK,25:$VL,26:$V0,27:$V1,28:34,30:$V2,37:118,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,74:16,75:17,78:24,79:$V8,94:$V9,95:$Va,96:$Vb,99:$Vc,102:$Ve,107:$Vf,108:$VM},o($Vc1,[2,79]),{30:[1,267],61:[1,266],76:[1,265]},{62:[1,268]},{7:[1,269]},o($Vi,[2,137]),{80:[1,270]},{9:105,10:110,12:117,13:106,14:111,15:107,16:108,17:109,18:112,19:271,20:104,21:$VJ,23:114,24:$VK,25:$VL,26:$V0,27:$V1,28:34,30:$V2,37:118,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,74:16,75:17,78:24,79:$V8,94:$V9,95:$Va,96:$Vb,99:$Vc,102:$Ve,107:$Vf,108:$VM},o($Vi,[2,134]),o($VO,[2,74],{63:$VP,64:$VQ,65:$VR,66:$VS,68:$VT}),o($Vd1,[2,65],{65:$VR,66:$VS,68:$VT}),o($Vd1,[2,66],{65:$VR,66:$VS,68:$VT}),o($VU,[2,68]),o($VU,[2,69]),o($VU,[2,71]),{29:[1,272],63:$VP,64:$VQ,65:$VR,66:$VS,68:$VT},o($VU,[2,73]),{48:[1,273]},{62:[1,274],63:$VP,64:$VQ,65:$VR,66:$VS,68:$VT},{49:[1,275]},{49:[1,276],63:$VP,64:$VQ,65:$VR,66:$VS,68:$VT},{49:[1,277],63:$VP,64:$VQ,65:$VR,66:$VS,68:$VT},{49:[1,278],63:$VP,64:$VQ,65:$VR,66:$VS,68:$VT},{55:$Ve1},{30:$Vq,42:$Vr,45:75,48:$Vs,50:$Vt,51:$Vu,52:280,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD},{30:$Vq,42:$Vr,45:75,48:$Vs,50:$Vt,51:$Vu,52:281,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD},o($VY,[2,143]),o($V31,[2,112]),o($V31,[2,113]),o($V31,[2,114]),o($V31,[2,115]),o($V31,[2,116]),o($V31,[2,117]),{29:$VN,49:[1,282]},o($VY,[2,141]),{30:$Vq,42:$Vr,45:75,48:$Vs,50:$Vt,51:$Vu,52:95,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD,73:283,84:102,93:$VI},{49:[1,284],91:$V41,92:$V51},o($Vi,[2,106]),{9:105,10:110,12:117,13:106,14:111,15:107,16:108,17:109,18:112,19:285,20:104,21:$VJ,23:114,24:$VK,25:$VL,26:$V0,27:$V1,28:34,30:$V2,37:118,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,74:16,75:17,78:24,79:$V8,94:$V9,95:$Va,96:$Vb,99:$Vc,102:$Ve,107:$Vf,108:$VM},o([7,21,49,91],[2,119],{92:$V51}),o($V61,[2,120]),{48:[1,286]},o($V71,[2,27]),o($V71,[2,146]),{30:$Vq,42:$Vr,45:75,48:$Vs,50:$Vt,51:$Vu,52:72,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD,69:287},{28:34,30:[1,289],74:288},{97:290,98:[1,291]},{9:105,10:110,12:117,13:106,14:111,15:107,16:108,17:109,18:112,19:292,20:104,21:$VJ,23:114,24:$VK,25:$VL,26:$V0,27:$V1,28:34,30:$V2,37:118,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,74:16,75:17,78:24,79:$V8,94:$V9,95:$Va,96:$Vb,99:$Vc,102:$Ve,107:$Vf,108:$VM},{9:105,10:110,12:117,13:106,14:111,15:107,16:108,17:109,18:112,20:183,21:$VJ,23:114,24:$VK,25:$VL,26:$V0,27:$V1,28:34,30:$V2,37:118,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:[1,293],74:16,75:17,78:24,79:$V8,94:$V9,95:$Va,96:$Vb,99:$Vc,102:$Ve,107:$Vf,108:$VM},{29:$VN,49:[1,294]},{7:[1,295]},{30:$Vq,42:$Vr,45:75,48:$Vs,50:$Vt,51:$Vu,52:296,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD},{43:[1,297]},{9:105,10:110,12:117,13:106,14:111,15:107,16:108,17:109,18:112,19:298,20:104,21:$VJ,23:114,24:$VK,25:$VL,26:$V0,27:$V1,28:34,30:$V2,37:118,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,74:16,75:17,78:24,79:$V8,94:$V9,95:$Va,96:$Vb,99:$Vc,102:$Ve,107:$Vf,108:$VM},{30:[1,299]},{8:[1,300],9:105,10:110,12:117,13:106,14:111,15:107,16:108,17:109,18:112,20:183,21:$VJ,23:114,24:$VK,25:$VL,26:$V0,27:$V1,28:34,30:$V2,37:118,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,74:16,75:17,78:24,79:$V8,94:$V9,95:$Va,96:$Vb,99:$Vc,102:$Ve,107:$Vf,108:$VM},{37:301,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7},{30:$Vq,42:$Vr,45:75,48:$Vs,50:$Vt,51:$Vu,52:72,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD,69:302},{46:[1,303]},{72:[1,304]},o($Vi,[2,136]),{9:105,10:110,12:117,13:106,14:111,15:107,16:108,17:109,18:112,19:305,20:104,21:$VJ,23:114,24:$VK,25:$VL,26:$V0,27:$V1,28:34,30:$V2,37:118,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,74:16,75:17,78:24,79:$V8,94:$V9,95:$Va,96:$Vb,99:$Vc,102:$Ve,107:$Vf,108:$VM},{8:[1,306],9:105,10:110,12:117,13:106,14:111,15:107,16:108,17:109,18:112,20:183,21:$VJ,23:114,24:$VK,25:$VL,26:$V0,27:$V1,28:34,30:$V2,37:118,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,74:16,75:17,78:24,79:$V8,94:$V9,95:$Va,96:$Vb,99:$Vc,102:$Ve,107:$Vf,108:$VM},{30:$Vq,42:$Vr,45:75,48:$Vs,50:$Vt,51:$Vu,52:307,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD},{49:[1,308]},o($VU,[2,63],{61:[1,309]}),o($VU,[2,52]),o($VU,[2,53]),o($VU,[2,54]),o($VU,[2,55]),{48:[1,310]},{7:[1,311],63:$VP,64:$VQ,65:$VR,66:$VS,68:$VT},{62:[1,312],63:$VP,64:$VQ,65:$VR,66:$VS,68:$VT},o($VY,[2,140]),{49:[1,313],91:$V41,92:$V51},{80:[1,314]},{8:[1,315],9:105,10:110,12:117,13:106,14:111,15:107,16:108,17:109,18:112,20:183,21:$VJ,23:114,24:$VK,25:$VL,26:$V0,27:$V1,28:34,30:$V2,37:118,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,74:16,75:17,78:24,79:$V8,94:$V9,95:$Va,96:$Vb,99:$Vc,102:$Ve,107:$Vf,108:$VM},{30:$Vq,42:$Vr,45:75,48:$Vs,50:$Vt,51:$Vu,52:95,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD,73:316,84:102,93:$VI},{29:$VN,49:[1,317]},{49:[1,318]},o($Vj,$Vk),{8:[1,320],98:[1,321],100:[1,319]},{30:$Vq,42:$Vr,45:75,48:$Vs,50:$Vt,51:$Vu,52:322,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD},{8:[1,323],9:105,10:110,12:117,13:106,14:111,15:107,16:108,17:109,18:112,20:183,21:$VJ,23:114,24:$VK,25:$VL,26:$V0,27:$V1,28:34,30:$V2,37:118,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,74:16,75:17,78:24,79:$V8,94:$V9,95:$Va,96:$Vb,99:$Vc,102:$Ve,107:$Vf,108:$VM},{9:105,10:110,12:117,13:106,14:111,15:107,16:108,17:109,18:112,19:324,20:104,21:$VJ,23:114,24:$VK,25:$VL,26:$V0,27:$V1,28:34,30:$V2,37:118,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,74:16,75:17,78:24,79:$V8,94:$V9,95:$Va,96:$Vb,99:$Vc,102:$Ve,107:$Vf,108:$VM},{7:[1,325]},o($Vh,[2,83]),{7:[1,326],63:$VP,64:$VQ,65:$VR,66:$VS,68:$VT},{44:$V81,55:$Ve1},{8:[1,327],9:105,10:110,12:117,13:106,14:111,15:107,16:108,17:109,18:112,20:183,21:$VJ,23:114,24:$VK,25:$VL,26:$V0,27:$V1,28:34,30:$V2,37:118,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,74:16,75:17,78:24,79:$V8,94:$V9,95:$Va,96:$Vb,99:$Vc,102:$Ve,107:$Vf,108:$VM},o($Vc1,[2,78]),o($Vg,[2,131]),{61:[1,328]},{29:$VN,62:[1,329]},{77:[1,330]},{61:[1,332],76:[1,331]},{8:[1,333],9:105,10:110,12:117,13:106,14:111,15:107,16:108,17:109,18:112,20:183,21:$VJ,23:114,24:$VK,25:$VL,26:$V0,27:$V1,28:34,30:$V2,37:118,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,74:16,75:17,78:24,79:$V8,94:$V9,95:$Va,96:$Vb,99:$Vc,102:$Ve,107:$Vf,108:$VM},o($Vg,[2,133]),{49:[1,334],63:$VP,64:$VQ,65:$VR,66:$VS,68:$VT},o($VU,[2,51]),{30:$Vq,42:$Vr,45:75,48:$Vs,50:$Vt,51:$Vu,52:335,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD},{30:$Vq,42:$Vr,45:75,48:$Vs,50:$Vt,51:$Vu,52:336,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD},o($Vh,[2,100]),{72:[1,337]},{80:[1,338]},{9:105,10:110,12:117,13:106,14:111,15:107,16:108,17:109,18:112,19:339,20:104,21:$VJ,23:114,24:$VK,25:$VL,26:$V0,27:$V1,28:34,30:$V2,37:118,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,74:16,75:17,78:24,79:$V8,94:$V9,95:$Va,96:$Vb,99:$Vc,102:$Ve,107:$Vf,108:$VM},o($Vi,[2,123]),{49:[1,340],91:$V41,92:$V51},{7:[1,341]},{80:[1,342]},{43:[1,343]},o($Vi,[2,129]),{30:$Vq,42:$Vr,45:75,48:$Vs,50:$Vt,51:$Vu,52:344,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD},{43:[1,345],63:$VP,64:$VQ,65:$VR,66:$VS,68:$VT},o($Vf1,[2,103]),{7:[2,111],9:105,10:110,12:117,13:106,14:111,15:107,16:108,17:109,18:112,20:183,21:$VJ,23:114,24:$VK,25:$VL,26:$V0,27:$V1,28:34,30:$V2,37:118,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,74:16,75:17,78:24,79:$V8,94:$V9,95:$Va,96:$Vb,99:$Vc,102:$Ve,107:$Vf,108:$VM},o($Vh,[2,82]),o($Vh,[2,85]),o($Vg,[2,130]),{30:$Vq,42:$Vr,45:75,48:$Vs,50:$Vt,51:$Vu,52:346,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD},{7:[1,347]},{48:[1,348]},{37:349,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7},{61:[1,351],70:350},o($Vg,[2,132]),o($VU,[2,70]),{62:[1,352],63:$VP,64:$VQ,65:$VR,66:$VS,68:$VT},{49:[1,353],63:$VP,64:$VQ,65:$VR,66:$VS,68:$VT},{30:$Vq,42:$Vr,45:75,48:$Vs,50:$Vt,51:$Vu,52:354,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD},{9:105,10:110,12:117,13:106,14:111,15:107,16:108,17:109,18:112,19:355,20:104,21:$VJ,23:114,24:$VK,25:$VL,26:$V0,27:$V1,28:34,30:$V2,37:118,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,74:16,75:17,78:24,79:$V8,94:$V9,95:$Va,96:$Vb,99:$Vc,102:$Ve,107:$Vf,108:$VM},{8:[1,356],9:105,10:110,12:117,13:106,14:111,15:107,16:108,17:109,18:112,20:183,21:$VJ,23:114,24:$VK,25:$VL,26:$V0,27:$V1,28:34,30:$V2,37:118,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,74:16,75:17,78:24,79:$V8,94:$V9,95:$Va,96:$Vb,99:$Vc,102:$Ve,107:$Vf,108:$VM},{7:[1,357]},o($V71,[2,147]),{9:105,10:110,12:117,13:106,14:111,15:107,16:108,17:109,18:112,19:358,20:104,21:$VJ,23:114,24:$VK,25:$VL,26:$V0,27:$V1,28:34,30:$V2,37:118,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,74:16,75:17,78:24,79:$V8,94:$V9,95:$Va,96:$Vb,99:$Vc,102:$Ve,107:$Vf,108:$VM},{9:105,10:110,12:117,13:106,14:111,15:107,16:108,17:109,18:112,19:359,20:104,21:$VJ,23:114,24:$VK,25:$VL,26:$V0,27:$V1,28:34,30:$V2,37:118,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,74:16,75:17,78:24,79:$V8,94:$V9,95:$Va,96:$Vb,99:$Vc,102:$Ve,107:$Vf,108:$VM},{43:[1,360],63:$VP,64:$VQ,65:$VR,66:$VS,68:$VT},{9:105,10:110,12:117,13:106,14:111,15:107,16:108,17:109,18:112,19:361,20:104,21:$VJ,23:114,24:$VK,25:$VL,26:$V0,27:$V1,28:34,30:$V2,37:118,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,74:16,75:17,78:24,79:$V8,94:$V9,95:$Va,96:$Vb,99:$Vc,102:$Ve,107:$Vf,108:$VM},{62:[1,362],63:$VP,64:$VQ,65:$VR,66:$VS,68:$VT},o($Vh,[2,98]),{49:[1,363]},{61:[1,364]},{29:[1,366],62:[1,365]},{30:$Vq,42:$Vr,45:75,48:$Vs,50:$Vt,51:$Vu,52:72,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD,69:367},o($VU,[2,64]),o($VU,[2,56]),{7:[1,368],63:$VP,64:$VQ,65:$VR,66:$VS,68:$VT},{8:[1,369],9:105,10:110,12:117,13:106,14:111,15:107,16:108,17:109,18:112,20:183,21:$VJ,23:114,24:$VK,25:$VL,26:$V0,27:$V1,28:34,30:$V2,37:118,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,74:16,75:17,78:24,79:$V8,94:$V9,95:$Va,96:$Vb,99:$Vc,102:$Ve,107:$Vf,108:$VM},o($Vf1,[2,105]),o($Vi,[2,124]),{8:[1,370],9:105,10:110,12:117,13:106,14:111,15:107,16:108,17:109,18:112,20:183,21:$VJ,23:114,24:$VK,25:$VL,26:$V0,27:$V1,28:34,30:$V2,37:118,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,74:16,75:17,78:24,79:$V8,94:$V9,95:$Va,96:$Vb,99:$Vc,102:$Ve,107:$Vf,108:$VM},{8:[1,371],9:105,10:110,12:117,13:106,14:111,15:107,16:108,17:109,18:112,20:183,21:$VJ,23:114,24:$VK,25:$VL,26:$V0,27:$V1,28:34,30:$V2,37:118,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,74:16,75:17,78:24,79:$V8,94:$V9,95:$Va,96:$Vb,99:$Vc,102:$Ve,107:$Vf,108:$VM},{9:105,10:110,12:117,13:106,14:111,15:107,16:108,17:109,18:112,19:372,20:104,21:$VJ,23:114,24:$VK,25:$VL,26:$V0,27:$V1,28:34,30:$V2,37:118,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,74:16,75:17,78:24,79:$V8,94:$V9,95:$Va,96:$Vb,99:$Vc,102:$Ve,107:$Vf,108:$VM},o($Vg1,[2,127],{74:16,75:17,78:24,28:34,9:105,13:106,15:107,16:108,17:109,10:110,14:111,18:112,23:114,12:117,37:118,20:183,21:$VJ,24:$VK,25:$VL,26:$V0,27:$V1,30:$V2,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,79:$V8,94:$V9,95:$Va,96:$Vb,99:$Vc,102:$Ve,107:$Vf,108:$VM}),{7:[1,373]},{7:[1,374]},{30:$Vq,42:$Vr,45:75,48:$Vs,50:$Vt,51:$Vu,52:375,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD},{7:[1,376]},{61:[1,377]},{29:$VN,62:[1,378]},o($Vh,[2,101]),o($Vf1,[2,104]),o($Vi,[2,125]),o($Vi,[2,128]),o($Vg1,[2,126],{74:16,75:17,78:24,28:34,9:105,13:106,15:107,16:108,17:109,10:110,14:111,18:112,23:114,12:117,37:118,20:183,21:$VJ,24:$VK,25:$VL,26:$V0,27:$V1,30:$V2,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,79:$V8,94:$V9,95:$Va,96:$Vb,99:$Vc,102:$Ve,107:$Vf,108:$VM}),o($Vh,[2,96]),o($Vh,[2,102]),{62:[1,379],63:$VP,64:$VQ,65:$VR,66:$VS,68:$VT},o($Vh,[2,99]),{30:$Vq,42:$Vr,45:75,48:$Vs,50:$Vt,51:$Vu,52:72,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD,69:380},o($Vh1,[2,77]),{61:[1,381]},{29:$VN,62:[1,382]},{30:$Vq,42:$Vr,45:75,48:$Vs,50:$Vt,51:$Vu,52:383,53:$Vv,54:$Vw,56:$Vx,57:$Vy,58:$Vz,59:$VA,60:$VB,64:$VC,67:$VD},o($Vh1,[2,76]),{62:[1,384],63:$VP,64:$VQ,65:$VR,66:$VS,68:$VT},{7:[1,385]},o($Vh,[2,97])],
defaultActions: {36:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};


    const {TipoDato} = require("../Interprete/expresion")

    // Expresiones
    const Aritmetica = require("../Interprete/Expresiones/aritmetica")
    const Relacional = require("../Interprete/Expresiones/relacional")
    const Dato = require("../Interprete/Expresiones/dato")
    const Negativo = require("../Interprete/Expresiones/negativo")
    const opLogico = require("../Interprete/Expresiones/opLogicos")
    const Negacion = require("../Interprete/Expresiones/negacion")
    const FuncionCout = require("../Interprete/Expresiones/funcioncout")
    const Variable = require("../Interprete/Expresiones/variable")

    // Instrucciones
    const Cout = require("../Interprete/Instrucciones/cout")
    const If = require("../Interprete/Instrucciones/if")
    const ElseIf = require("../Interprete/Instrucciones/elseif")
    const Else = require("../Interprete/Instrucciones/else")
    const While = require("../Interprete/Instrucciones/while")
    const DoWhile = require("../Interprete/Instrucciones/doWhile")
    const For = require("../Interprete/Instrucciones/for")
    const Break = require("../Interprete/Instrucciones/break")
    const Continue = require("../Interprete/Instrucciones/continue")
    const Declaracion = require("../Interprete/Instrucciones/declaracion")
    const Ternario = require("../Interprete/Instrucciones/ternario")
    const ActualizacionFor = require("../Interprete/Instrucciones/actualizacionFor")
    const ModificarVar = require("../Interprete/Instrucciones/modificarVar")
    const Case = require("../Interprete/Instrucciones/case")
    const Switch = require("../Interprete/Instrucciones/switch")
    const DeclaracionVec = require("../Interprete/Instrucciones/declaracionVector")
    const DeclaracionMatriz = require("../Interprete/Instrucciones/declaracionMatriz")
    const Return = require("../Interprete/Instrucciones/return")

    //Funciones
    const DeclararFuncion = require("../Interprete/Funciones/declararFuncion")
    const LlamarFuncion = require("../Interprete/Funciones/llamarFuncion")

    // Operaciones Mayores
    const SentenciaIf = require("../Interprete/OperacionesMayores/sentenciaIf")
    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:return 26; 
break;
case 5:return 27; 
break;
case 6:return 38;
break;
case 7:return 39;
break;
case 8:return 40;
break;
case 9:return 41;
break;
case 10:return 44;
break;
case 11:return 76;
break;
case 12:return 79;
break;
case 13:return 82;
break;
case 14:return 94;
break;
case 15:return 96;
break;
case 16:return 95;
break;
case 17:return 24;
break;
case 18:return 25;
break;
case 19:return 108;
break;
case 20:return 101;
break;
case 21:return 107;
break;
case 22:return 104;
break;
case 23:return 53;
break;
case 24:return 54;
break;
case 25:return 51;
break;
case 26:return 47;
break;
case 27:return 50;
break;
case 28:return 55;
break;
case 29:return 42;
break;
case 30:return 77;
break;
case 31:return 102;
break;
case 32:return 99;
break;
case 33:return 98;
break;
case 34:return 100;
break;
case 35:return 58; 
break;
case 36:return 60; 
break;
case 37:return 59; 
break;
case 38:return 30; 
break;
case 39:return 56; 
break;
case 40:return 57; 
break;
case 41:return 32;
break;
case 42:return 33;
break;
case 43:return 34;
break;
case 44:return 35;
break;
case 45:return 36;
break;
case 46:return 63;
break;
case 47:return 64;
break;
case 48:return 65;
break;
case 49:return 66;
break;
case 50:return 67;
break;
case 51:return 68;
break;
case 52:return 'ENTRADA';
break;
case 53:return 106;
break;
case 54:return 85;
break;
case 55:return 86;
break;
case 56:return 88;
break;
case 57:return 90;
break;
case 58:return 89;
break;
case 59:return 87;
break;
case 60:return 72;
break;
case 61:return 91;
break;
case 62:return 92;
break;
case 63:return 93;
break;
case 64:return 48;
break;
case 65:return 49;
break;
case 66:return 80;
break;
case 67:return 8;
break;
case 68:return 61;
break;
case 69:return 62;
break;
case 70:return 7;
break;
case 71:return 29;
break;
case 72:return 43;
break;
case 73:return 46;
break;
case 74:return 21;
break;
case 75:return 5;
break;
case 76:console.error('Este es un error l√©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:{COM_MULT})/i,/^(?:{COM_SIMPLE})/i,/^(?:(\/\*[\s\S]*?\*\/))/i,/^(?:(\/\/.*))/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:bool\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:cout\b)/i,/^(?:endl\b)/i,/^(?:toupper\b)/i,/^(?:tolower\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:std\b)/i,/^(?:c_str\b)/i,/^(?:execute\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:(true|false\b))/i,/^(?:('(([^\n\"\\]|\\.)*)'))/i,/^(?:([\"][^\"\n]+[\"]))/i,/^(?:([a-zA-Z_][a-zA-Z0-9_]*))/i,/^(?:([0-9]+\.[0-9]+\b))/i,/^(?:([0-9]+\b))/i,/^(?:\\n)/i,/^(?:\\)/i,/^(?:\\")/i,/^(?:\\t)/i,/^(?:')/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:pow\b)/i,/^(?:%)/i,/^(?:>>)/i,/^(?:<<)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?:,)/i,/^(?::)/i,/^(?:\.)/i,/^(?:\?)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}