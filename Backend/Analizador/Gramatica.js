/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,19],$V1=[1,20],$V2=[1,33],$V3=[1,27],$V4=[1,28],$V5=[1,29],$V6=[1,30],$V7=[1,31],$V8=[1,34],$V9=[1,23],$Va=[1,24],$Vb=[1,25],$Vc=[1,26],$Vd=[1,18],$Ve=[1,17],$Vf=[1,21],$Vg=[5,25,26,29,37,38,39,40,41,77,93,94,95,98,100,101,106],$Vh=[5,19,21,23,24,25,26,29,37,38,39,40,41,42,49,50,52,53,55,56,57,58,59,61,64,77,79,92,93,94,95,97,98,99,100,101,106,107],$Vi=[5,19,21,23,24,25,26,29,37,38,39,40,41,42,77,79,93,94,95,97,98,99,100,101,106,107],$Vj=[29,48,72],$Vk=[1,57],$Vl=[28,60,61,62,63,65,68],$Vm=[2,32],$Vn=[1,58],$Vo=[21,28,68],$Vp=[1,63],$Vq=[1,71],$Vr=[1,81],$Vs=[1,70],$Vt=[1,77],$Vu=[1,78],$Vv=[1,79],$Vw=[1,80],$Vx=[1,82],$Vy=[1,83],$Vz=[1,84],$VA=[1,85],$VB=[1,86],$VC=[1,74],$VD=[1,75],$VE=[1,69],$VF=[1,72],$VG=[1,90],$VH=[1,94],$VI=[1,92],$VJ=[1,105],$VK=[1,107],$VL=[1,108],$VM=[1,111],$VN=[1,112],$VO=[21,105],$VP=[1,143],$VQ=[1,144],$VR=[1,145],$VS=[1,146],$VT=[1,147],$VU=[1,148],$VV=[2,59],$VW=[1,152],$VX=[19,21,48,84,85,86,87,88,89,90,91,105],$VY=[1,153],$VZ=[1,154],$V_=[1,155],$V$=[1,156],$V01=[1,157],$V11=[19,21,28,42,48,60,61,62,63,65,73,84,85,86,87,88,89,90,91,105],$V21=[1,169],$V31=[1,170],$V41=[19,21,48,90,91],$V51=[19,21,23,24,25,26,29,37,38,39,40,41,42,77,79,93,94,95,97,98,99,101,106,107],$V61=[21,48],$V71=[1,195],$V81=[1,201],$V91=[1,207],$Va1=[21,28,48,73],$Vb1=[28,48],$Vc1=[19,21,28,42,48,60,61,73,84,85,86,87,88,89,90,91,105],$Vd1=[5,19,21,23,24,25,26,29,37,38,39,40,41,42,77,79,81,93,94,95,97,98,99,100,101,106,107],$Ve1=[79,97,99];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"entornos":4,"EOF":5,"entorno":6,"declaracionVariables":7,"funcionExecute":8,"funciones":9,"comentarios":10,"impresionCout":11,"sentenciaIfCompleta":12,"ciclosWhile":13,"cicloFor":14,"switchCase":15,"instrucciones":16,"instruccion":17,"llamarFunciones":18,"INTERROGACION":19,"ternario":20,"PTCOMA":21,"sentenciaReturn":22,"PR_BREAK":23,"PR_CONTINUE":24,"COM_MULT":25,"COM_SIMPLE":26,"identificadores":27,"COMA":28,"ID":29,"secuenciasEscape":30,"SALTO_LINEA":31,"BARRA_INVERTIDA":32,"COMILLA_DOBLE":33,"TABULACION":34,"COMILLA_SIMPLE":35,"tiposVar":36,"PR_INT":37,"PR_DOUBLE":38,"PR_BOOL":39,"PR_CHAR":40,"PR_STD":41,"DOSPUNTOS":42,"PR_STRING":43,"valores":44,"PUNTO":45,"PR_LENGTH":46,"PARIZQ":47,"PARDER":48,"PR_TYPEOF":49,"PR_ROUND":50,"valoresPlus":51,"PR_TOUPPER":52,"PR_TOLOWER":53,"PR_TOSTRING":54,"DECIMAL":55,"ENTERO":56,"BOOLEAN":57,"STRING":58,"CHAR":59,"MAS":60,"MENOS":61,"POR":62,"DIVIDIDO":63,"POTENCIA":64,"MODULO":65,"valoresArreglos":66,"arregloDeclaraciones":67,"IGUAL":68,"sentenciaLogica":69,"modificarVariables":70,"VectoresMatrices":71,"CORIZQ":72,"CORDER":73,"PR_NEW":74,"PR_C_STR":75,"sentenciaIf":76,"PR_IF":77,"LLAVIZQ":78,"LLAVDER":79,"sentenciaIfElse":80,"PR_ELSE":81,"sentenciaElse":82,"sentenciaRelacional":83,"IGUALES":84,"DIFERENTE":85,"MENOR_QUE":86,"MENOR_IGUAL":87,"MAYOR_QUE":88,"MAYOR_IGUAL":89,"OR":90,"AND":91,"NOT":92,"PR_WHILE":93,"PR_DO":94,"PR_FOR":95,"recursividadCase":96,"PR_CASE":97,"PR_SWITCH":98,"PR_DEFAULT":99,"PR_VOID":100,"PR_EXECUTE":101,"posibilidadesCout":102,"PR_ENDL":103,"funcionCout":104,"SALIDA":105,"PR_COUT":106,"PR_RETURN":107,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",19:"INTERROGACION",21:"PTCOMA",23:"PR_BREAK",24:"PR_CONTINUE",25:"COM_MULT",26:"COM_SIMPLE",28:"COMA",29:"ID",31:"SALTO_LINEA",32:"BARRA_INVERTIDA",33:"COMILLA_DOBLE",34:"TABULACION",35:"COMILLA_SIMPLE",37:"PR_INT",38:"PR_DOUBLE",39:"PR_BOOL",40:"PR_CHAR",41:"PR_STD",42:"DOSPUNTOS",43:"PR_STRING",45:"PUNTO",46:"PR_LENGTH",47:"PARIZQ",48:"PARDER",49:"PR_TYPEOF",50:"PR_ROUND",52:"PR_TOUPPER",53:"PR_TOLOWER",54:"PR_TOSTRING",55:"DECIMAL",56:"ENTERO",57:"BOOLEAN",58:"STRING",59:"CHAR",60:"MAS",61:"MENOS",62:"POR",63:"DIVIDIDO",64:"POTENCIA",65:"MODULO",68:"IGUAL",72:"CORIZQ",73:"CORDER",74:"PR_NEW",75:"PR_C_STR",77:"PR_IF",78:"LLAVIZQ",79:"LLAVDER",81:"PR_ELSE",84:"IGUALES",85:"DIFERENTE",86:"MENOR_QUE",87:"MENOR_IGUAL",88:"MAYOR_QUE",89:"MAYOR_IGUAL",90:"OR",91:"AND",92:"NOT",93:"PR_WHILE",94:"PR_DO",95:"PR_FOR",97:"PR_CASE",98:"PR_SWITCH",99:"PR_DEFAULT",100:"PR_VOID",101:"PR_EXECUTE",103:"PR_ENDL",105:"SALIDA",106:"PR_COUT",107:"PR_RETURN"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[16,2],[16,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,3],[17,1],[17,2],[17,2],[17,1],[10,1],[10,1],[27,3],[27,1],[30,2],[30,2],[30,2],[30,2],[30,2],[30,1],[30,1],[30,1],[30,1],[30,1],[36,1],[36,1],[36,1],[36,1],[36,4],[44,5],[44,4],[44,4],[44,4],[44,4],[44,7],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[51,3],[51,3],[51,2],[51,3],[51,3],[51,6],[51,3],[51,1],[66,3],[66,1],[67,4],[67,2],[7,3],[7,5],[7,8],[7,7],[7,5],[7,8],[7,2],[7,1],[70,3],[70,3],[70,3],[70,4],[70,4],[70,4],[70,4],[70,4],[70,6],[71,11],[71,16],[71,9],[71,17],[71,8],[71,11],[71,7],[71,10],[71,11],[76,7],[80,9],[80,8],[82,4],[12,3],[12,2],[12,2],[12,1],[20,5],[83,3],[83,3],[83,3],[83,3],[83,3],[83,3],[83,1],[69,3],[69,3],[69,2],[69,1],[13,7],[13,9],[14,10],[96,5],[96,4],[15,10],[15,7],[9,8],[9,7],[9,8],[9,7],[18,5],[18,4],[8,6],[8,5],[102,1],[102,2],[102,3],[102,4],[102,3],[102,1],[104,3],[104,1],[11,4],[22,3],[22,6],[22,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = $$[$0-1]; return this.$; 
break;
case 2: case 14:
this.$ = $$[$0-1]; this.$.push($$[$0]);
break;
case 3: case 15: case 32: case 69:
this.$ = []; this.$.push($$[$0]);
break;
case 4:
 console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
case 5: case 9: case 10: case 11: case 12: case 13: case 16: case 18: case 19: case 20: case 22: case 23:
this.$ = $$[$0];
break;
case 24: case 78:
this.$ = $$[$0-1];
break;
case 26:
this.$ = new Break($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 31: case 68:
this.$ = $$[$0-2]; this.$.push($$[$0]);
break;
case 43:
this.$ = "ENTERO";
break;
case 44:
this.$ = "DECIMAL";
break;
case 45:
this.$ = "BOOL";
break;
case 46:
this.$ = "CHAR";
break;
case 47:
this.$ = "STRING";
break;
case 50: case 51: case 52:
this.$ = new FuncionCout($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 53:
this.$ = new FuncionCout($$[$0-3], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 54:
this.$ = new Dato($$[$0], TipoDato.DECIMAL, _$[$0].first_line, _$[$0].first_column); 
break;
case 55:
this.$ = new Dato($$[$0], TipoDato.ENTERO, _$[$0].first_line, _$[$0].first_column); 
break;
case 56:
this.$ = new Dato($$[$0], TipoDato.BOOL, _$[$0].first_line, _$[$0].first_column); 
break;
case 57:
this.$ = new Dato($$[$0], TipoDato.STRING, _$[$0].first_line, _$[$0].first_column); 
break;
case 58:
this.$ = new Dato($$[$0], TipoDato.CHAR, _$[$0].first_line, _$[$0].first_column); 
break;
case 59:
this.$ = new Variable($$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 60: case 61: case 63: case 64: case 66:
 this.$ = new Aritmetica($$[$0-2], $$[$0], $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 62:
 this.$ = new Negativo($$[$0], _$[$0-1].first_line, _$[$0-1].first_column);           
break;
case 65:
 this.$ = new Aritmetica($$[$0-3], $$[$0-1], $$[$0-4], _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 67: case 113: case 117:
 this.$ = $$[$0]; 
break;
case 72:
this.$ = new Declaracion($$[$0-2], $$[$0-1], null, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 73:
this.$ = new Declaracion($$[$0-4], $$[$0-3], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 80: case 81:
this.$ = new ActualizacionFor($$[$0-2], $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 82:
this.$ = new ModificarVar($$[$0-2], $$[$0-1], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 83: case 84: case 85: case 86: case 87:
this.$ = new ModificarVar($$[$0-3], $$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 89:
this.$ = new DeclaracionVec($$[$0-10], $$[$0-9], $$[$0-4], $$[$0-2], _$[$0-10].first_line, _$[$0-10].first_column);
break;
case 90:
this.$ = new DeclaracionMatriz($$[$0-15], $$[$0-14], $$[$0-7], $$[$0-5], $$[$0-2], _$[$0-15].first_line, _$[$0-15].first_column);
break;
case 91:
this.$ = new DeclaracionVec($$[$0-8], $$[$0-7], null, $$[$0-2], _$[$0-8].first_line, _$[$0-8].first_column);
break;
case 98:
this.$ = new If($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column)
break;
case 99:
this.$ = $$[$0-8]; this.$.push(new ElseIf($$[$0-4], $$[$0-1], _$[$0-8].first_line, _$[$0-8].first_column))
break;
case 100:
this.$ = []; this.$.push(new ElseIf($$[$0-4], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column))
break;
case 101:
this.$ = new Else($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 102:
this.$ = new SentenciaIf($$[$0-2], $$[$0-1], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 103:
this.$ = new SentenciaIf($$[$0-1], $$[$0], null, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 104:
this.$ = new SentenciaIf($$[$0-1], null, $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 105:
this.$ = new SentenciaIf($$[$0], null, null, _$[$0].first_line, _$[$0].first_column);
break;
case 106:
this.$ = new Ternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 107: case 108: case 109: case 110: case 111: case 112:
 this.$ = new Relacional($$[$0-2], $$[$0], $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 114:
 this.$ = new opLogicos($$[$0-2], $$[$0], $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 115:
 this.$ = new opLogico($$[$0-2], $$[$0], $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 116:
 this.$ = new Negacion($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 118:
 this.$ = new While($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 119:
 this.$ = new DoWhile($$[$0-2], $$[$0-6], _$[$0-8].first_line, _$[$0-8].first_column); 
break;
case 120:
 this.$ = new For($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1], _$[$0-9].first_line, _$[$0-9].first_column);
break;
case 121:
this.$ = $$[$0-4]; this.$.push(new Case($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column));
break;
case 122:
this.$ = []; this.$.push(new Case($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column));
break;
case 123:
this.$ = new Switch($$[$0-7], $$[$0-4], $$[$0-1], _$[$0-9].first_line, _$[$0-9].first_column);
break;
case 124:
this.$ = new Switch($$[$0-4], $$[$0-1], null, _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 133:
 this.$ = $$[$0];
break;
case 134:
 this.$ = Negacion($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 135:
 this.$ = $$[$0-1];
break;
case 139:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 140:
 this.$ = []; this.$.push($$[$0]); 
break;
case 141:
 this.$ = new Cout($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
}
},
table: [{2:[1,4],3:1,4:2,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,25:$V0,26:$V1,27:32,29:$V2,36:14,37:$V3,38:$V4,39:$V5,40:$V6,41:$V7,70:15,71:16,76:22,77:$V8,93:$V9,94:$Va,95:$Vb,98:$Vc,100:$Vd,101:$Ve,106:$Vf},{1:[3]},{5:[1,35],6:36,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,25:$V0,26:$V1,27:32,29:$V2,36:14,37:$V3,38:$V4,39:$V5,40:$V6,41:$V7,70:15,71:16,76:22,77:$V8,93:$V9,94:$Va,95:$Vb,98:$Vc,100:$Vd,101:$Ve,106:$Vf},o($Vg,[2,3]),o($Vg,[2,4]),o($Vg,[2,5]),o($Vg,[2,6]),o($Vg,[2,7]),o($Vg,[2,8]),o($Vg,[2,9]),o($Vg,[2,10]),o($Vg,[2,11]),o($Vg,[2,12]),o($Vg,[2,13]),{27:37,29:[1,38]},{21:[1,39]},o($Vh,[2,79]),{29:[1,40]},{29:[1,41]},o($Vi,[2,29]),o($Vi,[2,30]),{105:[1,42]},o($Vi,[2,105],{80:43,82:44,81:[1,45]}),{47:[1,46]},{78:[1,47]},{47:[1,48]},{47:[1,49]},o($Vj,[2,43]),o($Vj,[2,44]),o($Vj,[2,45]),o($Vj,[2,46]),{42:[1,50]},{28:$Vk,60:[1,51],61:[1,52],62:[1,54],63:[1,55],65:[1,56],68:[1,53]},o($Vl,$Vm,{72:$Vn}),{47:[1,59]},{1:[2,1]},o($Vg,[2,2]),{21:[1,60],28:$Vk,68:[1,61]},o($Vo,$Vm,{47:[1,62],72:$Vp}),o($Vh,[2,78]),{47:[1,64]},{47:[1,65]},{29:$Vq,41:$Vr,44:76,47:$Vs,49:$Vt,50:$Vu,51:73,52:$Vv,53:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,61:$VC,64:$VD,83:68,92:$VE,102:67,103:$VF,104:66},o($Vi,[2,103],{82:87,81:[1,88]}),o($Vi,[2,104]),{77:[1,89],78:$VG},{29:$VH,41:$Vr,44:76,49:$Vt,50:$Vu,51:73,52:$Vv,53:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,61:$VC,64:$VD,69:91,83:93,92:$VI},{7:97,8:102,10:109,11:103,12:99,13:100,14:101,15:104,16:95,17:96,18:98,19:$VJ,22:106,23:$VK,24:$VL,25:$V0,26:$V1,27:32,29:$VM,36:110,37:$V3,38:$V4,39:$V5,40:$V6,41:$V7,70:15,71:16,76:22,77:$V8,93:$V9,94:$Va,95:$Vb,98:$Vc,101:$Ve,106:$Vf,107:$VN},{7:113,27:32,29:$V2,36:110,37:$V3,38:$V4,39:$V5,40:$V6,41:$V7,70:15,71:16},{29:$VH,41:$Vr,44:76,49:$Vt,50:$Vu,51:114,52:$Vv,53:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,61:$VC,64:$VD},{42:[1,115]},{60:[1,116],68:[1,117]},{61:[1,118],68:[1,119]},{29:[1,121],41:$Vr,44:76,49:$Vt,50:$Vu,51:73,52:$Vv,53:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,61:$VC,64:$VD,69:120,83:93,92:$VI},{68:[1,122]},{68:[1,123]},{68:[1,124]},{29:[1,125]},{56:[1,126]},{29:$VH,41:$Vr,44:76,49:$Vt,50:$Vu,51:73,52:$Vv,53:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,61:$VC,64:$VD,69:127,83:93,92:$VI},o($Vh,[2,72]),{20:130,29:[1,129],41:$Vr,44:76,47:[1,131],49:$Vt,50:$Vu,51:73,52:$Vv,53:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,61:$VC,64:$VD,69:128,83:93,92:$VI},{36:134,37:$V3,38:$V4,39:$V5,40:$V6,41:$V7,48:[1,133],67:132},{73:[1,135]},{29:$VH,41:$Vr,44:76,48:[1,137],49:$Vt,50:$Vu,51:138,52:$Vv,53:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,61:$VC,64:$VD,66:136},{36:134,37:$V3,38:$V4,39:$V5,40:$V6,41:$V7,48:[1,140],67:139},{21:[1,141],105:[1,142]},o($VO,[2,140]),o($VO,[2,133],{84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU}),{57:[1,149]},{29:$VH,41:$Vr,44:76,49:$Vt,50:$Vu,51:73,52:$Vv,53:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,61:$VC,64:$VD,69:150,83:93,92:$VI},o([21,60,61,62,63,65,84,85,86,87,88,89,105],$VV,{45:$VW,47:[1,151]}),o($VO,[2,138]),o($VX,[2,113],{60:$VY,61:$VZ,62:$V_,63:$V$,65:$V01}),{29:$VH,41:$Vr,44:76,49:$Vt,50:$Vu,51:158,52:$Vv,53:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,61:$VC,64:$VD},{47:[1,159]},o($V11,[2,67]),{47:[1,160]},{47:[1,161]},{47:[1,162]},{47:[1,163]},{42:[1,164]},o($V11,[2,54]),o($V11,[2,55]),o($V11,[2,56]),o($V11,[2,57]),o($V11,[2,58]),o($Vi,[2,102]),{77:[1,165],78:$VG},{47:[1,166]},{7:97,8:102,10:109,11:103,12:99,13:100,14:101,15:104,16:167,17:96,18:98,19:$VJ,22:106,23:$VK,24:$VL,25:$V0,26:$V1,27:32,29:$VM,36:110,37:$V3,38:$V4,39:$V5,40:$V6,41:$V7,70:15,71:16,76:22,77:$V8,93:$V9,94:$Va,95:$Vb,98:$Vc,101:$Ve,106:$Vf,107:$VN},{48:[1,168],90:$V21,91:$V31},{29:$VH,41:$Vr,44:76,49:$Vt,50:$Vu,51:73,52:$Vv,53:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,61:$VC,64:$VD,69:171,83:93,92:$VI},o($V41,[2,117],{84:$VP,85:$VQ,86:$VR,87:$VS,88:$VT,89:$VU}),o($V11,$VV,{45:$VW}),{7:97,8:102,10:109,11:103,12:99,13:100,14:101,15:104,17:173,18:98,19:$VJ,22:106,23:$VK,24:$VL,25:$V0,26:$V1,27:32,29:$VM,36:110,37:$V3,38:$V4,39:$V5,40:$V6,41:$V7,70:15,71:16,76:22,77:$V8,79:[1,172],93:$V9,94:$Va,95:$Vb,98:$Vc,101:$Ve,106:$Vf,107:$VN},o($V51,[2,15]),o($V51,[2,16]),o($V51,[2,17]),o($V51,[2,18]),o($V51,[2,19]),o($V51,[2,20]),o($V51,[2,21]),o($V51,[2,22]),o($V51,[2,23]),{20:174,29:$VH,41:$Vr,44:76,49:$Vt,50:$Vu,51:73,52:$Vv,53:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,61:$VC,64:$VD,69:175,83:93,92:$VI},o($V51,[2,25]),{21:[1,176]},{21:[1,177]},o($V51,[2,28]),{27:37,29:[1,178]},o($Vl,$Vm,{47:[1,179],72:$Vn}),{21:[1,182],29:[1,181],41:$Vr,44:76,49:$Vt,50:$Vu,51:138,52:$Vv,53:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,61:$VC,64:$VD,66:180},{29:$VH,41:$Vr,44:76,49:$Vt,50:$Vu,51:73,52:$Vv,53:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,61:$VC,64:$VD,69:183,83:93,92:$VI},{48:[1,184],60:$VY,61:$VZ,62:$V_,63:$V$,65:$V01},{43:[1,185]},o($V61,[2,80]),{29:$VH,41:$Vr,44:76,49:$Vt,50:$Vu,51:73,52:$Vv,53:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,61:$VC,64:$VD,69:186,83:93,92:$VI},o($V61,[2,81]),{29:$VH,41:$Vr,44:76,49:$Vt,50:$Vu,51:187,52:$Vv,53:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,61:$VC,64:$VD},o($V61,[2,82],{90:$V21,91:$V31}),o([21,48,60,61,62,63,65,84,85,86,87,88,89,90,91],$VV,{45:$VW,72:[1,188]}),{29:$VH,41:$Vr,44:76,49:$Vt,50:$Vu,51:73,52:$Vv,53:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,61:$VC,64:$VD,69:189,83:93,92:$VI},{29:$VH,41:$Vr,44:76,49:$Vt,50:$Vu,51:73,52:$Vv,53:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,61:$VC,64:$VD,69:190,83:93,92:$VI},{29:$VH,41:$Vr,44:76,49:$Vt,50:$Vu,51:73,52:$Vv,53:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,61:$VC,64:$VD,69:191,83:93,92:$VI},o([21,28,60,61,62,63,65,68],[2,31]),{73:[1,192]},{48:[1,193],90:$V21,91:$V31},{19:$V71,21:[1,194],90:$V21,91:$V31},o([19,21,60,61,62,63,65,84,85,86,87,88,89,90,91],$VV,{45:$VW,47:[1,196],72:[1,197]}),{21:[1,198]},{36:199,37:$V3,38:$V4,39:$V5,40:$V6,41:$V7},{28:$V81,48:[1,200]},{78:[1,202]},{29:[1,203]},{68:[1,204],72:[1,205]},{28:$V91,48:[1,206]},{21:[1,208]},o($Va1,[2,69],{60:$VY,61:$VZ,62:$V_,63:$V$,65:$V01}),{28:$V81,48:[1,209]},{78:[1,210]},o($Vi,[2,141]),{29:$Vq,41:$Vr,44:76,47:$Vs,49:$Vt,50:$Vu,51:73,52:$Vv,53:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,61:$VC,64:$VD,83:68,92:$VE,102:211,103:$VF},{29:$VH,41:$Vr,44:76,49:$Vt,50:$Vu,51:73,52:$Vv,53:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,61:$VC,64:$VD,83:212},{29:$VH,41:$Vr,44:76,49:$Vt,50:$Vu,51:73,52:$Vv,53:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,61:$VC,64:$VD,83:213},{29:$VH,41:$Vr,44:76,49:$Vt,50:$Vu,51:73,52:$Vv,53:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,61:$VC,64:$VD,83:214},{29:$VH,41:$Vr,44:76,49:$Vt,50:$Vu,51:73,52:$Vv,53:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,61:$VC,64:$VD,83:215},{29:$VH,41:$Vr,44:76,49:$Vt,50:$Vu,51:73,52:$Vv,53:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,61:$VC,64:$VD,83:216},{29:$VH,41:$Vr,44:76,49:$Vt,50:$Vu,51:73,52:$Vv,53:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,61:$VC,64:$VD,83:217},o($VO,[2,134]),{48:[1,218],90:$V21,91:$V31},{29:$VH,41:$Vr,44:76,48:[1,220],49:$Vt,50:$Vu,51:138,52:$Vv,53:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,61:$VC,64:$VD,66:219},{46:[1,221]},{29:$VH,41:$Vr,44:76,49:$Vt,50:$Vu,51:222,52:$Vv,53:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,61:$VC,64:$VD},{29:$VH,41:$Vr,44:76,49:$Vt,50:$Vu,51:223,52:$Vv,53:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,61:$VC,64:$VD},{29:$VH,41:$Vr,44:76,49:$Vt,50:$Vu,51:224,52:$Vv,53:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,61:$VC,64:$VD},{29:$VH,41:$Vr,44:76,49:$Vt,50:$Vu,51:225,52:$Vv,53:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,61:$VC,64:$VD},{29:$VH,41:$Vr,44:76,49:$Vt,50:$Vu,51:226,52:$Vv,53:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,61:$VC,64:$VD},o($V11,[2,62]),{29:$VH,41:$Vr,44:76,49:$Vt,50:$Vu,51:227,52:$Vv,53:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,61:$VC,64:$VD},{29:[1,228]},{29:$VH,41:$Vr,44:76,49:$Vt,50:$Vu,51:229,52:$Vv,53:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,61:$VC,64:$VD},{29:$VH,41:$Vr,44:230,49:$Vt,50:$Vu,52:$Vv,53:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB},{29:$VH,41:$Vr,44:231,49:$Vt,50:$Vu,52:$Vv,53:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB},{42:[1,232]},{47:[1,233]},{29:$VH,41:$Vr,44:76,49:$Vt,50:$Vu,51:73,52:$Vv,53:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,61:$VC,64:$VD,69:234,83:93,92:$VI},{7:97,8:102,10:109,11:103,12:99,13:100,14:101,15:104,17:173,18:98,19:$VJ,22:106,23:$VK,24:$VL,25:$V0,26:$V1,27:32,29:$VM,36:110,37:$V3,38:$V4,39:$V5,40:$V6,41:$V7,70:15,71:16,76:22,77:$V8,79:[1,235],93:$V9,94:$Va,95:$Vb,98:$Vc,101:$Ve,106:$Vf,107:$VN},{78:[1,236]},{29:$VH,41:$Vr,44:76,49:$Vt,50:$Vu,51:73,52:$Vv,53:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,61:$VC,64:$VD,69:237,83:93,92:$VI},{29:$VH,41:$Vr,44:76,49:$Vt,50:$Vu,51:73,52:$Vv,53:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,61:$VC,64:$VD,69:238,83:93,92:$VI},o($V41,[2,116]),{93:[1,239]},o($V51,[2,14]),{21:[1,240]},{19:$V71,90:$V21,91:$V31},o($V51,[2,26]),o($V51,[2,27]),o($Vo,$Vm,{72:$Vp}),{29:$VH,41:$Vr,44:76,48:[1,242],49:$Vt,50:$Vu,51:138,52:$Vv,53:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,61:$VC,64:$VD,66:241},{21:[1,243],28:$V91},o([21,28,60,61,62,63,65],$VV,{45:$VW,47:[1,244]}),o($V51,[2,144]),{21:[1,245],90:$V21,91:$V31},{78:[1,246]},o($Vj,[2,47]),o($V61,[2,83],{90:$V21,91:$V31}),o($V61,[2,84],{60:$VY,61:$VZ,62:$V_,63:$V$,65:$V01}),{29:$VH,41:$Vr,44:76,49:$Vt,50:$Vu,51:138,52:$Vv,53:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,61:$VC,64:$VD,66:247},o($V61,[2,85],{90:$V21,91:$V31}),o($V61,[2,86],{90:$V21,91:$V31}),o($V61,[2,87],{90:$V21,91:$V31}),{68:[1,248],72:[1,249]},{78:[1,250]},o($Vh,[2,73]),{7:97,8:102,10:109,11:103,12:99,13:100,14:101,15:104,16:251,17:96,18:98,19:$VJ,22:106,23:$VK,24:$VL,25:$V0,26:$V1,27:32,29:$VM,36:110,37:$V3,38:$V4,39:$V5,40:$V6,41:$V7,70:15,71:16,76:22,77:$V8,93:$V9,94:$Va,95:$Vb,98:$Vc,101:$Ve,106:$Vf,107:$VN},{29:$VH,41:$Vr,44:76,48:[1,253],49:$Vt,50:$Vu,51:138,52:$Vv,53:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,61:$VC,64:$VD,66:252},{56:[1,254]},o($Vh,[2,76]),{48:[1,255]},{78:[1,256]},{36:257,37:$V3,38:$V4,39:$V5,40:$V6,41:$V7},{7:97,8:102,10:109,11:103,12:99,13:100,14:101,15:104,16:258,17:96,18:98,19:$VJ,22:106,23:$VK,24:$VL,25:$V0,26:$V1,27:32,29:$VM,36:110,37:$V3,38:$V4,39:$V5,40:$V6,41:$V7,70:15,71:16,76:22,77:$V8,93:$V9,94:$Va,95:$Vb,98:$Vc,101:$Ve,106:$Vf,107:$VN},o($Vb1,[2,71]),{29:[1,261],72:[1,260],74:[1,259]},{73:[1,262]},{21:[1,263]},{29:$VH,41:$Vr,44:76,49:$Vt,50:$Vu,51:264,52:$Vv,53:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,61:$VC,64:$VD},o($Vi,[2,132]),{78:[1,265]},{7:97,8:102,10:109,11:103,12:99,13:100,14:101,15:104,16:266,17:96,18:98,19:$VJ,22:106,23:$VK,24:$VL,25:$V0,26:$V1,27:32,29:$VM,36:110,37:$V3,38:$V4,39:$V5,40:$V6,41:$V7,70:15,71:16,76:22,77:$V8,93:$V9,94:$Va,95:$Vb,98:$Vc,101:$Ve,106:$Vf,107:$VN},o($VO,[2,139]),o($VX,[2,107]),o($VX,[2,108]),o($VX,[2,109]),o($VX,[2,110]),o($VX,[2,111]),o($VX,[2,112]),o($VO,[2,135]),{28:$V91,48:[1,267]},o($VO,[2,137]),{47:[1,268]},o($Vc1,[2,60],{62:$V_,63:$V$,65:$V01}),o($Vc1,[2,61],{62:$V_,63:$V$,65:$V01}),o($V11,[2,63]),o($V11,[2,64]),o($V11,[2,66]),{28:[1,269],60:$VY,61:$VZ,62:$V_,63:$V$,65:$V01},{48:[1,270]},{48:[1,271],60:$VY,61:$VZ,62:$V_,63:$V$,65:$V01},{48:[1,272]},{48:[1,273]},{54:[1,274]},{29:$VH,41:$Vr,44:76,49:$Vt,50:$Vu,51:73,52:$Vv,53:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,61:$VC,64:$VD,69:275,83:93,92:$VI},{48:[1,276],90:$V21,91:$V31},o($Vi,[2,101]),{7:97,8:102,10:109,11:103,12:99,13:100,14:101,15:104,16:277,17:96,18:98,19:$VJ,22:106,23:$VK,24:$VL,25:$V0,26:$V1,27:32,29:$VM,36:110,37:$V3,38:$V4,39:$V5,40:$V6,41:$V7,70:15,71:16,76:22,77:$V8,93:$V9,94:$Va,95:$Vb,98:$Vc,101:$Ve,106:$Vf,107:$VN},o([19,21,48,90],[2,114],{91:$V31}),o($V41,[2,115]),{47:[1,278]},o($V51,[2,24]),{28:$V91,48:[1,279]},{21:[1,280]},o($V51,[2,142]),{29:$VH,41:$Vr,44:76,49:$Vt,50:$Vu,51:138,52:$Vv,53:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,61:$VC,64:$VD,66:281},{27:32,29:[1,283],70:282},{96:284,97:[1,285]},{28:$V91,73:[1,286]},{29:$VH,41:$Vr,44:76,49:$Vt,50:$Vu,51:287,52:$Vv,53:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,61:$VC,64:$VD},{56:[1,288]},{7:97,8:102,10:109,11:103,12:99,13:100,14:101,15:104,16:289,17:96,18:98,19:$VJ,22:106,23:$VK,24:$VL,25:$V0,26:$V1,27:32,29:$VM,36:110,37:$V3,38:$V4,39:$V5,40:$V6,41:$V7,70:15,71:16,76:22,77:$V8,93:$V9,94:$Va,95:$Vb,98:$Vc,101:$Ve,106:$Vf,107:$VN},{7:97,8:102,10:109,11:103,12:99,13:100,14:101,15:104,17:173,18:98,19:$VJ,22:106,23:$VK,24:$VL,25:$V0,26:$V1,27:32,29:$VM,36:110,37:$V3,38:$V4,39:$V5,40:$V6,41:$V7,42:[1,290],70:15,71:16,76:22,77:$V8,93:$V9,94:$Va,95:$Vb,98:$Vc,101:$Ve,106:$Vf,107:$VN},{28:$V91,48:[1,291]},{21:[1,292]},{73:[1,293]},{29:$VH,41:$Vr,44:76,49:$Vt,50:$Vu,51:294,52:$Vv,53:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,61:$VC,64:$VD},{7:97,8:102,10:109,11:103,12:99,13:100,14:101,15:104,16:295,17:96,18:98,19:$VJ,22:106,23:$VK,24:$VL,25:$V0,26:$V1,27:32,29:$VM,36:110,37:$V3,38:$V4,39:$V5,40:$V6,41:$V7,70:15,71:16,76:22,77:$V8,93:$V9,94:$Va,95:$Vb,98:$Vc,101:$Ve,106:$Vf,107:$VN},{29:[1,296]},{7:97,8:102,10:109,11:103,12:99,13:100,14:101,15:104,17:173,18:98,19:$VJ,22:106,23:$VK,24:$VL,25:$V0,26:$V1,27:32,29:$VM,36:110,37:$V3,38:$V4,39:$V5,40:$V6,41:$V7,70:15,71:16,76:22,77:$V8,79:[1,297],93:$V9,94:$Va,95:$Vb,98:$Vc,101:$Ve,106:$Vf,107:$VN},{36:298,37:$V3,38:$V4,39:$V5,40:$V6,41:$V7},{29:$VH,41:$Vr,44:76,49:$Vt,50:$Vu,51:138,52:$Vv,53:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,61:$VC,64:$VD,66:299},{45:[1,300]},{68:[1,301]},o($Vi,[2,131]),o($Va1,[2,68],{60:$VY,61:$VZ,62:$V_,63:$V$,65:$V01}),{7:97,8:102,10:109,11:103,12:99,13:100,14:101,15:104,16:302,17:96,18:98,19:$VJ,22:106,23:$VK,24:$VL,25:$V0,26:$V1,27:32,29:$VM,36:110,37:$V3,38:$V4,39:$V5,40:$V6,41:$V7,70:15,71:16,76:22,77:$V8,93:$V9,94:$Va,95:$Vb,98:$Vc,101:$Ve,106:$Vf,107:$VN},{7:97,8:102,10:109,11:103,12:99,13:100,14:101,15:104,17:173,18:98,19:$VJ,22:106,23:$VK,24:$VL,25:$V0,26:$V1,27:32,29:$VM,36:110,37:$V3,38:$V4,39:$V5,40:$V6,41:$V7,70:15,71:16,76:22,77:$V8,79:[1,303],93:$V9,94:$Va,95:$Vb,98:$Vc,101:$Ve,106:$Vf,107:$VN},o($VO,[2,136]),{48:[1,304]},{29:$VH,41:$Vr,44:76,49:$Vt,50:$Vu,51:305,52:$Vv,53:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,61:$VC,64:$VD},o($V11,[2,49]),o($V11,[2,50]),o($V11,[2,51]),o($V11,[2,52]),{47:[1,306]},{48:[1,307],90:$V21,91:$V31},{78:[1,308]},{7:97,8:102,10:109,11:103,12:99,13:100,14:101,15:104,17:173,18:98,19:$VJ,22:106,23:$VK,24:$VL,25:$V0,26:$V1,27:32,29:$VM,36:110,37:$V3,38:$V4,39:$V5,40:$V6,41:$V7,70:15,71:16,76:22,77:$V8,79:[1,309],93:$V9,94:$Va,95:$Vb,98:$Vc,101:$Ve,106:$Vf,107:$VN},{29:$VH,41:$Vr,44:76,49:$Vt,50:$Vu,51:73,52:$Vv,53:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,61:$VC,64:$VD,69:310,83:93,92:$VI},{21:[1,311]},o($V51,[2,130]),{28:$V91,48:[1,312]},{48:[1,313]},o($Vl,$Vm),{79:[1,315],97:[1,316],99:[1,314]},{29:$VH,41:$Vr,44:76,49:$Vt,50:$Vu,51:317,52:$Vv,53:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,61:$VC,64:$VD},o($V61,[2,88]),{21:[1,318],60:$VY,61:$VZ,62:$V_,63:$V$,65:$V01},{73:[1,319]},{7:97,8:102,10:109,11:103,12:99,13:100,14:101,15:104,17:173,18:98,19:$VJ,22:106,23:$VK,24:$VL,25:$V0,26:$V1,27:32,29:$VM,36:110,37:$V3,38:$V4,39:$V5,40:$V6,41:$V7,70:15,71:16,76:22,77:$V8,79:[1,320],93:$V9,94:$Va,95:$Vb,98:$Vc,101:$Ve,106:$Vf,107:$VN},{7:97,8:102,10:109,11:103,12:99,13:100,14:101,15:104,16:321,17:96,18:98,19:$VJ,22:106,23:$VK,24:$VL,25:$V0,26:$V1,27:32,29:$VM,36:110,37:$V3,38:$V4,39:$V5,40:$V6,41:$V7,70:15,71:16,76:22,77:$V8,93:$V9,94:$Va,95:$Vb,98:$Vc,101:$Ve,106:$Vf,107:$VN},{21:[1,322]},o($Vh,[2,75]),{21:[1,323],72:[1,324]},{21:[1,325],60:$VY,61:$VZ,62:$V_,63:$V$,65:$V01},{7:97,8:102,10:109,11:103,12:99,13:100,14:101,15:104,17:173,18:98,19:$VJ,22:106,23:$VK,24:$VL,25:$V0,26:$V1,27:32,29:$VM,36:110,37:$V3,38:$V4,39:$V5,40:$V6,41:$V7,70:15,71:16,76:22,77:$V8,79:[1,326],93:$V9,94:$Va,95:$Vb,98:$Vc,101:$Ve,106:$Vf,107:$VN},o($Vb1,[2,70]),o($Vg,[2,126]),{72:[1,327]},{28:$V91,73:[1,328]},{75:[1,329]},{72:[1,331],74:[1,330]},{7:97,8:102,10:109,11:103,12:99,13:100,14:101,15:104,17:173,18:98,19:$VJ,22:106,23:$VK,24:$VL,25:$V0,26:$V1,27:32,29:$VM,36:110,37:$V3,38:$V4,39:$V5,40:$V6,41:$V7,70:15,71:16,76:22,77:$V8,79:[1,332],93:$V9,94:$Va,95:$Vb,98:$Vc,101:$Ve,106:$Vf,107:$VN},o($Vg,[2,128]),o($V11,[2,48]),{48:[1,333],60:$VY,61:$VZ,62:$V_,63:$V$,65:$V01},{29:$VH,41:$Vr,44:76,49:$Vt,50:$Vu,51:334,52:$Vv,53:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,61:$VC,64:$VD},{78:[1,335]},{7:97,8:102,10:109,11:103,12:99,13:100,14:101,15:104,16:336,17:96,18:98,19:$VJ,22:106,23:$VK,24:$VL,25:$V0,26:$V1,27:32,29:$VM,36:110,37:$V3,38:$V4,39:$V5,40:$V6,41:$V7,70:15,71:16,76:22,77:$V8,93:$V9,94:$Va,95:$Vb,98:$Vc,101:$Ve,106:$Vf,107:$VN},o($Vi,[2,118]),{48:[1,337],90:$V21,91:$V31},o($V51,[2,129]),{21:[1,338]},{78:[1,339]},{42:[1,340]},o($Vi,[2,124]),{29:$VH,41:$Vr,44:76,49:$Vt,50:$Vu,51:341,52:$Vv,53:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,61:$VC,64:$VD},{42:[1,342],60:$VY,61:$VZ,62:$V_,63:$V$,65:$V01},o($Vh,[2,95]),{68:[1,343]},o($Vd1,[2,98]),{7:97,8:102,10:109,11:103,12:99,13:100,14:101,15:104,17:173,18:98,19:$VJ,21:[2,106],22:106,23:$VK,24:$VL,25:$V0,26:$V1,27:32,29:$VM,36:110,37:$V3,38:$V4,39:$V5,40:$V6,41:$V7,70:15,71:16,76:22,77:$V8,93:$V9,94:$Va,95:$Vb,98:$Vc,101:$Ve,106:$Vf,107:$VN},o($Vh,[2,74]),o($Vh,[2,93]),{56:[1,344]},o($Vh,[2,77]),o($Vg,[2,125]),{29:$VH,41:$Vr,44:76,49:$Vt,50:$Vu,51:345,52:$Vv,53:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,61:$VC,64:$VD},{21:[1,346]},{47:[1,347]},{36:348,37:$V3,38:$V4,39:$V5,40:$V6,41:$V7},{72:[1,349]},o($Vg,[2,127]),o($V11,[2,65]),{48:[1,350],60:$VY,61:$VZ,62:$V_,63:$V$,65:$V01},{7:97,8:102,10:109,11:103,12:99,13:100,14:101,15:104,16:351,17:96,18:98,19:$VJ,22:106,23:$VK,24:$VL,25:$V0,26:$V1,27:32,29:$VM,36:110,37:$V3,38:$V4,39:$V5,40:$V6,41:$V7,70:15,71:16,76:22,77:$V8,93:$V9,94:$Va,95:$Vb,98:$Vc,101:$Ve,106:$Vf,107:$VN},{7:97,8:102,10:109,11:103,12:99,13:100,14:101,15:104,17:173,18:98,19:$VJ,22:106,23:$VK,24:$VL,25:$V0,26:$V1,27:32,29:$VM,36:110,37:$V3,38:$V4,39:$V5,40:$V6,41:$V7,70:15,71:16,76:22,77:$V8,79:[1,352],93:$V9,94:$Va,95:$Vb,98:$Vc,101:$Ve,106:$Vf,107:$VN},{21:[1,353]},o($V51,[2,143]),{7:97,8:102,10:109,11:103,12:99,13:100,14:101,15:104,16:354,17:96,18:98,19:$VJ,22:106,23:$VK,24:$VL,25:$V0,26:$V1,27:32,29:$VM,36:110,37:$V3,38:$V4,39:$V5,40:$V6,41:$V7,70:15,71:16,76:22,77:$V8,93:$V9,94:$Va,95:$Vb,98:$Vc,101:$Ve,106:$Vf,107:$VN},{7:97,8:102,10:109,11:103,12:99,13:100,14:101,15:104,16:355,17:96,18:98,19:$VJ,22:106,23:$VK,24:$VL,25:$V0,26:$V1,27:32,29:$VM,36:110,37:$V3,38:$V4,39:$V5,40:$V6,41:$V7,70:15,71:16,76:22,77:$V8,93:$V9,94:$Va,95:$Vb,98:$Vc,101:$Ve,106:$Vf,107:$VN},{42:[1,356],60:$VY,61:$VZ,62:$V_,63:$V$,65:$V01},{7:97,8:102,10:109,11:103,12:99,13:100,14:101,15:104,16:357,17:96,18:98,19:$VJ,22:106,23:$VK,24:$VL,25:$V0,26:$V1,27:32,29:$VM,36:110,37:$V3,38:$V4,39:$V5,40:$V6,41:$V7,70:15,71:16,76:22,77:$V8,93:$V9,94:$Va,95:$Vb,98:$Vc,101:$Ve,106:$Vf,107:$VN},{29:$VH,41:$Vr,44:76,49:$Vt,50:$Vu,51:358,52:$Vv,53:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,61:$VC,64:$VD},{73:[1,359]},{60:$VY,61:$VZ,62:$V_,63:$V$,65:$V01,73:[1,360]},o($Vh,[2,91]),{48:[1,361]},{72:[1,362]},{29:$VH,41:$Vr,44:76,49:$Vt,50:$Vu,51:138,52:$Vv,53:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,61:$VC,64:$VD,66:363},o($V11,[2,53]),{7:97,8:102,10:109,11:103,12:99,13:100,14:101,15:104,17:173,18:98,19:$VJ,22:106,23:$VK,24:$VL,25:$V0,26:$V1,27:32,29:$VM,36:110,37:$V3,38:$V4,39:$V5,40:$V6,41:$V7,70:15,71:16,76:22,77:$V8,79:[1,364],93:$V9,94:$Va,95:$Vb,98:$Vc,101:$Ve,106:$Vf,107:$VN},o($Vd1,[2,100]),o($Vi,[2,119]),{7:97,8:102,10:109,11:103,12:99,13:100,14:101,15:104,17:173,18:98,19:$VJ,22:106,23:$VK,24:$VL,25:$V0,26:$V1,27:32,29:$VM,36:110,37:$V3,38:$V4,39:$V5,40:$V6,41:$V7,70:15,71:16,76:22,77:$V8,79:[1,365],93:$V9,94:$Va,95:$Vb,98:$Vc,101:$Ve,106:$Vf,107:$VN},{7:97,8:102,10:109,11:103,12:99,13:100,14:101,15:104,17:173,18:98,19:$VJ,22:106,23:$VK,24:$VL,25:$V0,26:$V1,27:32,29:$VM,36:110,37:$V3,38:$V4,39:$V5,40:$V6,41:$V7,70:15,71:16,76:22,77:$V8,79:[1,366],93:$V9,94:$Va,95:$Vb,98:$Vc,101:$Ve,106:$Vf,107:$VN},{7:97,8:102,10:109,11:103,12:99,13:100,14:101,15:104,16:367,17:96,18:98,19:$VJ,22:106,23:$VK,24:$VL,25:$V0,26:$V1,27:32,29:$VM,36:110,37:$V3,38:$V4,39:$V5,40:$V6,41:$V7,70:15,71:16,76:22,77:$V8,93:$V9,94:$Va,95:$Vb,98:$Vc,101:$Ve,106:$Vf,107:$VN},o($Ve1,[2,122],{70:15,71:16,76:22,27:32,7:97,18:98,12:99,13:100,14:101,8:102,11:103,15:104,22:106,10:109,36:110,17:173,19:$VJ,23:$VK,24:$VL,25:$V0,26:$V1,29:$VM,37:$V3,38:$V4,39:$V5,40:$V6,41:$V7,77:$V8,93:$V9,94:$Va,95:$Vb,98:$Vc,101:$Ve,106:$Vf,107:$VN}),{21:[1,368],60:$VY,61:$VZ,62:$V_,63:$V$,65:$V01},{21:[1,369]},{21:[1,370]},{21:[1,371]},{29:$VH,41:$Vr,44:76,49:$Vt,50:$Vu,51:372,52:$Vv,53:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,61:$VC,64:$VD},{28:$V91,73:[1,373]},o($Vd1,[2,99]),o($Vi,[2,120]),o($Vi,[2,123]),o($Ve1,[2,121],{70:15,71:16,76:22,27:32,7:97,18:98,12:99,13:100,14:101,8:102,11:103,15:104,22:106,10:109,36:110,17:173,19:$VJ,23:$VK,24:$VL,25:$V0,26:$V1,29:$VM,37:$V3,38:$V4,39:$V5,40:$V6,41:$V7,77:$V8,93:$V9,94:$Va,95:$Vb,98:$Vc,101:$Ve,106:$Vf,107:$VN}),o($Vh,[2,96]),o($Vh,[2,94]),o($Vh,[2,89]),o($Vh,[2,97]),{60:$VY,61:$VZ,62:$V_,63:$V$,65:$V01,73:[1,374]},{28:[1,375]},{72:[1,376]},{72:[1,377]},{29:$VH,41:$Vr,44:76,49:$Vt,50:$Vu,51:378,52:$Vv,53:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,61:$VC,64:$VD},{29:$VH,41:$Vr,44:76,49:$Vt,50:$Vu,51:138,52:$Vv,53:$Vw,55:$Vx,56:$Vy,57:$Vz,58:$VA,59:$VB,61:$VC,64:$VD,66:379},{60:$VY,61:$VZ,62:$V_,63:$V$,65:$V01,73:[1,380]},{28:$V91,73:[1,381]},{21:[1,382]},{73:[1,383]},o($Vh,[2,90]),{21:[1,384]},o($Vh,[2,92])],
defaultActions: {35:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};


    const {TipoDato} = require("../Interprete/expresion")

    // Expresiones
    const Aritmetica = require("../Interprete/Expresiones/aritmetica")
    const Relacional = require("../Interprete/Expresiones/relacional")
    const Dato = require("../Interprete/Expresiones/dato")
    const Negativo = require("../Interprete/Expresiones/negativo")
    const opLogico = require("../Interprete/Expresiones/opLogicos")
    const Negacion = require("../Interprete/Expresiones/negacion")
    const FuncionCout = require("../Interprete/Expresiones/funcioncout")
    const Variable = require("../Interprete/Expresiones/variable")

    // Instrucciones
    const Cout = require("../Interprete/Instrucciones/cout")
    const If = require("../Interprete/Instrucciones/if")
    const ElseIf = require("../Interprete/Instrucciones/elseif")
    const Else = require("../Interprete/Instrucciones/else")
    const While = require("../Interprete/Instrucciones/while")
    const DoWhile = require("../Interprete/Instrucciones/doWhile")
    const For = require("../Interprete/Instrucciones/for")
    const Break = require("../Interprete/Instrucciones/break")
    const Declaracion = require("../Interprete/Instrucciones/declaracion")
    const Ternario = require("../Interprete/Instrucciones/ternario")
    const ActualizacionFor = require("../Interprete/Instrucciones/actualizacionFor")
    const ModificarVar = require("../Interprete/Instrucciones/modificarVar")
    const Case = require("../Interprete/Instrucciones/case")
    const Switch = require("../Interprete/Instrucciones/switch")
    const DeclaracionVec = require("../Interprete/Instrucciones/declaracionVec")
    const DeclaracionMatriz = require("../Interprete/Instrucciones/declaracionMatriz")

    // Operaciones Mayores
    const SentenciaIf = require("../Interprete/OperacionesMayores/sentenciaIf")
    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:return 25; 
break;
case 5:return 26; 
break;
case 6:return 37;
break;
case 7:return 38;
break;
case 8:return 39;
break;
case 9:return 40;
break;
case 10:return 43;
break;
case 11:return 74;
break;
case 12:return 77;
break;
case 13:return 81;
break;
case 14:return 93;
break;
case 15:return 95;
break;
case 16:return 94;
break;
case 17:return 23;
break;
case 18:return 24;
break;
case 19:return 107;
break;
case 20:return 100;
break;
case 21:return 106;
break;
case 22:return 103;
break;
case 23:return 52;
break;
case 24:return 53;
break;
case 25:return 50;
break;
case 26:return 46;
break;
case 27:return 49;
break;
case 28:return 54;
break;
case 29:return 41;
break;
case 30:return 75;
break;
case 31:return 101;
break;
case 32:return 98;
break;
case 33:return 97;
break;
case 34:return 99;
break;
case 35:return 57; 
break;
case 36:return 59; 
break;
case 37:return 58; 
break;
case 38:return 29; 
break;
case 39:return 55; 
break;
case 40:return 56; 
break;
case 41:return 31;
break;
case 42:return 32;
break;
case 43:return 33;
break;
case 44:return 34;
break;
case 45:return 35;
break;
case 46:return 60;
break;
case 47:return 61;
break;
case 48:return 62;
break;
case 49:return 63;
break;
case 50:return 64;
break;
case 51:return 65;
break;
case 52:return 'ENTRADA';
break;
case 53:return 105;
break;
case 54:return 84;
break;
case 55:return 85;
break;
case 56:return 87;
break;
case 57:return 89;
break;
case 58:return 88;
break;
case 59:return 86;
break;
case 60:return 68;
break;
case 61:return 90;
break;
case 62:return 91;
break;
case 63:return 92;
break;
case 64:return 47;
break;
case 65:return 48;
break;
case 66:return 78;
break;
case 67:return 79;
break;
case 68:return 72;
break;
case 69:return 73;
break;
case 70:return 21;
break;
case 71:return 28;
break;
case 72:return 42;
break;
case 73:return 45;
break;
case 74:return 19;
break;
case 75:return 5;
break;
case 76:console.error('Este es un error l√©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:{COM_MULT})/i,/^(?:{COM_SIMPLE})/i,/^(?:(\/\*[\s\S]*?\*\/))/i,/^(?:(\/\/.*))/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:bool\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:cout\b)/i,/^(?:endl\b)/i,/^(?:toupper\b)/i,/^(?:tolower\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:std\b)/i,/^(?:c_str\b)/i,/^(?:execute\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:(true|false\b))/i,/^(?:('(([^\n\"\\]|\\.)*)'))/i,/^(?:([\"][^\"\n]+[\"]))/i,/^(?:([a-zA-Z_][a-zA-Z0-9_]*))/i,/^(?:([0-9]+\.[0-9]+\b))/i,/^(?:([0-9]+\b))/i,/^(?:\\n)/i,/^(?:\\)/i,/^(?:\\")/i,/^(?:\\t)/i,/^(?:')/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:pow\b)/i,/^(?:%)/i,/^(?:>>)/i,/^(?:<<)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?:,)/i,/^(?::)/i,/^(?:\.)/i,/^(?:\?)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}