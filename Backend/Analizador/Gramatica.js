/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,16],$V2=[1,24],$V3=[1,19],$V4=[1,20],$V5=[1,21],$V6=[1,22],$V7=[1,23],$V8=[1,18],$V9=[1,14],$Va=[1,13],$Vb=[1,17],$Vc=[5,24,25,27,36,37,38,39,40,76,100,101,106],$Vd=[5,21,23,24,25,27,36,37,38,39,40,76,78,93,94,95,97,98,99,100,101,106,107],$Ve=[27,52,67],$Vf=[1,35],$Vg=[1,36],$Vh=[2,27],$Vi=[22,69],$Vj=[1,40],$Vk=[1,55],$Vl=[1,46],$Vm=[1,47],$Vn=[1,48],$Vo=[1,49],$Vp=[1,50],$Vq=[1,51],$Vr=[1,52],$Vs=[1,53],$Vt=[1,54],$Vu=[1,43],$Vv=[1,44],$Vw=[1,63],$Vx=[1,62],$Vy=[1,61],$Vz=[1,64],$VA=[1,69],$VB=[1,67],$VC=[1,72],$VD=[1,83],$VE=[1,84],$VF=[1,85],$VG=[1,86],$VH=[1,87],$VI=[2,55],$VJ=[1,89],$VK=[22,28,41,52,59,60,61,62,64,68,82,84,85,86,87,88,89,90,91,105],$VL=[22,105],$VM=[22,52,82,90,91,105],$VN=[1,114],$VO=[1,115],$VP=[22,52,82,90,91],$VQ=[1,126],$VR=[1,146],$VS=[22,28,52,68],$VT=[1,182],$VU=[1,183],$VV=[1,186],$VW=[1,188],$VX=[1,189],$VY=[1,190],$VZ=[1,191],$V_=[1,192],$V$=[28,52],$V01=[21,23,24,25,27,36,37,38,39,40,76,78,93,94,95,97,98,99,101,106,107],$V11=[1,264],$V21=[1,358],$V31=[21,23,24,25,27,36,37,38,39,40,76,78,80,93,94,95,97,98,99,101,106,107],$V41=[78,97,99];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"entornos":4,"EOF":5,"entorno":6,"declaracionVariables":7,"funcionExecute":8,"funciones":9,"comentarios":10,"impresionCout":11,"sentenciaIf":12,"instrucciones":13,"instruccion":14,"llamarFunciones":15,"sentenciaIfCompleta":16,"ciclosWhile":17,"cicloFor":18,"switchCase":19,"sentenciaReturn":20,"PR_BREAK":21,"PTCOMA":22,"PR_CONTINUE":23,"COM_MULT":24,"COM_SIMPLE":25,"identificadores":26,"ID":27,"COMA":28,"secuenciasEscape":29,"SALTO_LINEA":30,"BARRA_INVERTIDA":31,"COMILLA_DOBLE":32,"TABULACION":33,"COMILLA_SIMPLE":34,"tiposVar":35,"PR_INT":36,"PR_DOUBLE":37,"PR_BOOL":38,"PR_CHAR":39,"PR_STD":40,"DOSPUNTOS":41,"PR_STRING":42,"valores":43,"DECIMAL":44,"ENTERO":45,"BOOLEAN":46,"STRING":47,"CHAR":48,"PUNTO":49,"PR_LENGTH":50,"PARIZQ":51,"PARDER":52,"PR_TYPEOF":53,"PR_ROUND":54,"PR_TOUPPER":55,"PR_TOLOWER":56,"PR_TOSTRING":57,"valoresPlus":58,"MAS":59,"MENOS":60,"POR":61,"DIVIDIDO":62,"POTENCIA":63,"MODULO":64,"valoresArreglos":65,"arregloDeclaraciones":66,"CORIZQ":67,"CORDER":68,"IGUAL":69,"sentenciaLogica":70,"ternario":71,"VectoresMatrices":72,"IncrementoDecremento":73,"PR_NEW":74,"PR_C_STR":75,"PR_IF":76,"LLAVIZQ":77,"LLAVDER":78,"sentenciaIfElse":79,"PR_ELSE":80,"sentenciaElse":81,"INTERROGACION":82,"sentenciaRelacional":83,"IGUALES":84,"DIFERENTE":85,"MENOR_QUE":86,"MENOR_IGUAL":87,"MAYOR_QUE":88,"MAYOR_IGUAL":89,"OR":90,"AND":91,"NOT":92,"PR_WHILE":93,"PR_DO":94,"PR_FOR":95,"recursividadCase":96,"PR_CASE":97,"PR_SWITCH":98,"PR_DEFAULT":99,"PR_VOID":100,"PR_EXECUTE":101,"posibilidadesCout":102,"PR_ENDL":103,"funcionCout":104,"SALIDA":105,"PR_COUT":106,"PR_RETURN":107,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",21:"PR_BREAK",22:"PTCOMA",23:"PR_CONTINUE",24:"COM_MULT",25:"COM_SIMPLE",27:"ID",28:"COMA",30:"SALTO_LINEA",31:"BARRA_INVERTIDA",32:"COMILLA_DOBLE",33:"TABULACION",34:"COMILLA_SIMPLE",36:"PR_INT",37:"PR_DOUBLE",38:"PR_BOOL",39:"PR_CHAR",40:"PR_STD",41:"DOSPUNTOS",42:"PR_STRING",44:"DECIMAL",45:"ENTERO",46:"BOOLEAN",47:"STRING",48:"CHAR",49:"PUNTO",50:"PR_LENGTH",51:"PARIZQ",52:"PARDER",53:"PR_TYPEOF",54:"PR_ROUND",55:"PR_TOUPPER",56:"PR_TOLOWER",57:"PR_TOSTRING",59:"MAS",60:"MENOS",61:"POR",62:"DIVIDIDO",63:"POTENCIA",64:"MODULO",67:"CORIZQ",68:"CORDER",69:"IGUAL",74:"PR_NEW",75:"PR_C_STR",76:"PR_IF",77:"LLAVIZQ",78:"LLAVDER",80:"PR_ELSE",82:"INTERROGACION",84:"IGUALES",85:"DIFERENTE",86:"MENOR_QUE",87:"MENOR_IGUAL",88:"MAYOR_QUE",89:"MAYOR_IGUAL",90:"OR",91:"AND",92:"NOT",93:"PR_WHILE",94:"PR_DO",95:"PR_FOR",97:"PR_CASE",98:"PR_SWITCH",99:"PR_DEFAULT",100:"PR_VOID",101:"PR_EXECUTE",103:"PR_ENDL",105:"SALIDA",106:"PR_COUT",107:"PR_RETURN"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[13,2],[13,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,2],[14,2],[14,1],[10,1],[10,1],[26,3],[26,1],[29,2],[29,2],[29,2],[29,2],[29,2],[29,1],[29,1],[29,1],[29,1],[29,1],[35,1],[35,1],[35,1],[35,1],[35,4],[43,1],[43,1],[43,1],[43,1],[43,1],[43,5],[43,4],[43,4],[43,4],[43,4],[43,4],[43,7],[43,1],[58,3],[58,3],[58,2],[58,3],[58,3],[58,6],[58,3],[58,1],[65,3],[65,1],[66,4],[66,6],[66,4],[66,2],[7,3],[7,5],[7,8],[7,7],[7,5],[7,8],[7,4],[7,7],[7,1],[73,3],[73,3],[72,11],[72,16],[72,9],[72,17],[72,8],[72,11],[72,7],[72,10],[72,11],[12,7],[79,9],[79,8],[81,4],[16,3],[16,2],[16,2],[16,1],[71,5],[83,3],[83,3],[83,3],[83,3],[83,3],[83,3],[83,1],[70,3],[70,3],[70,2],[70,1],[17,7],[17,9],[18,14],[18,13],[96,5],[96,4],[19,10],[19,7],[9,8],[9,7],[9,8],[9,7],[15,5],[15,4],[8,6],[8,5],[102,1],[102,2],[102,3],[102,4],[102,1],[104,3],[104,1],[11,4],[20,3],[20,6],[20,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = $$[$0-1]; return this.$; 
break;
case 2: case 10:
this.$ = $$[$0-1]; this.$.push($$[$0]);
break;
case 3: case 11:
this.$ = []; this.$.push($$[$0]);
break;
case 8: case 9: case 18:
this.$ = $$[$0];
break;
case 43:
this.$ = new Dato($$[$0], TipoDato.DECIMAL, _$[$0].first_line, _$[$0].first_column); 
break;
case 44:
this.$ = new Dato($$[$0], TipoDato.ENTERO, _$[$0].first_line, _$[$0].first_column); 
break;
case 45:
this.$ = new Dato($$[$0], TipoDato.BOOL, _$[$0].first_line, _$[$0].first_column); 
break;
case 46:
this.$ = new Dato($$[$0], TipoDato.STRING, _$[$0].first_line, _$[$0].first_column); 
break;
case 47:
this.$ = new Dato($$[$0], TipoDato.CHAR, _$[$0].first_line, _$[$0].first_column); 
break;
case 56: case 57: case 59: case 60: case 62:
 this.$ = new Aritmetica($$[$0-2], $$[$0], $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 58:
 this.$ = new Negativo($$[$0], _$[$0-1].first_line, _$[$0-1].first_column);           
break;
case 61:
 this.$ = new Aritmetica($$[$0-3], $$[$0-1], $$[$0-4], _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 63: case 105: case 109: case 131: case 132:
 this.$ = $$[$0]; 
break;
case 90:
this.$ = new If($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column)
break;
case 99: case 100: case 101: case 102: case 103: case 104:
 this.$ = new Relacional($$[$0-2], $$[$0], $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 106:
 this.$ = new opLogicos($$[$0-2], $$[$0], $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 107:
 this.$ = new opLogico($$[$0-2], $$[$0], $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 108:
 this.$ = new Negacion($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 126:
 this.$ = $$[$0];
break;
case 127:
 console.log($$[$0-1], $$[$0]); 
break;
case 133:
 this.$ = new Cout($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,24:$V0,25:$V1,26:11,27:$V2,35:10,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7,72:12,76:$V8,100:$V9,101:$Va,106:$Vb},{1:[3]},{5:[1,25],6:26,7:4,8:5,9:6,10:7,11:8,12:9,24:$V0,25:$V1,26:11,27:$V2,35:10,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7,72:12,76:$V8,100:$V9,101:$Va,106:$Vb},o($Vc,[2,3]),o($Vc,[2,4]),o($Vc,[2,5]),o($Vc,[2,6]),o($Vc,[2,7]),o($Vc,[2,8]),o($Vc,[2,9]),{26:27,27:[1,28]},{69:[1,29]},o($Vd,[2,78]),{27:[1,30]},{27:[1,31]},o($Vd,[2,24]),o($Vd,[2,25]),{105:[1,32]},{51:[1,33]},o($Ve,[2,38]),o($Ve,[2,39]),o($Ve,[2,40]),o($Ve,[2,41]),{41:[1,34]},{28:$Vf,67:$Vg,69:$Vh},{1:[2,1]},o($Vc,[2,2]),{22:[1,37],69:[1,38]},o($Vi,$Vh,{28:$Vf,51:[1,39],67:$Vj}),{27:[1,42],40:$Vk,43:45,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,58:41,60:$Vu,63:$Vv},{51:[1,56]},{51:[1,57]},{27:$Vw,40:$Vk,43:45,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,51:$Vx,53:$Vq,54:$Vr,55:$Vs,56:$Vt,58:65,60:$Vu,63:$Vv,83:60,92:$Vy,102:59,103:$Vz,104:58},{27:$VA,40:$Vk,43:45,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,58:65,60:$Vu,63:$Vv,70:66,83:68,92:$VB},{41:[1,70]},{26:71,27:$VC},{45:[1,73]},o($Vd,[2,70]),{27:[1,75],40:$Vk,43:45,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,51:[1,77],53:$Vq,54:$Vr,55:$Vs,56:$Vt,58:65,60:$Vu,63:$Vv,70:74,71:76,83:68,92:$VB},{35:80,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7,52:[1,79],66:78},{68:[1,81]},{22:[1,82],59:$VD,60:$VE,61:$VF,62:$VG,64:$VH},o([22,59,60,61,62,64],$VI,{49:$VJ,67:[1,88]}),{27:$VA,40:$Vk,43:45,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,58:90,60:$Vu,63:$Vv},{51:[1,91]},o($VK,[2,63]),o($VK,[2,43]),o($VK,[2,44]),o($VK,[2,45]),o($VK,[2,46]),o($VK,[2,47]),{51:[1,92]},{51:[1,93]},{51:[1,94]},{51:[1,95]},{41:[1,96]},{27:$VA,40:$Vk,43:45,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,52:[1,98],53:$Vq,54:$Vr,55:$Vs,56:$Vt,58:99,60:$Vu,63:$Vv,65:97},{35:80,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7,52:[1,101],66:100},{22:[1,102],105:[1,103]},o($VL,[2,132]),o($VL,[2,126]),{46:[1,104]},{27:$VA,40:$Vk,43:45,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,58:65,60:$Vu,63:$Vv,70:105,83:68,92:$VB},o([22,59,60,61,62,64,84,85,86,87,88,89,105],$VI,{49:$VJ,51:[1,106]}),o($VL,[2,130]),o($VM,[2,105],{59:$VD,60:$VE,61:$VF,62:$VG,64:$VH,84:[1,107],85:[1,108],86:[1,109],87:[1,110],88:[1,111],89:[1,112]}),{52:[1,113],90:$VN,91:$VO},{27:$VA,40:$Vk,43:45,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,58:65,60:$Vu,63:$Vv,70:116,83:68,92:$VB},o($VP,[2,109]),o($VK,$VI,{49:$VJ}),{42:[1,117]},o($Vi,[2,26]),o($Vi,$Vh,{28:$Vf}),{68:[1,118]},{22:[1,119],82:[1,120],90:$VN,91:$VO},o([22,59,60,61,62,64,82,84,85,86,87,88,89,90,91],$VI,{49:$VJ,51:[1,121],67:[1,122]}),{22:[1,123]},{35:124,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7},{28:$VQ,52:[1,125]},{77:[1,127]},{27:[1,128]},{67:[1,130],69:[1,129]},o($Vd,[2,76]),{27:$VA,40:$Vk,43:131,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt},{27:$VA,40:$Vk,43:132,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt},{27:$VA,40:$Vk,43:133,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt},{27:$VA,40:$Vk,43:134,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt},{27:$VA,40:$Vk,43:135,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt},{27:$VA,40:$Vk,43:45,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,58:99,60:$Vu,63:$Vv,65:136},{50:[1,137]},o($VK,[2,58]),{27:$VA,40:$Vk,43:45,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,58:138,60:$Vu,63:$Vv},{27:[1,139]},{44:[1,140],45:[1,141]},{47:[1,142]},{47:[1,143]},{41:[1,144]},{28:$VR,52:[1,145]},{22:[1,147]},o($VS,[2,65],{59:$VD,60:$VE,61:$VF,62:$VG,64:$VH}),{28:$VQ,52:[1,148]},{77:[1,149]},o($Vd,[2,133]),{27:$Vw,40:$Vk,43:45,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,51:$Vx,53:$Vq,54:$Vr,55:$Vs,56:$Vt,58:65,60:$Vu,63:$Vv,83:60,92:$Vy,102:150,103:$Vz},o($VL,[2,127]),{52:[1,151],90:$VN,91:$VO},{27:$VA,40:$Vk,43:45,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,58:99,60:$Vu,63:$Vv,65:152},{27:$VA,40:$Vk,43:45,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,58:153,60:$Vu,63:$Vv},{27:$VA,40:$Vk,43:45,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,58:154,60:$Vu,63:$Vv},{27:$VA,40:$Vk,43:45,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,58:155,60:$Vu,63:$Vv},{27:$VA,40:$Vk,43:45,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,58:156,60:$Vu,63:$Vv},{27:$VA,40:$Vk,43:45,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,58:157,60:$Vu,63:$Vv},{27:$VA,40:$Vk,43:45,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,58:158,60:$Vu,63:$Vv},{77:[1,159]},{27:$VA,40:$Vk,43:45,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,58:65,60:$Vu,63:$Vv,83:160},{27:$VA,40:$Vk,43:45,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,58:65,60:$Vu,63:$Vv,83:161},o($VP,[2,108]),o($Ve,[2,42]),{67:[1,163],69:[1,162]},o($Vd,[2,71]),{27:$VA,40:$Vk,43:45,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,58:164,60:$Vu,63:$Vv},{27:$VA,40:$Vk,43:45,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,52:[1,166],53:$Vq,54:$Vr,55:$Vs,56:$Vt,58:99,60:$Vu,63:$Vv,65:165},{45:[1,167]},o($Vd,[2,74]),{52:[1,168]},{77:[1,169]},{35:170,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7},{7:173,8:178,10:184,11:179,12:187,13:171,14:172,15:174,16:175,17:176,18:177,19:180,20:181,21:$VT,23:$VU,24:$V0,25:$V1,26:11,27:$VV,35:185,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7,72:12,76:$V8,93:$VW,94:$VX,95:$VY,98:$VZ,101:$Va,106:$Vb,107:$V_},o($V$,[2,69],{67:[1,193]}),{27:[1,196],67:[1,195],74:[1,194]},{68:[1,197]},o($VK,[2,56]),o($VK,[2,57]),o($VK,[2,59]),o($VK,[2,60]),o($VK,[2,62]),{28:$VR,68:[1,198]},{51:[1,199]},{28:[1,200],59:$VD,60:$VE,61:$VF,62:$VG,64:$VH},{52:[1,201]},{52:[1,202]},{52:[1,203]},{52:[1,204]},{52:[1,205]},{57:[1,206]},{22:[1,207]},{27:$VA,40:$Vk,43:45,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,58:208,60:$Vu,63:$Vv},o($Vd,[2,125]),{77:[1,209]},{7:173,8:178,10:184,11:179,12:187,13:210,14:172,15:174,16:175,17:176,18:177,19:180,20:181,21:$VT,23:$VU,24:$V0,25:$V1,26:11,27:$VV,35:185,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7,72:12,76:$V8,93:$VW,94:$VX,95:$VY,98:$VZ,101:$Va,106:$Vb,107:$V_},o($VL,[2,131]),o($VL,[2,128]),{28:$VR,52:[1,211]},o($VM,[2,99],{59:$VD,60:$VE,61:$VF,62:$VG,64:$VH}),o($VM,[2,100],{59:$VD,60:$VE,61:$VF,62:$VG,64:$VH}),o($VM,[2,101],{59:$VD,60:$VE,61:$VF,62:$VG,64:$VH}),o($VM,[2,102],{59:$VD,60:$VE,61:$VF,62:$VG,64:$VH}),o($VM,[2,103],{59:$VD,60:$VE,61:$VF,62:$VG,64:$VH}),o($VM,[2,104],{59:$VD,60:$VE,61:$VF,62:$VG,64:$VH}),{7:173,8:178,10:184,11:179,12:187,13:212,14:172,15:174,16:175,17:176,18:177,19:180,20:181,21:$VT,23:$VU,24:$V0,25:$V1,26:11,27:$VV,35:185,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7,72:12,76:$V8,93:$VW,94:$VX,95:$VY,98:$VZ,101:$Va,106:$Vb,107:$V_},o($VP,[2,106]),o($VP,[2,107]),{27:$VA,40:$Vk,43:45,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,58:213,60:$Vu,63:$Vv},{45:[1,214]},{41:[1,215],59:$VD,60:$VE,61:$VF,62:$VG,64:$VH},{28:$VR,52:[1,216]},{22:[1,217]},{68:[1,218]},{27:$VA,40:$Vk,43:45,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,58:219,60:$Vu,63:$Vv},{7:173,8:178,10:184,11:179,12:187,13:220,14:172,15:174,16:175,17:176,18:177,19:180,20:181,21:$VT,23:$VU,24:$V0,25:$V1,26:11,27:$VV,35:185,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7,72:12,76:$V8,93:$VW,94:$VX,95:$VY,98:$VZ,101:$Va,106:$Vb,107:$V_},{27:[1,221]},{7:173,8:178,10:184,11:179,12:187,14:223,15:174,16:175,17:176,18:177,19:180,20:181,21:$VT,23:$VU,24:$V0,25:$V1,26:11,27:$VV,35:185,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7,72:12,76:$V8,78:[1,222],93:$VW,94:$VX,95:$VY,98:$VZ,101:$Va,106:$Vb,107:$V_},o($V01,[2,11]),o($V01,[2,12]),o($V01,[2,13]),o($V01,[2,14]),o($V01,[2,15]),o($V01,[2,16]),o($V01,[2,17]),o($V01,[2,18]),o($V01,[2,19]),o($V01,[2,20]),{22:[1,224]},{22:[1,225]},o($V01,[2,23]),{26:27,27:[1,226]},{28:$Vf,51:[1,227],67:$Vg,69:$Vh},o($V01,[2,97],{79:228,81:229,80:[1,230]}),{51:[1,231]},{77:[1,232]},{51:[1,233]},{51:[1,234]},{22:[1,237],27:[1,236],40:$Vk,43:45,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,58:99,60:$Vu,63:$Vv,65:235},{68:[1,238]},{35:239,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7},{27:$VA,40:$Vk,43:45,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,58:99,60:$Vu,63:$Vv,65:240},{49:[1,241]},{69:[1,242]},{22:[1,243]},{52:[1,244]},{27:$VA,40:$Vk,43:45,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,58:245,60:$Vu,63:$Vv},o($VK,[2,49]),o($VK,[2,50]),o($VK,[2,51]),o($VK,[2,52]),o($VK,[2,53]),{51:[1,246]},o($Vd,[2,124]),o($VS,[2,64],{59:$VD,60:$VE,61:$VF,62:$VG,64:$VH}),{7:173,8:178,10:184,11:179,12:187,13:247,14:172,15:174,16:175,17:176,18:177,19:180,20:181,21:$VT,23:$VU,24:$V0,25:$V1,26:11,27:$VV,35:185,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7,72:12,76:$V8,93:$VW,94:$VX,95:$VY,98:$VZ,101:$Va,106:$Vb,107:$V_},{7:173,8:178,10:184,11:179,12:187,14:223,15:174,16:175,17:176,18:177,19:180,20:181,21:$VT,23:$VU,24:$V0,25:$V1,26:11,27:$VV,35:185,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7,72:12,76:$V8,78:[1,248],93:$VW,94:$VX,95:$VY,98:$VZ,101:$Va,106:$Vb,107:$V_},o($VL,[2,129]),{7:173,8:178,10:184,11:179,12:187,14:223,15:174,16:175,17:176,18:177,19:180,20:181,21:$VT,23:$VU,24:$V0,25:$V1,26:11,27:$VV,35:185,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7,72:12,76:$V8,78:[1,249],93:$VW,94:$VX,95:$VY,98:$VZ,101:$Va,106:$Vb,107:$V_},{22:[1,250],59:$VD,60:$VE,61:$VF,62:$VG,64:$VH},{68:[1,251]},{27:$VA,40:$Vk,43:45,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,58:252,60:$Vu,63:$Vv},{22:[1,253]},o($Vd,[2,73]),{22:[1,254],67:[1,255]},{22:[1,256],59:$VD,60:$VE,61:$VF,62:$VG,64:$VH},{7:173,8:178,10:184,11:179,12:187,14:223,15:174,16:175,17:176,18:177,19:180,20:181,21:$VT,23:$VU,24:$V0,25:$V1,26:11,27:$VV,35:185,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7,72:12,76:$V8,78:[1,257],93:$VW,94:$VX,95:$VY,98:$VZ,101:$Va,106:$Vb,107:$V_},o($V$,[2,66],{67:[1,258]}),o($Vc,[2,119]),o($V01,[2,10]),o($V01,[2,21]),o($V01,[2,22]),o($Vi,$Vh,{28:$Vf,67:$Vj}),{27:$VA,40:$Vk,43:45,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,52:[1,260],53:$Vq,54:$Vr,55:$Vs,56:$Vt,58:99,60:$Vu,63:$Vv,65:259},o($V01,[2,95],{81:261,80:[1,262]}),o($V01,[2,96]),{76:[1,263],77:$V11},{27:$VA,40:$Vk,43:45,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,58:65,60:$Vu,63:$Vv,70:265,83:68,92:$VB},{7:173,8:178,10:184,11:179,12:187,13:266,14:172,15:174,16:175,17:176,18:177,19:180,20:181,21:$VT,23:$VU,24:$V0,25:$V1,26:11,27:$VV,35:185,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7,72:12,76:$V8,93:$VW,94:$VX,95:$VY,98:$VZ,101:$Va,106:$Vb,107:$V_},{26:268,27:$VC,35:267,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7},{27:$VA,40:$Vk,43:45,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,58:269,60:$Vu,63:$Vv},{22:[1,270],28:$VR},o([22,28,59,60,61,62,64],$VI,{49:$VJ,51:[1,271]}),o($V01,[2,136]),o($V$,[2,68]),{67:[1,272]},{28:$VR,68:[1,273]},{75:[1,274]},{67:[1,276],74:[1,275]},o($Vd,[2,77]),o($VK,[2,48]),{52:[1,277],59:$VD,60:$VE,61:$VF,62:$VG,64:$VH},{27:$VA,40:$Vk,43:45,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,58:278,60:$Vu,63:$Vv},{7:173,8:178,10:184,11:179,12:187,14:223,15:174,16:175,17:176,18:177,19:180,20:181,21:$VT,23:$VU,24:$V0,25:$V1,26:11,27:$VV,35:185,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7,72:12,76:$V8,78:[1,279],93:$VW,94:$VX,95:$VY,98:$VZ,101:$Va,106:$Vb,107:$V_},o($Vc,[2,121]),o([5,21,23,24,25,27,36,37,38,39,40,76,78,80,93,94,95,97,98,99,100,101,106,107],[2,90]),o($Vd,[2,87]),{69:[1,280]},{22:[2,98],59:$VD,60:$VE,61:$VF,62:$VG,64:$VH},o($Vd,[2,72]),o($Vd,[2,85]),{45:[1,281]},o($Vd,[2,75]),o($Vc,[2,118]),{68:[1,282]},{28:$VR,52:[1,283]},{22:[1,284]},o($V01,[2,94]),{76:[1,285],77:$V11},{51:[1,286]},{7:173,8:178,10:184,11:179,12:187,13:287,14:172,15:174,16:175,17:176,18:177,19:180,20:181,21:$VT,23:$VU,24:$V0,25:$V1,26:11,27:$VV,35:185,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7,72:12,76:$V8,93:$VW,94:$VX,95:$VY,98:$VZ,101:$Va,106:$Vb,107:$V_},{52:[1,288],90:$VN,91:$VO},{7:173,8:178,10:184,11:179,12:187,14:223,15:174,16:175,17:176,18:177,19:180,20:181,21:$VT,23:$VU,24:$V0,25:$V1,26:11,27:$VV,35:185,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7,72:12,76:$V8,78:[1,289],93:$VW,94:$VX,95:$VY,98:$VZ,101:$Va,106:$Vb,107:$V_},{26:290,27:$VC},{69:[1,291]},{52:[1,292],59:$VD,60:$VE,61:$VF,62:$VG,64:$VH},o($V01,[2,134]),{27:$VA,40:$Vk,43:45,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,58:99,60:$Vu,63:$Vv,65:293},{45:[1,294]},{22:[1,295]},{51:[1,296]},{35:297,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7},{67:[1,298]},o($VK,[2,61]),{52:[1,299],59:$VD,60:$VE,61:$VF,62:$VG,64:$VH},o($Vc,[2,120]),{27:$VA,40:$Vk,43:45,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,58:300,60:$Vu,63:$Vv},{68:[1,301]},o($V$,[2,67]),{22:[1,302]},o($V01,[2,123]),{51:[1,303]},{27:$VA,40:$Vk,43:45,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,58:65,60:$Vu,63:$Vv,70:304,83:68,92:$VB},{7:173,8:178,10:184,11:179,12:187,14:223,15:174,16:175,17:176,18:177,19:180,20:181,21:$VT,23:$VU,24:$V0,25:$V1,26:11,27:$VV,35:185,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7,72:12,76:$V8,78:[1,305],93:$VW,94:$VX,95:$VY,98:$VZ,101:$Va,106:$Vb,107:$V_},{77:[1,306]},{93:[1,307]},{69:[1,308]},{27:$VA,40:$Vk,43:45,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,58:309,60:$Vu,63:$Vv},{77:[1,310]},{28:$VR,52:[1,311]},{68:[1,312]},o($Vd,[2,83]),{52:[1,313]},{67:[1,314]},{27:$VA,40:$Vk,43:45,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,58:99,60:$Vu,63:$Vv,65:315},o($VK,[2,54]),{22:[1,316],59:$VD,60:$VE,61:$VF,62:$VG,64:$VH},{22:[1,317]},o($V01,[2,122]),{27:$VA,40:$Vk,43:45,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,58:65,60:$Vu,63:$Vv,70:318,83:68,92:$VB},{52:[1,319],90:$VN,91:$VO},o($V01,[2,93]),{7:173,8:178,10:184,11:179,12:187,13:320,14:172,15:174,16:175,17:176,18:177,19:180,20:181,21:$VT,23:$VU,24:$V0,25:$V1,26:11,27:$VV,35:185,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7,72:12,76:$V8,93:$VW,94:$VX,95:$VY,98:$VZ,101:$Va,106:$Vb,107:$V_},{51:[1,321]},{27:$VA,40:$Vk,43:45,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,58:322,60:$Vu,63:$Vv},{22:[1,323],59:$VD,60:$VE,61:$VF,62:$VG,64:$VH},{96:324,97:[1,325]},{22:[1,326]},{22:[1,327]},{22:[1,328]},{45:[1,329]},{28:$VR,68:[1,330]},o($Vd,[2,88]),o($Vd,[2,86]),{52:[1,331],90:$VN,91:$VO},{77:[1,332]},{7:173,8:178,10:184,11:179,12:187,14:223,15:174,16:175,17:176,18:177,19:180,20:181,21:$VT,23:$VU,24:$V0,25:$V1,26:11,27:$VV,35:185,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7,72:12,76:$V8,78:[1,333],93:$VW,94:$VX,95:$VY,98:$VZ,101:$Va,106:$Vb,107:$V_},{27:$VA,40:$Vk,43:45,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,58:65,60:$Vu,63:$Vv,70:334,83:68,92:$VB},{22:[1,335],59:$VD,60:$VE,61:$VF,62:$VG,64:$VH},{27:$VA,40:$Vk,43:45,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,58:65,60:$Vu,63:$Vv,70:336,83:68,92:$VB},{78:[1,338],97:[1,339],99:[1,337]},{27:$VA,40:$Vk,43:45,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,58:340,60:$Vu,63:$Vv},o($V01,[2,135]),o($Vd,[2,81]),o($Vd,[2,89]),{68:[1,341]},{28:[1,342]},{77:[1,343]},{7:173,8:178,10:184,11:179,12:187,13:344,14:172,15:174,16:175,17:176,18:177,19:180,20:181,21:$VT,23:$VU,24:$V0,25:$V1,26:11,27:$VV,35:185,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7,72:12,76:$V8,93:$VW,94:$VX,95:$VY,98:$VZ,101:$Va,106:$Vb,107:$V_},o($V01,[2,110]),{52:[1,345],90:$VN,91:$VO},{27:$VA,40:$Vk,43:45,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,58:65,60:$Vu,63:$Vv,70:346,83:68,92:$VB},{22:[1,347],90:$VN,91:$VO},{41:[1,348]},o($V01,[2,117]),{27:$VA,40:$Vk,43:45,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,58:349,60:$Vu,63:$Vv},{41:[1,350],59:$VD,60:$VE,61:$VF,62:$VG,64:$VH},{67:[1,351]},{67:[1,352]},{7:173,8:178,10:184,11:179,12:187,13:353,14:172,15:174,16:175,17:176,18:177,19:180,20:181,21:$VT,23:$VU,24:$V0,25:$V1,26:11,27:$VV,35:185,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7,72:12,76:$V8,93:$VW,94:$VX,95:$VY,98:$VZ,101:$Va,106:$Vb,107:$V_},{7:173,8:178,10:184,11:179,12:187,14:223,15:174,16:175,17:176,18:177,19:180,20:181,21:$VT,23:$VU,24:$V0,25:$V1,26:11,27:$VV,35:185,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7,72:12,76:$V8,78:[1,354],93:$VW,94:$VX,95:$VY,98:$VZ,101:$Va,106:$Vb,107:$V_},{22:[1,355]},{22:[1,356],90:$VN,91:$VO},{27:$V21,73:357},{7:173,8:178,10:184,11:179,12:187,13:359,14:172,15:174,16:175,17:176,18:177,19:180,20:181,21:$VT,23:$VU,24:$V0,25:$V1,26:11,27:$VV,35:185,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7,72:12,76:$V8,93:$VW,94:$VX,95:$VY,98:$VZ,101:$Va,106:$Vb,107:$V_},{41:[1,360],59:$VD,60:$VE,61:$VF,62:$VG,64:$VH},{7:173,8:178,10:184,11:179,12:187,13:361,14:172,15:174,16:175,17:176,18:177,19:180,20:181,21:$VT,23:$VU,24:$V0,25:$V1,26:11,27:$VV,35:185,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7,72:12,76:$V8,93:$VW,94:$VX,95:$VY,98:$VZ,101:$Va,106:$Vb,107:$V_},{45:[1,362]},{27:$VA,40:$Vk,43:45,44:$Vl,45:$Vm,46:$Vn,47:$Vo,48:$Vp,53:$Vq,54:$Vr,55:$Vs,56:$Vt,58:99,60:$Vu,63:$Vv,65:363},{7:173,8:178,10:184,11:179,12:187,14:223,15:174,16:175,17:176,18:177,19:180,20:181,21:$VT,23:$VU,24:$V0,25:$V1,26:11,27:$VV,35:185,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7,72:12,76:$V8,78:[1,364],93:$VW,94:$VX,95:$VY,98:$VZ,101:$Va,106:$Vb,107:$V_},o($V31,[2,92]),o($V01,[2,111]),{27:$V21,73:365},{52:[1,366]},{59:[1,367],60:[1,368]},{7:173,8:178,10:184,11:179,12:187,14:223,15:174,16:175,17:176,18:177,19:180,20:181,21:$VT,23:$VU,24:$V0,25:$V1,26:11,27:$VV,35:185,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7,72:12,76:$V8,78:[1,369],93:$VW,94:$VX,95:$VY,98:$VZ,101:$Va,106:$Vb,107:$V_},{7:173,8:178,10:184,11:179,12:187,13:370,14:172,15:174,16:175,17:176,18:177,19:180,20:181,21:$VT,23:$VU,24:$V0,25:$V1,26:11,27:$VV,35:185,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7,72:12,76:$V8,93:$VW,94:$VX,95:$VY,98:$VZ,101:$Va,106:$Vb,107:$V_},o($V41,[2,115],{26:11,72:12,7:173,15:174,16:175,17:176,18:177,8:178,11:179,19:180,20:181,10:184,35:185,12:187,14:223,21:$VT,23:$VU,24:$V0,25:$V1,27:$VV,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7,76:$V8,93:$VW,94:$VX,95:$VY,98:$VZ,101:$Va,106:$Vb,107:$V_}),{68:[1,371]},{28:$VR,68:[1,372]},o($V31,[2,91]),{52:[1,373]},{77:[1,374]},{59:[1,375]},{60:[1,376]},o($V01,[2,116]),o($V41,[2,114],{26:11,72:12,7:173,15:174,16:175,17:176,18:177,8:178,11:179,19:180,20:181,10:184,35:185,12:187,14:223,21:$VT,23:$VU,24:$V0,25:$V1,27:$VV,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7,76:$V8,93:$VW,94:$VX,95:$VY,98:$VZ,101:$Va,106:$Vb,107:$V_}),{22:[1,377]},{68:[1,378]},{77:[1,379]},{7:173,8:178,10:184,11:179,12:187,13:380,14:172,15:174,16:175,17:176,18:177,19:180,20:181,21:$VT,23:$VU,24:$V0,25:$V1,26:11,27:$VV,35:185,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7,72:12,76:$V8,93:$VW,94:$VX,95:$VY,98:$VZ,101:$Va,106:$Vb,107:$V_},{52:[2,79]},{52:[2,80]},o($Vd,[2,82]),{22:[1,381]},{7:173,8:178,10:184,11:179,12:187,13:382,14:172,15:174,16:175,17:176,18:177,19:180,20:181,21:$VT,23:$VU,24:$V0,25:$V1,26:11,27:$VV,35:185,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7,72:12,76:$V8,93:$VW,94:$VX,95:$VY,98:$VZ,101:$Va,106:$Vb,107:$V_},{7:173,8:178,10:184,11:179,12:187,14:223,15:174,16:175,17:176,18:177,19:180,20:181,21:$VT,23:$VU,24:$V0,25:$V1,26:11,27:$VV,35:185,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7,72:12,76:$V8,78:[1,383],93:$VW,94:$VX,95:$VY,98:$VZ,101:$Va,106:$Vb,107:$V_},o($Vd,[2,84]),{7:173,8:178,10:184,11:179,12:187,14:223,15:174,16:175,17:176,18:177,19:180,20:181,21:$VT,23:$VU,24:$V0,25:$V1,26:11,27:$VV,35:185,36:$V3,37:$V4,38:$V5,39:$V6,40:$V7,72:12,76:$V8,78:[1,384],93:$VW,94:$VX,95:$VY,98:$VZ,101:$Va,106:$Vb,107:$V_},o($V01,[2,113]),o($V01,[2,112])],
defaultActions: {25:[2,1],375:[2,79],376:[2,80]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


    const {TipoDato} = require("../Interprete/expresion")

    // Expresiones
    const Aritmetica = require("../Interprete/Expresiones/aritmetica")
    const Relacional = require("../Interprete/Expresiones/relacional")
    const Dato = require("../Interprete/Expresiones/dato")
    const Negativo = require("../Interprete/Expresiones/negativo")
    const opLogico = require("../Interprete/Expresiones/opLogicos")
    const Negacion = require("../Interprete/Expresiones/negacion")

    // Instrucciones
    const Cout = require("../Interprete/Instrucciones/cout")
    const If = require("../Interprete/Instrucciones/if")

    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:return 24; 
break;
case 5:return 25; 
break;
case 6:return 36;
break;
case 7:return 37;
break;
case 8:return 38;
break;
case 9:return 39;
break;
case 10:return 42;
break;
case 11:return 74;
break;
case 12:return 76;
break;
case 13:return 80;
break;
case 14:return 93;
break;
case 15:return 95;
break;
case 16:return 94;
break;
case 17:return 21;
break;
case 18:return 23;
break;
case 19:return 107;
break;
case 20:return 100;
break;
case 21:return 106;
break;
case 22:return 103;
break;
case 23:return 55;
break;
case 24:return 56;
break;
case 25:return 54;
break;
case 26:return 50;
break;
case 27:return 53;
break;
case 28:return 57;
break;
case 29:return 40;
break;
case 30:return 75;
break;
case 31:return 101;
break;
case 32:return 98;
break;
case 33:return 97;
break;
case 34:return 99;
break;
case 35:return 46; 
break;
case 36:return 48; 
break;
case 37:return 47; 
break;
case 38:return 27; 
break;
case 39:return 44; 
break;
case 40:return 45; 
break;
case 41:return 30;
break;
case 42:return 31;
break;
case 43:return 32;
break;
case 44:return 33;
break;
case 45:return 34;
break;
case 46:return 59;
break;
case 47:return 60;
break;
case 48:return 61;
break;
case 49:return 62;
break;
case 50:return 63;
break;
case 51:return 64;
break;
case 52:return 'ENTRADA';
break;
case 53:return 105;
break;
case 54:return 84;
break;
case 55:return 85;
break;
case 56:return 87;
break;
case 57:return 89;
break;
case 58:return 88;
break;
case 59:return 86;
break;
case 60:return 69;
break;
case 61:return 90;
break;
case 62:return 91;
break;
case 63:return 92;
break;
case 64:return 51;
break;
case 65:return 52;
break;
case 66:return 77;
break;
case 67:return 78;
break;
case 68:return 67;
break;
case 69:return 68;
break;
case 70:return 22;
break;
case 71:return 28;
break;
case 72:return 41;
break;
case 73:return 49;
break;
case 74:return 82;
break;
case 75:return 5;
break;
case 76:console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:{COM_MULT})/i,/^(?:{COM_SIMPLE})/i,/^(?:(\/\*[\s\S]*?\*\/))/i,/^(?:(\/\/.*))/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:bool\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:cout\b)/i,/^(?:endl\b)/i,/^(?:toupper\b)/i,/^(?:tolower\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:std\b)/i,/^(?:c_str\b)/i,/^(?:execute\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:(true|false\b))/i,/^(?:('(([^\n\"\\]|\\.)*)'))/i,/^(?:([\"][^\"\n]+[\"]))/i,/^(?:([a-zA-Z_][a-zA-Z0-9_]*))/i,/^(?:([0-9]+\.[0-9]+\b))/i,/^(?:([0-9]+\b))/i,/^(?:\\n)/i,/^(?:\\)/i,/^(?:\\")/i,/^(?:\\t)/i,/^(?:')/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:pow\b)/i,/^(?:%)/i,/^(?:>>)/i,/^(?:<<)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?:,)/i,/^(?::)/i,/^(?:\.)/i,/^(?:\?)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}