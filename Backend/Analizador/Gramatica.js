/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,16],$V2=[1,24],$V3=[1,19],$V4=[1,20],$V5=[1,21],$V6=[1,22],$V7=[1,23],$V8=[1,25],$V9=[1,14],$Va=[1,13],$Vb=[1,17],$Vc=[5,23,24,26,35,36,37,38,39,76,100,101,106],$Vd=[5,20,22,23,24,26,35,36,37,38,39,76,78,93,94,95,97,98,99,100,101,106,107],$Ve=[26,51,66],$Vf=[1,38],$Vg=[1,39],$Vh=[2,27],$Vi=[21,68],$Vj=[1,44],$Vk=[1,59],$Vl=[1,50],$Vm=[1,51],$Vn=[1,52],$Vo=[1,53],$Vp=[1,54],$Vq=[1,55],$Vr=[1,56],$Vs=[1,57],$Vt=[1,58],$Vu=[1,47],$Vv=[1,48],$Vw=[1,67],$Vx=[1,66],$Vy=[1,65],$Vz=[1,68],$VA=[1,73],$VB=[1,76],$VC=[1,81],$VD=[1,79],$VE=[1,91],$VF=[1,92],$VG=[1,93],$VH=[1,94],$VI=[1,95],$VJ=[2,55],$VK=[1,97],$VL=[21,27,40,51,58,59,60,61,63,67,82,84,85,86,87,88,89,90,91,105],$VM=[21,105],$VN=[21,51,82,90,91,105],$VO=[1,134],$VP=[1,135],$VQ=[1,138],$VR=[1,139],$VS=[1,140],$VT=[1,141],$VU=[1,142],$VV=[1,143],$VW=[1,147],$VX=[1,148],$VY=[21,51,82,90,91],$VZ=[1,157],$V_=[1,177],$V$=[21,27,51,67],$V01=[20,22,23,24,26,35,36,37,38,39,76,78,93,94,95,97,98,99,101,106,107],$V11=[27,51],$V21=[5,20,22,23,24,26,35,36,37,38,39,76,78,80,93,94,95,97,98,99,100,101,106,107],$V31=[1,357],$V41=[78,97,99];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"entornos":4,"EOF":5,"entorno":6,"declaracionVariables":7,"funcionExecute":8,"funciones":9,"comentarios":10,"impresionCout":11,"sentenciaIfCompleta":12,"instrucciones":13,"instruccion":14,"llamarFunciones":15,"ciclosWhile":16,"cicloFor":17,"switchCase":18,"sentenciaReturn":19,"PR_BREAK":20,"PTCOMA":21,"PR_CONTINUE":22,"COM_MULT":23,"COM_SIMPLE":24,"identificadores":25,"ID":26,"COMA":27,"secuenciasEscape":28,"SALTO_LINEA":29,"BARRA_INVERTIDA":30,"COMILLA_DOBLE":31,"TABULACION":32,"COMILLA_SIMPLE":33,"tiposVar":34,"PR_INT":35,"PR_DOUBLE":36,"PR_BOOL":37,"PR_CHAR":38,"PR_STD":39,"DOSPUNTOS":40,"PR_STRING":41,"valores":42,"DECIMAL":43,"ENTERO":44,"BOOLEAN":45,"STRING":46,"CHAR":47,"PUNTO":48,"PR_LENGTH":49,"PARIZQ":50,"PARDER":51,"PR_TYPEOF":52,"PR_ROUND":53,"PR_TOUPPER":54,"PR_TOLOWER":55,"PR_TOSTRING":56,"valoresPlus":57,"MAS":58,"MENOS":59,"POR":60,"DIVIDIDO":61,"POTENCIA":62,"MODULO":63,"valoresArreglos":64,"arregloDeclaraciones":65,"CORIZQ":66,"CORDER":67,"IGUAL":68,"sentenciaLogica":69,"ternario":70,"VectoresMatrices":71,"IncrementoDecremento":72,"PR_NEW":73,"PR_C_STR":74,"sentenciaIf":75,"PR_IF":76,"LLAVIZQ":77,"LLAVDER":78,"sentenciaIfElse":79,"PR_ELSE":80,"sentenciaElse":81,"INTERROGACION":82,"sentenciaRelacional":83,"IGUALES":84,"DIFERENTE":85,"MENOR_QUE":86,"MENOR_IGUAL":87,"MAYOR_QUE":88,"MAYOR_IGUAL":89,"OR":90,"AND":91,"NOT":92,"PR_WHILE":93,"PR_DO":94,"PR_FOR":95,"recursividadCase":96,"PR_CASE":97,"PR_SWITCH":98,"PR_DEFAULT":99,"PR_VOID":100,"PR_EXECUTE":101,"posibilidadesCout":102,"PR_ENDL":103,"funcionCout":104,"SALIDA":105,"PR_COUT":106,"PR_RETURN":107,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",20:"PR_BREAK",21:"PTCOMA",22:"PR_CONTINUE",23:"COM_MULT",24:"COM_SIMPLE",26:"ID",27:"COMA",29:"SALTO_LINEA",30:"BARRA_INVERTIDA",31:"COMILLA_DOBLE",32:"TABULACION",33:"COMILLA_SIMPLE",35:"PR_INT",36:"PR_DOUBLE",37:"PR_BOOL",38:"PR_CHAR",39:"PR_STD",40:"DOSPUNTOS",41:"PR_STRING",43:"DECIMAL",44:"ENTERO",45:"BOOLEAN",46:"STRING",47:"CHAR",48:"PUNTO",49:"PR_LENGTH",50:"PARIZQ",51:"PARDER",52:"PR_TYPEOF",53:"PR_ROUND",54:"PR_TOUPPER",55:"PR_TOLOWER",56:"PR_TOSTRING",58:"MAS",59:"MENOS",60:"POR",61:"DIVIDIDO",62:"POTENCIA",63:"MODULO",66:"CORIZQ",67:"CORDER",68:"IGUAL",73:"PR_NEW",74:"PR_C_STR",76:"PR_IF",77:"LLAVIZQ",78:"LLAVDER",80:"PR_ELSE",82:"INTERROGACION",84:"IGUALES",85:"DIFERENTE",86:"MENOR_QUE",87:"MENOR_IGUAL",88:"MAYOR_QUE",89:"MAYOR_IGUAL",90:"OR",91:"AND",92:"NOT",93:"PR_WHILE",94:"PR_DO",95:"PR_FOR",97:"PR_CASE",98:"PR_SWITCH",99:"PR_DEFAULT",100:"PR_VOID",101:"PR_EXECUTE",103:"PR_ENDL",105:"SALIDA",106:"PR_COUT",107:"PR_RETURN"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[13,2],[13,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,2],[14,2],[14,1],[10,1],[10,1],[25,3],[25,1],[28,2],[28,2],[28,2],[28,2],[28,2],[28,1],[28,1],[28,1],[28,1],[28,1],[34,1],[34,1],[34,1],[34,1],[34,4],[42,1],[42,1],[42,1],[42,1],[42,1],[42,5],[42,4],[42,4],[42,4],[42,4],[42,4],[42,7],[42,1],[57,3],[57,3],[57,2],[57,3],[57,3],[57,6],[57,3],[57,1],[64,3],[64,1],[65,4],[65,6],[65,4],[65,2],[7,3],[7,5],[7,8],[7,7],[7,5],[7,8],[7,4],[7,7],[7,1],[72,3],[72,3],[71,11],[71,16],[71,9],[71,17],[71,8],[71,11],[71,7],[71,10],[71,11],[75,7],[79,9],[79,8],[81,4],[12,3],[12,2],[12,2],[12,1],[70,5],[83,3],[83,3],[83,3],[83,3],[83,3],[83,3],[83,1],[69,3],[69,3],[69,2],[69,1],[16,7],[16,9],[17,14],[17,13],[96,5],[96,4],[18,10],[18,7],[9,8],[9,7],[9,8],[9,7],[15,5],[15,4],[8,6],[8,5],[102,1],[102,2],[102,3],[102,4],[102,1],[104,3],[104,1],[11,4],[19,3],[19,6],[19,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = $$[$0-1]; return this.$; 
break;
case 2: case 10:
this.$ = $$[$0-1]; this.$.push($$[$0]);
break;
case 3: case 11:
this.$ = []; this.$.push($$[$0]);
break;
case 8: case 9: case 18:
this.$ = $$[$0];
break;
case 43:
this.$ = new Dato($$[$0], TipoDato.DECIMAL, _$[$0].first_line, _$[$0].first_column); 
break;
case 44:
this.$ = new Dato($$[$0], TipoDato.ENTERO, _$[$0].first_line, _$[$0].first_column); 
break;
case 45:
this.$ = new Dato($$[$0], TipoDato.BOOL, _$[$0].first_line, _$[$0].first_column); 
break;
case 46:
this.$ = new Dato($$[$0], TipoDato.STRING, _$[$0].first_line, _$[$0].first_column); 
break;
case 47:
this.$ = new Dato($$[$0], TipoDato.CHAR, _$[$0].first_line, _$[$0].first_column); 
break;
case 56: case 57: case 59: case 60: case 62:
 this.$ = new Aritmetica($$[$0-2], $$[$0], $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 58:
 this.$ = new Negativo($$[$0], _$[$0-1].first_line, _$[$0-1].first_column);           
break;
case 61:
 this.$ = new Aritmetica($$[$0-3], $$[$0-1], $$[$0-4], _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 63: case 105: case 109: case 131: case 132:
 this.$ = $$[$0]; 
break;
case 90:
this.$ = new If($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column)
break;
case 91:
this.$ = $$[$0-8]; this.$.push(new ElseIf($$[$0-4], $$[$0-1], _$[$0-8].first_line, _$[$0-8].first_column))
break;
case 92:
this.$ = []; this.$.push(new ElseIf($$[$0-4], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column))
break;
case 93:
this.$ = new Else($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 94:
this.$ = new SentenciaIf($$[$0-2], $$[$0-1], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 95:
this.$ = new SentenciaIf($$[$0-1], $$[$0], null, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 96:
this.$ = new SentenciaIf($$[$0-1], null, $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 97:
this.$ = new SentenciaIf($$[$0], null, null, _$[$0].first_line, _$[$0].first_column);
break;
case 99: case 100: case 101: case 102: case 103: case 104:
 this.$ = new Relacional($$[$0-2], $$[$0], $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 106:
 this.$ = new opLogicos($$[$0-2], $$[$0], $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 107:
 this.$ = new opLogico($$[$0-2], $$[$0], $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 108:
 this.$ = new Negacion($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 126:
 this.$ = $$[$0];
break;
case 127:
 console.log($$[$0-1], $$[$0]); 
break;
case 133:
 this.$ = new Cout($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,23:$V0,24:$V1,25:11,26:$V2,34:10,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:12,75:18,76:$V8,100:$V9,101:$Va,106:$Vb},{1:[3]},{5:[1,26],6:27,7:4,8:5,9:6,10:7,11:8,12:9,23:$V0,24:$V1,25:11,26:$V2,34:10,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:12,75:18,76:$V8,100:$V9,101:$Va,106:$Vb},o($Vc,[2,3]),o($Vc,[2,4]),o($Vc,[2,5]),o($Vc,[2,6]),o($Vc,[2,7]),o($Vc,[2,8]),o($Vc,[2,9]),{25:28,26:[1,29]},{68:[1,30]},o($Vd,[2,78]),{26:[1,31]},{26:[1,32]},o($Vd,[2,24]),o($Vd,[2,25]),{105:[1,33]},o($Vd,[2,97],{79:34,81:35,80:[1,36]}),o($Ve,[2,38]),o($Ve,[2,39]),o($Ve,[2,40]),o($Ve,[2,41]),{40:[1,37]},{27:$Vf,66:$Vg,68:$Vh},{50:[1,40]},{1:[2,1]},o($Vc,[2,2]),{21:[1,41],68:[1,42]},o($Vi,$Vh,{27:$Vf,50:[1,43],66:$Vj}),{26:[1,46],39:$Vk,42:49,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,57:45,59:$Vu,62:$Vv},{50:[1,60]},{50:[1,61]},{26:$Vw,39:$Vk,42:49,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,50:$Vx,52:$Vq,53:$Vr,54:$Vs,55:$Vt,57:69,59:$Vu,62:$Vv,83:64,92:$Vy,102:63,103:$Vz,104:62},o($Vd,[2,95],{81:70,80:[1,71]}),o($Vd,[2,96]),{76:[1,72],77:$VA},{40:[1,74]},{25:75,26:$VB},{44:[1,77]},{26:$VC,39:$Vk,42:49,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,57:69,59:$Vu,62:$Vv,69:78,83:80,92:$VD},o($Vd,[2,70]),{26:[1,83],39:$Vk,42:49,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,50:[1,85],52:$Vq,53:$Vr,54:$Vs,55:$Vt,57:69,59:$Vu,62:$Vv,69:82,70:84,83:80,92:$VD},{34:88,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,51:[1,87],65:86},{67:[1,89]},{21:[1,90],58:$VE,59:$VF,60:$VG,61:$VH,63:$VI},o([21,58,59,60,61,63],$VJ,{48:$VK,66:[1,96]}),{26:$VC,39:$Vk,42:49,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,57:98,59:$Vu,62:$Vv},{50:[1,99]},o($VL,[2,63]),o($VL,[2,43]),o($VL,[2,44]),o($VL,[2,45]),o($VL,[2,46]),o($VL,[2,47]),{50:[1,100]},{50:[1,101]},{50:[1,102]},{50:[1,103]},{40:[1,104]},{26:$VC,39:$Vk,42:49,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,51:[1,106],52:$Vq,53:$Vr,54:$Vs,55:$Vt,57:107,59:$Vu,62:$Vv,64:105},{34:88,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,51:[1,109],65:108},{21:[1,110],105:[1,111]},o($VM,[2,132]),o($VM,[2,126]),{45:[1,112]},{26:$VC,39:$Vk,42:49,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,57:69,59:$Vu,62:$Vv,69:113,83:80,92:$VD},o([21,58,59,60,61,63,84,85,86,87,88,89,105],$VJ,{48:$VK,50:[1,114]}),o($VM,[2,130]),o($VN,[2,105],{58:$VE,59:$VF,60:$VG,61:$VH,63:$VI,84:[1,115],85:[1,116],86:[1,117],87:[1,118],88:[1,119],89:[1,120]}),o($Vd,[2,94]),{76:[1,121],77:$VA},{50:[1,122]},{7:125,8:130,10:136,11:131,12:127,13:123,14:124,15:126,16:128,17:129,18:132,19:133,20:$VO,22:$VP,23:$V0,24:$V1,25:11,26:$VQ,34:137,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:12,75:18,76:$V8,93:$VR,94:$VS,95:$VT,98:$VU,101:$Va,106:$Vb,107:$VV},{41:[1,144]},o($Vi,[2,26]),o($Vi,$Vh,{27:$Vf}),{67:[1,145]},{51:[1,146],90:$VW,91:$VX},{26:$VC,39:$Vk,42:49,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,57:69,59:$Vu,62:$Vv,69:149,83:80,92:$VD},o($VY,[2,109]),o($VL,$VJ,{48:$VK}),{21:[1,150],82:[1,151],90:$VW,91:$VX},o([21,58,59,60,61,63,82,84,85,86,87,88,89,90,91],$VJ,{48:$VK,50:[1,152],66:[1,153]}),{21:[1,154]},{34:155,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7},{27:$VZ,51:[1,156]},{77:[1,158]},{26:[1,159]},{66:[1,161],68:[1,160]},o($Vd,[2,76]),{26:$VC,39:$Vk,42:162,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt},{26:$VC,39:$Vk,42:163,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt},{26:$VC,39:$Vk,42:164,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt},{26:$VC,39:$Vk,42:165,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt},{26:$VC,39:$Vk,42:166,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt},{26:$VC,39:$Vk,42:49,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,57:107,59:$Vu,62:$Vv,64:167},{49:[1,168]},o($VL,[2,58]),{26:$VC,39:$Vk,42:49,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,57:169,59:$Vu,62:$Vv},{26:[1,170]},{43:[1,171],44:[1,172]},{46:[1,173]},{46:[1,174]},{40:[1,175]},{27:$V_,51:[1,176]},{21:[1,178]},o($V$,[2,65],{58:$VE,59:$VF,60:$VG,61:$VH,63:$VI}),{27:$VZ,51:[1,179]},{77:[1,180]},o($Vd,[2,133]),{26:$Vw,39:$Vk,42:49,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,50:$Vx,52:$Vq,53:$Vr,54:$Vs,55:$Vt,57:69,59:$Vu,62:$Vv,83:64,92:$Vy,102:181,103:$Vz},o($VM,[2,127]),{51:[1,182],90:$VW,91:$VX},{26:$VC,39:$Vk,42:49,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,57:107,59:$Vu,62:$Vv,64:183},{26:$VC,39:$Vk,42:49,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,57:184,59:$Vu,62:$Vv},{26:$VC,39:$Vk,42:49,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,57:185,59:$Vu,62:$Vv},{26:$VC,39:$Vk,42:49,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,57:186,59:$Vu,62:$Vv},{26:$VC,39:$Vk,42:49,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,57:187,59:$Vu,62:$Vv},{26:$VC,39:$Vk,42:49,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,57:188,59:$Vu,62:$Vv},{26:$VC,39:$Vk,42:49,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,57:189,59:$Vu,62:$Vv},{50:[1,190]},{26:$VC,39:$Vk,42:49,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,57:69,59:$Vu,62:$Vv,69:191,83:80,92:$VD},{7:125,8:130,10:136,11:131,12:127,14:193,15:126,16:128,17:129,18:132,19:133,20:$VO,22:$VP,23:$V0,24:$V1,25:11,26:$VQ,34:137,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:12,75:18,76:$V8,78:[1,192],93:$VR,94:$VS,95:$VT,98:$VU,101:$Va,106:$Vb,107:$VV},o($V01,[2,11]),o($V01,[2,12]),o($V01,[2,13]),o($V01,[2,14]),o($V01,[2,15]),o($V01,[2,16]),o($V01,[2,17]),o($V01,[2,18]),o($V01,[2,19]),o($V01,[2,20]),{21:[1,194]},{21:[1,195]},o($V01,[2,23]),{25:28,26:[1,196]},{27:$Vf,50:[1,197],66:$Vg,68:$Vh},{50:[1,198]},{77:[1,199]},{50:[1,200]},{50:[1,201]},{21:[1,204],26:[1,203],39:$Vk,42:49,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,57:107,59:$Vu,62:$Vv,64:202},o($Ve,[2,42]),{66:[1,206],68:[1,205]},{77:[1,207]},{26:$VC,39:$Vk,42:49,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,57:69,59:$Vu,62:$Vv,83:208},{26:$VC,39:$Vk,42:49,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,57:69,59:$Vu,62:$Vv,83:209},o($VY,[2,108]),o($Vd,[2,71]),{26:$VC,39:$Vk,42:49,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,57:210,59:$Vu,62:$Vv},{26:$VC,39:$Vk,42:49,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,51:[1,212],52:$Vq,53:$Vr,54:$Vs,55:$Vt,57:107,59:$Vu,62:$Vv,64:211},{44:[1,213]},o($Vd,[2,74]),{51:[1,214]},{77:[1,215]},{34:216,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7},{7:125,8:130,10:136,11:131,12:127,13:217,14:124,15:126,16:128,17:129,18:132,19:133,20:$VO,22:$VP,23:$V0,24:$V1,25:11,26:$VQ,34:137,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:12,75:18,76:$V8,93:$VR,94:$VS,95:$VT,98:$VU,101:$Va,106:$Vb,107:$VV},o($V11,[2,69],{66:[1,218]}),{26:[1,221],66:[1,220],73:[1,219]},{67:[1,222]},o($VL,[2,56]),o($VL,[2,57]),o($VL,[2,59]),o($VL,[2,60]),o($VL,[2,62]),{27:$V_,67:[1,223]},{50:[1,224]},{27:[1,225],58:$VE,59:$VF,60:$VG,61:$VH,63:$VI},{51:[1,226]},{51:[1,227]},{51:[1,228]},{51:[1,229]},{51:[1,230]},{56:[1,231]},{21:[1,232]},{26:$VC,39:$Vk,42:49,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,57:233,59:$Vu,62:$Vv},o($Vd,[2,125]),{77:[1,234]},{7:125,8:130,10:136,11:131,12:127,13:235,14:124,15:126,16:128,17:129,18:132,19:133,20:$VO,22:$VP,23:$V0,24:$V1,25:11,26:$VQ,34:137,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:12,75:18,76:$V8,93:$VR,94:$VS,95:$VT,98:$VU,101:$Va,106:$Vb,107:$VV},o($VM,[2,131]),o($VM,[2,128]),{27:$V_,51:[1,236]},o($VN,[2,99],{58:$VE,59:$VF,60:$VG,61:$VH,63:$VI}),o($VN,[2,100],{58:$VE,59:$VF,60:$VG,61:$VH,63:$VI}),o($VN,[2,101],{58:$VE,59:$VF,60:$VG,61:$VH,63:$VI}),o($VN,[2,102],{58:$VE,59:$VF,60:$VG,61:$VH,63:$VI}),o($VN,[2,103],{58:$VE,59:$VF,60:$VG,61:$VH,63:$VI}),o($VN,[2,104],{58:$VE,59:$VF,60:$VG,61:$VH,63:$VI}),{26:$VC,39:$Vk,42:49,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,57:69,59:$Vu,62:$Vv,69:237,83:80,92:$VD},{51:[1,238],90:$VW,91:$VX},o($Vd,[2,93]),o($V01,[2,10]),o($V01,[2,21]),o($V01,[2,22]),o($Vi,$Vh,{27:$Vf,66:$Vj}),{26:$VC,39:$Vk,42:49,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,51:[1,240],52:$Vq,53:$Vr,54:$Vs,55:$Vt,57:107,59:$Vu,62:$Vv,64:239},{26:$VC,39:$Vk,42:49,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,57:69,59:$Vu,62:$Vv,69:241,83:80,92:$VD},{7:125,8:130,10:136,11:131,12:127,13:242,14:124,15:126,16:128,17:129,18:132,19:133,20:$VO,22:$VP,23:$V0,24:$V1,25:11,26:$VQ,34:137,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:12,75:18,76:$V8,93:$VR,94:$VS,95:$VT,98:$VU,101:$Va,106:$Vb,107:$VV},{25:244,26:$VB,34:243,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7},{26:$VC,39:$Vk,42:49,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,57:245,59:$Vu,62:$Vv},{21:[1,246],27:$V_},o([21,27,58,59,60,61,63],$VJ,{48:$VK,50:[1,247]}),o($V01,[2,136]),{26:$VC,39:$Vk,42:49,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,57:248,59:$Vu,62:$Vv},{44:[1,249]},{7:125,8:130,10:136,11:131,12:127,13:250,14:124,15:126,16:128,17:129,18:132,19:133,20:$VO,22:$VP,23:$V0,24:$V1,25:11,26:$VQ,34:137,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:12,75:18,76:$V8,93:$VR,94:$VS,95:$VT,98:$VU,101:$Va,106:$Vb,107:$VV},o($VY,[2,106]),o($VY,[2,107]),{40:[1,251],58:$VE,59:$VF,60:$VG,61:$VH,63:$VI},{27:$V_,51:[1,252]},{21:[1,253]},{67:[1,254]},{26:$VC,39:$Vk,42:49,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,57:255,59:$Vu,62:$Vv},{7:125,8:130,10:136,11:131,12:127,13:256,14:124,15:126,16:128,17:129,18:132,19:133,20:$VO,22:$VP,23:$V0,24:$V1,25:11,26:$VQ,34:137,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:12,75:18,76:$V8,93:$VR,94:$VS,95:$VT,98:$VU,101:$Va,106:$Vb,107:$VV},{26:[1,257]},{7:125,8:130,10:136,11:131,12:127,14:193,15:126,16:128,17:129,18:132,19:133,20:$VO,22:$VP,23:$V0,24:$V1,25:11,26:$VQ,34:137,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:12,75:18,76:$V8,78:[1,258],93:$VR,94:$VS,95:$VT,98:$VU,101:$Va,106:$Vb,107:$VV},{67:[1,259]},{34:260,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7},{26:$VC,39:$Vk,42:49,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,57:107,59:$Vu,62:$Vv,64:261},{48:[1,262]},{68:[1,263]},{21:[1,264]},{51:[1,265]},{26:$VC,39:$Vk,42:49,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,57:266,59:$Vu,62:$Vv},o($VL,[2,49]),o($VL,[2,50]),o($VL,[2,51]),o($VL,[2,52]),o($VL,[2,53]),{50:[1,267]},o($Vd,[2,124]),o($V$,[2,64],{58:$VE,59:$VF,60:$VG,61:$VH,63:$VI}),{7:125,8:130,10:136,11:131,12:127,13:268,14:124,15:126,16:128,17:129,18:132,19:133,20:$VO,22:$VP,23:$V0,24:$V1,25:11,26:$VQ,34:137,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:12,75:18,76:$V8,93:$VR,94:$VS,95:$VT,98:$VU,101:$Va,106:$Vb,107:$VV},{7:125,8:130,10:136,11:131,12:127,14:193,15:126,16:128,17:129,18:132,19:133,20:$VO,22:$VP,23:$V0,24:$V1,25:11,26:$VQ,34:137,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:12,75:18,76:$V8,78:[1,269],93:$VR,94:$VS,95:$VT,98:$VU,101:$Va,106:$Vb,107:$VV},o($VM,[2,129]),{51:[1,270],90:$VW,91:$VX},{77:[1,271]},{27:$V_,51:[1,272]},{21:[1,273]},{51:[1,274],90:$VW,91:$VX},{7:125,8:130,10:136,11:131,12:127,14:193,15:126,16:128,17:129,18:132,19:133,20:$VO,22:$VP,23:$V0,24:$V1,25:11,26:$VQ,34:137,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:12,75:18,76:$V8,78:[1,275],93:$VR,94:$VS,95:$VT,98:$VU,101:$Va,106:$Vb,107:$VV},{25:276,26:$VB},{68:[1,277]},{51:[1,278],58:$VE,59:$VF,60:$VG,61:$VH,63:$VI},o($V01,[2,134]),{26:$VC,39:$Vk,42:49,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,57:107,59:$Vu,62:$Vv,64:279},{21:[1,280],58:$VE,59:$VF,60:$VG,61:$VH,63:$VI},{67:[1,281]},{7:125,8:130,10:136,11:131,12:127,14:193,15:126,16:128,17:129,18:132,19:133,20:$VO,22:$VP,23:$V0,24:$V1,25:11,26:$VQ,34:137,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:12,75:18,76:$V8,78:[1,282],93:$VR,94:$VS,95:$VT,98:$VU,101:$Va,106:$Vb,107:$VV},{26:$VC,39:$Vk,42:49,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,57:283,59:$Vu,62:$Vv},{21:[1,284]},o($Vd,[2,73]),{21:[1,285],66:[1,286]},{21:[1,287],58:$VE,59:$VF,60:$VG,61:$VH,63:$VI},{7:125,8:130,10:136,11:131,12:127,14:193,15:126,16:128,17:129,18:132,19:133,20:$VO,22:$VP,23:$V0,24:$V1,25:11,26:$VQ,34:137,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:12,75:18,76:$V8,78:[1,288],93:$VR,94:$VS,95:$VT,98:$VU,101:$Va,106:$Vb,107:$VV},o($V11,[2,66],{66:[1,289]}),o($Vc,[2,119]),o($V11,[2,68]),{66:[1,290]},{27:$V_,67:[1,291]},{74:[1,292]},{66:[1,294],73:[1,293]},o($Vd,[2,77]),o($VL,[2,48]),{51:[1,295],58:$VE,59:$VF,60:$VG,61:$VH,63:$VI},{26:$VC,39:$Vk,42:49,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,57:296,59:$Vu,62:$Vv},{7:125,8:130,10:136,11:131,12:127,14:193,15:126,16:128,17:129,18:132,19:133,20:$VO,22:$VP,23:$V0,24:$V1,25:11,26:$VQ,34:137,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:12,75:18,76:$V8,78:[1,297],93:$VR,94:$VS,95:$VT,98:$VU,101:$Va,106:$Vb,107:$VV},o($Vc,[2,121]),{77:[1,298]},{7:125,8:130,10:136,11:131,12:127,13:299,14:124,15:126,16:128,17:129,18:132,19:133,20:$VO,22:$VP,23:$V0,24:$V1,25:11,26:$VQ,34:137,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:12,75:18,76:$V8,93:$VR,94:$VS,95:$VT,98:$VU,101:$Va,106:$Vb,107:$VV},{21:[1,300]},o($V01,[2,123]),{77:[1,301]},{93:[1,302]},{68:[1,303]},{26:$VC,39:$Vk,42:49,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,57:304,59:$Vu,62:$Vv},{77:[1,305]},{27:$V_,51:[1,306]},o($Vd,[2,87]),{68:[1,307]},o($V21,[2,90]),{21:[2,98],58:$VE,59:$VF,60:$VG,61:$VH,63:$VI},o($Vd,[2,72]),o($Vd,[2,85]),{44:[1,308]},o($Vd,[2,75]),o($Vc,[2,118]),{67:[1,309]},{44:[1,310]},{21:[1,311]},{50:[1,312]},{34:313,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7},{66:[1,314]},o($VL,[2,61]),{51:[1,315],58:$VE,59:$VF,60:$VG,61:$VH,63:$VI},o($Vc,[2,120]),{7:125,8:130,10:136,11:131,12:127,13:316,14:124,15:126,16:128,17:129,18:132,19:133,20:$VO,22:$VP,23:$V0,24:$V1,25:11,26:$VQ,34:137,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:12,75:18,76:$V8,93:$VR,94:$VS,95:$VT,98:$VU,101:$Va,106:$Vb,107:$VV},{7:125,8:130,10:136,11:131,12:127,14:193,15:126,16:128,17:129,18:132,19:133,20:$VO,22:$VP,23:$V0,24:$V1,25:11,26:$VQ,34:137,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:12,75:18,76:$V8,78:[1,317],93:$VR,94:$VS,95:$VT,98:$VU,101:$Va,106:$Vb,107:$VV},o($V01,[2,122]),{7:125,8:130,10:136,11:131,12:127,13:318,14:124,15:126,16:128,17:129,18:132,19:133,20:$VO,22:$VP,23:$V0,24:$V1,25:11,26:$VQ,34:137,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:12,75:18,76:$V8,93:$VR,94:$VS,95:$VT,98:$VU,101:$Va,106:$Vb,107:$VV},{50:[1,319]},{26:$VC,39:$Vk,42:49,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,57:320,59:$Vu,62:$Vv},{21:[1,321],58:$VE,59:$VF,60:$VG,61:$VH,63:$VI},{96:322,97:[1,323]},{21:[1,324]},{26:$VC,39:$Vk,42:49,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,57:325,59:$Vu,62:$Vv},{67:[1,326]},o($V11,[2,67]),{67:[1,327]},o($Vd,[2,83]),{51:[1,328]},{66:[1,329]},{26:$VC,39:$Vk,42:49,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,57:107,59:$Vu,62:$Vv,64:330},o($VL,[2,54]),{7:125,8:130,10:136,11:131,12:127,14:193,15:126,16:128,17:129,18:132,19:133,20:$VO,22:$VP,23:$V0,24:$V1,25:11,26:$VQ,34:137,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:12,75:18,76:$V8,78:[1,331],93:$VR,94:$VS,95:$VT,98:$VU,101:$Va,106:$Vb,107:$VV},o($V21,[2,92]),{7:125,8:130,10:136,11:131,12:127,14:193,15:126,16:128,17:129,18:132,19:133,20:$VO,22:$VP,23:$V0,24:$V1,25:11,26:$VQ,34:137,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:12,75:18,76:$V8,78:[1,332],93:$VR,94:$VS,95:$VT,98:$VU,101:$Va,106:$Vb,107:$VV},{26:$VC,39:$Vk,42:49,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,57:69,59:$Vu,62:$Vv,69:333,83:80,92:$VD},{21:[1,334],58:$VE,59:$VF,60:$VG,61:$VH,63:$VI},{26:$VC,39:$Vk,42:49,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,57:69,59:$Vu,62:$Vv,69:335,83:80,92:$VD},{78:[1,337],97:[1,338],99:[1,336]},{26:$VC,39:$Vk,42:49,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,57:339,59:$Vu,62:$Vv},o($V01,[2,135]),{21:[1,340],58:$VE,59:$VF,60:$VG,61:$VH,63:$VI},{21:[1,341]},{21:[1,342]},{21:[1,343]},{44:[1,344]},{27:$V_,67:[1,345]},o($V21,[2,91]),o($V01,[2,110]),{51:[1,346],90:$VW,91:$VX},{26:$VC,39:$Vk,42:49,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,57:69,59:$Vu,62:$Vv,69:347,83:80,92:$VD},{21:[1,348],90:$VW,91:$VX},{40:[1,349]},o($V01,[2,117]),{26:$VC,39:$Vk,42:49,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,57:350,59:$Vu,62:$Vv},{40:[1,351],58:$VE,59:$VF,60:$VG,61:$VH,63:$VI},o($Vd,[2,88]),o($Vd,[2,86]),o($Vd,[2,81]),o($Vd,[2,89]),{67:[1,352]},{27:[1,353]},{21:[1,354]},{21:[1,355],90:$VW,91:$VX},{26:$V31,72:356},{7:125,8:130,10:136,11:131,12:127,13:358,14:124,15:126,16:128,17:129,18:132,19:133,20:$VO,22:$VP,23:$V0,24:$V1,25:11,26:$VQ,34:137,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:12,75:18,76:$V8,93:$VR,94:$VS,95:$VT,98:$VU,101:$Va,106:$Vb,107:$VV},{40:[1,359],58:$VE,59:$VF,60:$VG,61:$VH,63:$VI},{7:125,8:130,10:136,11:131,12:127,13:360,14:124,15:126,16:128,17:129,18:132,19:133,20:$VO,22:$VP,23:$V0,24:$V1,25:11,26:$VQ,34:137,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:12,75:18,76:$V8,93:$VR,94:$VS,95:$VT,98:$VU,101:$Va,106:$Vb,107:$VV},{66:[1,361]},{66:[1,362]},o($V01,[2,111]),{26:$V31,72:363},{51:[1,364]},{58:[1,365],59:[1,366]},{7:125,8:130,10:136,11:131,12:127,14:193,15:126,16:128,17:129,18:132,19:133,20:$VO,22:$VP,23:$V0,24:$V1,25:11,26:$VQ,34:137,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:12,75:18,76:$V8,78:[1,367],93:$VR,94:$VS,95:$VT,98:$VU,101:$Va,106:$Vb,107:$VV},{7:125,8:130,10:136,11:131,12:127,13:368,14:124,15:126,16:128,17:129,18:132,19:133,20:$VO,22:$VP,23:$V0,24:$V1,25:11,26:$VQ,34:137,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:12,75:18,76:$V8,93:$VR,94:$VS,95:$VT,98:$VU,101:$Va,106:$Vb,107:$VV},o($V41,[2,115],{25:11,71:12,75:18,7:125,15:126,12:127,16:128,17:129,8:130,11:131,18:132,19:133,10:136,34:137,14:193,20:$VO,22:$VP,23:$V0,24:$V1,26:$VQ,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,76:$V8,93:$VR,94:$VS,95:$VT,98:$VU,101:$Va,106:$Vb,107:$VV}),{44:[1,369]},{26:$VC,39:$Vk,42:49,43:$Vl,44:$Vm,45:$Vn,46:$Vo,47:$Vp,52:$Vq,53:$Vr,54:$Vs,55:$Vt,57:107,59:$Vu,62:$Vv,64:370},{51:[1,371]},{77:[1,372]},{58:[1,373]},{59:[1,374]},o($V01,[2,116]),o($V41,[2,114],{25:11,71:12,75:18,7:125,15:126,12:127,16:128,17:129,8:130,11:131,18:132,19:133,10:136,34:137,14:193,20:$VO,22:$VP,23:$V0,24:$V1,26:$VQ,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,76:$V8,93:$VR,94:$VS,95:$VT,98:$VU,101:$Va,106:$Vb,107:$VV}),{67:[1,375]},{27:$V_,67:[1,376]},{77:[1,377]},{7:125,8:130,10:136,11:131,12:127,13:378,14:124,15:126,16:128,17:129,18:132,19:133,20:$VO,22:$VP,23:$V0,24:$V1,25:11,26:$VQ,34:137,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:12,75:18,76:$V8,93:$VR,94:$VS,95:$VT,98:$VU,101:$Va,106:$Vb,107:$VV},{51:[2,79]},{51:[2,80]},{21:[1,379]},{67:[1,380]},{7:125,8:130,10:136,11:131,12:127,13:381,14:124,15:126,16:128,17:129,18:132,19:133,20:$VO,22:$VP,23:$V0,24:$V1,25:11,26:$VQ,34:137,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:12,75:18,76:$V8,93:$VR,94:$VS,95:$VT,98:$VU,101:$Va,106:$Vb,107:$VV},{7:125,8:130,10:136,11:131,12:127,14:193,15:126,16:128,17:129,18:132,19:133,20:$VO,22:$VP,23:$V0,24:$V1,25:11,26:$VQ,34:137,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:12,75:18,76:$V8,78:[1,382],93:$VR,94:$VS,95:$VT,98:$VU,101:$Va,106:$Vb,107:$VV},o($Vd,[2,82]),{21:[1,383]},{7:125,8:130,10:136,11:131,12:127,14:193,15:126,16:128,17:129,18:132,19:133,20:$VO,22:$VP,23:$V0,24:$V1,25:11,26:$VQ,34:137,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:12,75:18,76:$V8,78:[1,384],93:$VR,94:$VS,95:$VT,98:$VU,101:$Va,106:$Vb,107:$VV},o($V01,[2,113]),o($Vd,[2,84]),o($V01,[2,112])],
defaultActions: {26:[2,1],373:[2,79],374:[2,80]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


    const {TipoDato} = require("../Interprete/expresion")

    // Expresiones
    const Aritmetica = require("../Interprete/Expresiones/aritmetica")
    const Relacional = require("../Interprete/Expresiones/relacional")
    const Dato = require("../Interprete/Expresiones/dato")
    const Negativo = require("../Interprete/Expresiones/negativo")
    const opLogico = require("../Interprete/Expresiones/opLogicos")
    const Negacion = require("../Interprete/Expresiones/negacion")

    // Instrucciones
    const Cout = require("../Interprete/Instrucciones/cout")
    const If = require("../Interprete/Instrucciones/if")
    const ElseIf = require("../Interprete/Instrucciones/elseif")
    const Else = require("../Interprete/Instrucciones/else")

    // Operaciones Mayores
    const SentenciaIf = require("../Interprete/OperacionesMayores/sentenciaIf")
    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:return 23; 
break;
case 5:return 24; 
break;
case 6:return 35;
break;
case 7:return 36;
break;
case 8:return 37;
break;
case 9:return 38;
break;
case 10:return 41;
break;
case 11:return 73;
break;
case 12:return 76;
break;
case 13:return 80;
break;
case 14:return 93;
break;
case 15:return 95;
break;
case 16:return 94;
break;
case 17:return 20;
break;
case 18:return 22;
break;
case 19:return 107;
break;
case 20:return 100;
break;
case 21:return 106;
break;
case 22:return 103;
break;
case 23:return 54;
break;
case 24:return 55;
break;
case 25:return 53;
break;
case 26:return 49;
break;
case 27:return 52;
break;
case 28:return 56;
break;
case 29:return 39;
break;
case 30:return 74;
break;
case 31:return 101;
break;
case 32:return 98;
break;
case 33:return 97;
break;
case 34:return 99;
break;
case 35:return 45; 
break;
case 36:return 47; 
break;
case 37:return 46; 
break;
case 38:return 26; 
break;
case 39:return 43; 
break;
case 40:return 44; 
break;
case 41:return 29;
break;
case 42:return 30;
break;
case 43:return 31;
break;
case 44:return 32;
break;
case 45:return 33;
break;
case 46:return 58;
break;
case 47:return 59;
break;
case 48:return 60;
break;
case 49:return 61;
break;
case 50:return 62;
break;
case 51:return 63;
break;
case 52:return 'ENTRADA';
break;
case 53:return 105;
break;
case 54:return 84;
break;
case 55:return 85;
break;
case 56:return 87;
break;
case 57:return 89;
break;
case 58:return 88;
break;
case 59:return 86;
break;
case 60:return 68;
break;
case 61:return 90;
break;
case 62:return 91;
break;
case 63:return 92;
break;
case 64:return 50;
break;
case 65:return 51;
break;
case 66:return 77;
break;
case 67:return 78;
break;
case 68:return 66;
break;
case 69:return 67;
break;
case 70:return 21;
break;
case 71:return 27;
break;
case 72:return 40;
break;
case 73:return 48;
break;
case 74:return 82;
break;
case 75:return 5;
break;
case 76:console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:{COM_MULT})/i,/^(?:{COM_SIMPLE})/i,/^(?:(\/\*[\s\S]*?\*\/))/i,/^(?:(\/\/.*))/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:bool\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:cout\b)/i,/^(?:endl\b)/i,/^(?:toupper\b)/i,/^(?:tolower\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:std\b)/i,/^(?:c_str\b)/i,/^(?:execute\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:(true|false\b))/i,/^(?:('(([^\n\"\\]|\\.)*)'))/i,/^(?:([\"][^\"\n]+[\"]))/i,/^(?:([a-zA-Z_][a-zA-Z0-9_]*))/i,/^(?:([0-9]+\.[0-9]+\b))/i,/^(?:([0-9]+\b))/i,/^(?:\\n)/i,/^(?:\\)/i,/^(?:\\")/i,/^(?:\\t)/i,/^(?:')/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:pow\b)/i,/^(?:%)/i,/^(?:>>)/i,/^(?:<<)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?:,)/i,/^(?::)/i,/^(?:\.)/i,/^(?:\?)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}