/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,16],$V1=[1,17],$V2=[1,27],$V3=[1,22],$V4=[1,23],$V5=[1,24],$V6=[1,25],$V7=[1,26],$V8=[1,28],$V9=[1,20],$Va=[1,21],$Vb=[1,15],$Vc=[1,14],$Vd=[1,18],$Ve=[5,23,24,27,35,36,37,38,39,76,93,94,100,101,106],$Vf=[1,34],$Vg=[5,20,22,23,24,27,35,36,37,38,39,76,78,93,94,95,97,98,99,100,101,106,107],$Vh=[27,46,66],$Vi=[26,68],$Vj=[2,28],$Vk=[1,44],$Vl=[21,26,68],$Vm=[1,49],$Vn=[1,62],$Vo=[1,58],$Vp=[1,59],$Vq=[1,60],$Vr=[1,61],$Vs=[1,63],$Vt=[1,64],$Vu=[1,65],$Vv=[1,66],$Vw=[1,67],$Vx=[1,55],$Vy=[1,56],$Vz=[1,52],$VA=[1,76],$VB=[1,75],$VC=[1,74],$VD=[1,77],$VE=[1,81],$VF=[1,83],$VG=[1,95],$VH=[1,96],$VI=[1,99],$VJ=[1,100],$VK=[1,101],$VL=[1,102],$VM=[1,115],$VN=[1,116],$VO=[2,55],$VP=[1,118],$VQ=[21,46,82,90,91],$VR=[1,120],$VS=[1,121],$VT=[1,122],$VU=[1,123],$VV=[1,124],$VW=[1,125],$VX=[21,46,82,84,85,86,87,88,89,90,91,105],$VY=[1,126],$VZ=[1,127],$V_=[1,128],$V$=[1,129],$V01=[1,130],$V11=[21,26,40,46,58,59,60,61,63,67,82,84,85,86,87,88,89,90,91,105],$V21=[21,105],$V31=[20,22,23,24,27,35,36,37,38,39,76,78,93,94,95,97,98,99,101,106,107],$V41=[1,173],$V51=[1,200],$V61=[21,26,46,67],$V71=[1,216],$V81=[26,46],$V91=[21,26,40,46,58,59,67,82,84,85,86,87,88,89,90,91,105],$Va1=[5,20,22,23,24,27,35,36,37,38,39,76,78,80,93,94,95,97,98,99,100,101,106,107],$Vb1=[1,354],$Vc1=[78,97,99];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"entornos":4,"EOF":5,"entorno":6,"declaracionVariables":7,"funcionExecute":8,"funciones":9,"comentarios":10,"impresionCout":11,"sentenciaIfCompleta":12,"ciclosWhile":13,"instrucciones":14,"instruccion":15,"llamarFunciones":16,"cicloFor":17,"switchCase":18,"sentenciaReturn":19,"PR_BREAK":20,"PTCOMA":21,"PR_CONTINUE":22,"COM_MULT":23,"COM_SIMPLE":24,"identificadores":25,"COMA":26,"ID":27,"secuenciasEscape":28,"SALTO_LINEA":29,"BARRA_INVERTIDA":30,"COMILLA_DOBLE":31,"TABULACION":32,"COMILLA_SIMPLE":33,"tiposVar":34,"PR_INT":35,"PR_DOUBLE":36,"PR_BOOL":37,"PR_CHAR":38,"PR_STD":39,"DOSPUNTOS":40,"PR_STRING":41,"valores":42,"PUNTO":43,"PR_LENGTH":44,"PARIZQ":45,"PARDER":46,"PR_TYPEOF":47,"PR_ROUND":48,"valoresPlus":49,"PR_TOUPPER":50,"PR_TOLOWER":51,"PR_TOSTRING":52,"DECIMAL":53,"ENTERO":54,"BOOLEAN":55,"STRING":56,"CHAR":57,"MAS":58,"MENOS":59,"POR":60,"DIVIDIDO":61,"POTENCIA":62,"MODULO":63,"valoresArreglos":64,"arregloDeclaraciones":65,"CORIZQ":66,"CORDER":67,"IGUAL":68,"sentenciaLogica":69,"ternario":70,"VectoresMatrices":71,"IncrementoDecremento":72,"PR_NEW":73,"PR_C_STR":74,"sentenciaIf":75,"PR_IF":76,"LLAVIZQ":77,"LLAVDER":78,"sentenciaIfElse":79,"PR_ELSE":80,"sentenciaElse":81,"INTERROGACION":82,"sentenciaRelacional":83,"IGUALES":84,"DIFERENTE":85,"MENOR_QUE":86,"MENOR_IGUAL":87,"MAYOR_QUE":88,"MAYOR_IGUAL":89,"OR":90,"AND":91,"NOT":92,"PR_WHILE":93,"PR_DO":94,"PR_FOR":95,"recursividadCase":96,"PR_CASE":97,"PR_SWITCH":98,"PR_DEFAULT":99,"PR_VOID":100,"PR_EXECUTE":101,"posibilidadesCout":102,"PR_ENDL":103,"funcionCout":104,"SALIDA":105,"PR_COUT":106,"PR_RETURN":107,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",20:"PR_BREAK",21:"PTCOMA",22:"PR_CONTINUE",23:"COM_MULT",24:"COM_SIMPLE",26:"COMA",27:"ID",29:"SALTO_LINEA",30:"BARRA_INVERTIDA",31:"COMILLA_DOBLE",32:"TABULACION",33:"COMILLA_SIMPLE",35:"PR_INT",36:"PR_DOUBLE",37:"PR_BOOL",38:"PR_CHAR",39:"PR_STD",40:"DOSPUNTOS",41:"PR_STRING",43:"PUNTO",44:"PR_LENGTH",45:"PARIZQ",46:"PARDER",47:"PR_TYPEOF",48:"PR_ROUND",50:"PR_TOUPPER",51:"PR_TOLOWER",52:"PR_TOSTRING",53:"DECIMAL",54:"ENTERO",55:"BOOLEAN",56:"STRING",57:"CHAR",58:"MAS",59:"MENOS",60:"POR",61:"DIVIDIDO",62:"POTENCIA",63:"MODULO",66:"CORIZQ",67:"CORDER",68:"IGUAL",73:"PR_NEW",74:"PR_C_STR",76:"PR_IF",77:"LLAVIZQ",78:"LLAVDER",80:"PR_ELSE",82:"INTERROGACION",84:"IGUALES",85:"DIFERENTE",86:"MENOR_QUE",87:"MENOR_IGUAL",88:"MAYOR_QUE",89:"MAYOR_IGUAL",90:"OR",91:"AND",92:"NOT",93:"PR_WHILE",94:"PR_DO",95:"PR_FOR",97:"PR_CASE",98:"PR_SWITCH",99:"PR_DEFAULT",100:"PR_VOID",101:"PR_EXECUTE",103:"PR_ENDL",105:"SALIDA",106:"PR_COUT",107:"PR_RETURN"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[14,2],[14,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,2],[15,2],[15,1],[10,1],[10,1],[25,3],[25,1],[28,2],[28,2],[28,2],[28,2],[28,2],[28,1],[28,1],[28,1],[28,1],[28,1],[34,1],[34,1],[34,1],[34,1],[34,4],[42,5],[42,4],[42,4],[42,4],[42,4],[42,7],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[49,3],[49,3],[49,2],[49,3],[49,3],[49,6],[49,3],[49,1],[64,3],[64,1],[65,4],[65,6],[65,4],[65,2],[7,3],[7,5],[7,8],[7,7],[7,5],[7,8],[7,4],[7,7],[7,1],[72,3],[72,3],[71,11],[71,16],[71,9],[71,17],[71,8],[71,11],[71,7],[71,10],[71,11],[75,7],[79,9],[79,8],[81,4],[12,3],[12,2],[12,2],[12,1],[70,5],[83,3],[83,3],[83,3],[83,3],[83,3],[83,3],[83,1],[69,3],[69,3],[69,2],[69,1],[13,7],[13,9],[17,14],[17,13],[96,5],[96,4],[18,10],[18,7],[9,8],[9,7],[9,8],[9,7],[16,5],[16,4],[8,6],[8,5],[102,1],[102,2],[102,3],[102,4],[102,1],[104,3],[104,1],[11,4],[19,3],[19,6],[19,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = $$[$0-1]; return this.$; 
break;
case 2: case 11:
this.$ = $$[$0-1]; this.$.push($$[$0]);
break;
case 3: case 12:
this.$ = []; this.$.push($$[$0]);
break;
case 4: case 8: case 9: case 10: case 19: case 28:
this.$ = $$[$0];
break;
case 22:
this.$ = new Break($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 39:
this.$ = "ENTERO";
break;
case 40:
this.$ = "DECIMAL";
break;
case 41:
this.$ = "BOOL";
break;
case 42:
this.$ = "CHAR";
break;
case 43:
this.$ = "STRING";
break;
case 46: case 47: case 48:
this.$ = new FuncionCout($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 49:
this.$ = new FuncionCout($$[$0-3], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 50:
this.$ = new Dato($$[$0], TipoDato.DECIMAL, _$[$0].first_line, _$[$0].first_column); 
break;
case 51:
this.$ = new Dato($$[$0], TipoDato.ENTERO, _$[$0].first_line, _$[$0].first_column); 
break;
case 52:
this.$ = new Dato($$[$0], TipoDato.BOOL, _$[$0].first_line, _$[$0].first_column); 
break;
case 53:
this.$ = new Dato($$[$0], TipoDato.STRING, _$[$0].first_line, _$[$0].first_column); 
break;
case 54:
this.$ = new Dato($$[$0], TipoDato.CHAR, _$[$0].first_line, _$[$0].first_column); 
break;
case 55:
this.$ = new Dato($$[$0], TipoDato.ID, _$[$0].first_line, _$[$0].first_column); 
break;
case 56: case 57: case 59: case 60: case 62:
 this.$ = new Aritmetica($$[$0-2], $$[$0], $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 58:
 this.$ = new Negativo($$[$0], _$[$0-1].first_line, _$[$0-1].first_column);           
break;
case 61:
 this.$ = new Aritmetica($$[$0-3], $$[$0-1], $$[$0-4], _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 63: case 105: case 109: case 131: case 132:
 this.$ = $$[$0]; 
break;
case 70:
this.$ = new Declaracion($$[$0-2], $$[$0-1], null, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 71:
this.$ = new Declaracion($$[$0-4], $$[$0-3], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 90:
this.$ = new If($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column)
break;
case 91:
this.$ = $$[$0-8]; this.$.push(new ElseIf($$[$0-4], $$[$0-1], _$[$0-8].first_line, _$[$0-8].first_column))
break;
case 92:
this.$ = []; this.$.push(new ElseIf($$[$0-4], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column))
break;
case 93:
this.$ = new Else($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 94:
this.$ = new SentenciaIf($$[$0-2], $$[$0-1], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 95:
this.$ = new SentenciaIf($$[$0-1], $$[$0], null, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 96:
this.$ = new SentenciaIf($$[$0-1], null, $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 97:
this.$ = new SentenciaIf($$[$0], null, null, _$[$0].first_line, _$[$0].first_column);
break;
case 99: case 100: case 101: case 102: case 103: case 104:
 this.$ = new Relacional($$[$0-2], $$[$0], $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 106:
 this.$ = new opLogicos($$[$0-2], $$[$0], $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 107:
 this.$ = new opLogico($$[$0-2], $$[$0], $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 108:
 this.$ = new Negacion($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 110:
 this.$ = new While($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 111:
 this.$ = new DoWhile($$[$0-2], $$[$0-6], _$[$0-8].first_line, _$[$0-8].first_column); 
break;
case 126:
 this.$ = $$[$0];
break;
case 127:
 this.$ = Negacion($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 133:
 this.$ = new Cout($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,23:$V0,24:$V1,25:12,27:$V2,34:11,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,75:19,76:$V8,93:$V9,94:$Va,100:$Vb,101:$Vc,106:$Vd},{1:[3]},{5:[1,29],6:30,7:4,8:5,9:6,10:7,11:8,12:9,13:10,23:$V0,24:$V1,25:12,27:$V2,34:11,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,75:19,76:$V8,93:$V9,94:$Va,100:$Vb,101:$Vc,106:$Vd},o($Ve,[2,3]),o($Ve,[2,4]),o($Ve,[2,5]),o($Ve,[2,6]),o($Ve,[2,7]),o($Ve,[2,8]),o($Ve,[2,9]),o($Ve,[2,10]),{25:31,27:[1,32]},{26:$Vf,68:[1,33]},o($Vg,[2,78]),{27:[1,35]},{27:[1,36]},o($Vg,[2,25]),o($Vg,[2,26]),{105:[1,37]},o($Vg,[2,97],{79:38,81:39,80:[1,40]}),{45:[1,41]},{77:[1,42]},o($Vh,[2,39]),o($Vh,[2,40]),o($Vh,[2,41]),o($Vh,[2,42]),{40:[1,43]},o($Vi,$Vj,{66:$Vk}),{45:[1,45]},{1:[2,1]},o($Ve,[2,2]),{21:[1,46],26:$Vf,68:[1,47]},o($Vl,$Vj,{45:[1,48],66:$Vm}),{27:[1,51],39:$Vn,42:57,47:$Vo,48:$Vp,49:54,50:$Vq,51:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,59:$Vx,62:$Vy,69:50,83:53,92:$Vz},{27:[1,68]},{45:[1,69]},{45:[1,70]},{27:$VA,39:$Vn,42:57,45:$VB,47:$Vo,48:$Vp,49:54,50:$Vq,51:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,59:$Vx,62:$Vy,83:73,92:$VC,102:72,103:$VD,104:71},o($Vg,[2,95],{81:78,80:[1,79]}),o($Vg,[2,96]),{76:[1,80],77:$VE},{27:$VF,39:$Vn,42:57,47:$Vo,48:$Vp,49:54,50:$Vq,51:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,59:$Vx,62:$Vy,69:82,83:53,92:$Vz},{7:86,8:91,10:97,11:92,12:88,13:89,14:84,15:85,16:87,17:90,18:93,19:94,20:$VG,22:$VH,23:$V0,24:$V1,25:12,27:$VI,34:98,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,75:19,76:$V8,93:$V9,94:$Va,95:$VJ,98:$VK,101:$Vc,106:$Vd,107:$VL},{40:[1,103]},{54:[1,104]},{27:$VF,39:$Vn,42:57,47:$Vo,48:$Vp,49:54,50:$Vq,51:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,59:$Vx,62:$Vy,69:105,83:53,92:$Vz},o($Vg,[2,70]),{27:[1,107],39:$Vn,42:57,45:[1,109],47:$Vo,48:$Vp,49:54,50:$Vq,51:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,59:$Vx,62:$Vy,69:106,70:108,83:53,92:$Vz},{34:112,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,46:[1,111],65:110},{67:[1,113]},{21:[1,114],90:$VM,91:$VN},o([21,58,59,60,61,63,84,85,86,87,88,89,90,91],$VO,{43:$VP,66:[1,117]}),{27:$VF,39:$Vn,42:57,47:$Vo,48:$Vp,49:54,50:$Vq,51:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,59:$Vx,62:$Vy,69:119,83:53,92:$Vz},o($VQ,[2,109],{84:$VR,85:$VS,86:$VT,87:$VU,88:$VV,89:$VW}),o($VX,[2,105],{58:$VY,59:$VZ,60:$V_,61:$V$,63:$V01}),{27:$VF,39:$Vn,42:57,47:$Vo,48:$Vp,49:131,50:$Vq,51:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,59:$Vx,62:$Vy},{45:[1,132]},o($V11,[2,63]),{45:[1,133]},{45:[1,134]},{45:[1,135]},{45:[1,136]},{40:[1,137]},o($V11,[2,50]),o($V11,[2,51]),o($V11,[2,52]),o($V11,[2,53]),o($V11,[2,54]),o($Vl,[2,27]),{27:$VF,39:$Vn,42:57,46:[1,139],47:$Vo,48:$Vp,49:140,50:$Vq,51:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,59:$Vx,62:$Vy,64:138},{34:112,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,46:[1,142],65:141},{21:[1,143],105:[1,144]},o($V21,[2,132]),o($V21,[2,126],{84:$VR,85:$VS,86:$VT,87:$VU,88:$VV,89:$VW}),{55:[1,145]},{27:$VF,39:$Vn,42:57,47:$Vo,48:$Vp,49:54,50:$Vq,51:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,59:$Vx,62:$Vy,69:146,83:53,92:$Vz},o([21,58,59,60,61,63,84,85,86,87,88,89,105],$VO,{43:$VP,45:[1,147]}),o($V21,[2,130]),o($Vg,[2,94]),{76:[1,148],77:$VE},{45:[1,149]},{7:86,8:91,10:97,11:92,12:88,13:89,14:150,15:85,16:87,17:90,18:93,19:94,20:$VG,22:$VH,23:$V0,24:$V1,25:12,27:$VI,34:98,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,75:19,76:$V8,93:$V9,94:$Va,95:$VJ,98:$VK,101:$Vc,106:$Vd,107:$VL},{46:[1,151],90:$VM,91:$VN},o($V11,$VO,{43:$VP}),{7:86,8:91,10:97,11:92,12:88,13:89,15:153,16:87,17:90,18:93,19:94,20:$VG,22:$VH,23:$V0,24:$V1,25:12,27:$VI,34:98,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,75:19,76:$V8,78:[1,152],93:$V9,94:$Va,95:$VJ,98:$VK,101:$Vc,106:$Vd,107:$VL},o($V31,[2,12]),o($V31,[2,13]),o($V31,[2,14]),o($V31,[2,15]),o($V31,[2,16]),o($V31,[2,17]),o($V31,[2,18]),o($V31,[2,19]),o($V31,[2,20]),o($V31,[2,21]),{21:[1,154]},{21:[1,155]},o($V31,[2,24]),{25:31,27:[1,156]},o($Vi,$Vj,{45:[1,157],66:$Vk}),{45:[1,158]},{45:[1,159]},{21:[1,162],27:[1,161],39:$Vn,42:57,47:$Vo,48:$Vp,49:140,50:$Vq,51:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,59:$Vx,62:$Vy,64:160},{41:[1,163]},{67:[1,164]},{46:[1,165],90:$VM,91:$VN},{21:[1,166],82:[1,167],90:$VM,91:$VN},o([21,58,59,60,61,63,82,84,85,86,87,88,89,90,91],$VO,{43:$VP,45:[1,168],66:[1,169]}),{21:[1,170]},{34:171,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7},{26:$V41,46:[1,172]},{77:[1,174]},{27:[1,175]},{66:[1,177],68:[1,176]},o($Vg,[2,76]),{27:$VF,39:$Vn,42:57,47:$Vo,48:$Vp,49:54,50:$Vq,51:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,59:$Vx,62:$Vy,69:178,83:53,92:$Vz},{27:$VF,39:$Vn,42:57,47:$Vo,48:$Vp,49:54,50:$Vq,51:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,59:$Vx,62:$Vy,69:179,83:53,92:$Vz},{27:$VF,39:$Vn,42:57,47:$Vo,48:$Vp,49:140,50:$Vq,51:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,59:$Vx,62:$Vy,64:180},{44:[1,181]},o($VQ,[2,108]),{27:$VF,39:$Vn,42:57,47:$Vo,48:$Vp,49:54,50:$Vq,51:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,59:$Vx,62:$Vy,83:182},{27:$VF,39:$Vn,42:57,47:$Vo,48:$Vp,49:54,50:$Vq,51:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,59:$Vx,62:$Vy,83:183},{27:$VF,39:$Vn,42:57,47:$Vo,48:$Vp,49:54,50:$Vq,51:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,59:$Vx,62:$Vy,83:184},{27:$VF,39:$Vn,42:57,47:$Vo,48:$Vp,49:54,50:$Vq,51:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,59:$Vx,62:$Vy,83:185},{27:$VF,39:$Vn,42:57,47:$Vo,48:$Vp,49:54,50:$Vq,51:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,59:$Vx,62:$Vy,83:186},{27:$VF,39:$Vn,42:57,47:$Vo,48:$Vp,49:54,50:$Vq,51:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,59:$Vx,62:$Vy,83:187},{27:$VF,39:$Vn,42:57,47:$Vo,48:$Vp,49:188,50:$Vq,51:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,59:$Vx,62:$Vy},{27:$VF,39:$Vn,42:57,47:$Vo,48:$Vp,49:189,50:$Vq,51:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,59:$Vx,62:$Vy},{27:$VF,39:$Vn,42:57,47:$Vo,48:$Vp,49:190,50:$Vq,51:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,59:$Vx,62:$Vy},{27:$VF,39:$Vn,42:57,47:$Vo,48:$Vp,49:191,50:$Vq,51:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,59:$Vx,62:$Vy},{27:$VF,39:$Vn,42:57,47:$Vo,48:$Vp,49:192,50:$Vq,51:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,59:$Vx,62:$Vy},o($V11,[2,58]),{27:$VF,39:$Vn,42:57,47:$Vo,48:$Vp,49:193,50:$Vq,51:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,59:$Vx,62:$Vy},{27:[1,194]},{27:$VF,39:$Vn,42:57,47:$Vo,48:$Vp,49:195,50:$Vq,51:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,59:$Vx,62:$Vy},{27:$VF,39:$Vn,42:196,47:$Vo,48:$Vp,50:$Vq,51:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw},{27:$VF,39:$Vn,42:197,47:$Vo,48:$Vp,50:$Vq,51:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw},{40:[1,198]},{26:$V51,46:[1,199]},{21:[1,201]},o($V61,[2,65],{58:$VY,59:$VZ,60:$V_,61:$V$,63:$V01}),{26:$V41,46:[1,202]},{77:[1,203]},o($Vg,[2,133]),{27:$VA,39:$Vn,42:57,45:$VB,47:$Vo,48:$Vp,49:54,50:$Vq,51:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,59:$Vx,62:$Vy,83:73,92:$VC,102:204,103:$VD},o($V21,[2,127]),{46:[1,205],90:$VM,91:$VN},{27:$VF,39:$Vn,42:57,47:$Vo,48:$Vp,49:140,50:$Vq,51:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,59:$Vx,62:$Vy,64:206},{45:[1,207]},{27:$VF,39:$Vn,42:57,47:$Vo,48:$Vp,49:54,50:$Vq,51:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,59:$Vx,62:$Vy,69:208,83:53,92:$Vz},{7:86,8:91,10:97,11:92,12:88,13:89,15:153,16:87,17:90,18:93,19:94,20:$VG,22:$VH,23:$V0,24:$V1,25:12,27:$VI,34:98,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,75:19,76:$V8,78:[1,209],93:$V9,94:$Va,95:$VJ,98:$VK,101:$Vc,106:$Vd,107:$VL},{77:[1,210]},{93:[1,211]},o($V31,[2,11]),o($V31,[2,22]),o($V31,[2,23]),o($Vl,$Vj,{66:$Vm}),{27:$VF,39:$Vn,42:57,46:[1,213],47:$Vo,48:$Vp,49:140,50:$Vq,51:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,59:$Vx,62:$Vy,64:212},{25:215,27:$V71,34:214,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7},{27:$VF,39:$Vn,42:57,47:$Vo,48:$Vp,49:217,50:$Vq,51:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,59:$Vx,62:$Vy},{21:[1,218],26:$V51},o([21,26,58,59,60,61,63],$VO,{43:$VP,45:[1,219]}),o($V31,[2,136]),o($Vh,[2,43]),{66:[1,221],68:[1,220]},{77:[1,222]},o($Vg,[2,71]),{27:$VF,39:$Vn,42:57,47:$Vo,48:$Vp,49:223,50:$Vq,51:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,59:$Vx,62:$Vy},{27:$VF,39:$Vn,42:57,46:[1,225],47:$Vo,48:$Vp,49:140,50:$Vq,51:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,59:$Vx,62:$Vy,64:224},{54:[1,226]},o($Vg,[2,74]),{46:[1,227]},{77:[1,228]},{34:229,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7},{7:86,8:91,10:97,11:92,12:88,13:89,14:230,15:85,16:87,17:90,18:93,19:94,20:$VG,22:$VH,23:$V0,24:$V1,25:12,27:$VI,34:98,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,75:19,76:$V8,93:$V9,94:$Va,95:$VJ,98:$VK,101:$Vc,106:$Vd,107:$VL},o($V81,[2,69],{66:[1,231]}),{27:[1,234],66:[1,233],73:[1,232]},{67:[1,235]},o([21,46,82,90],[2,106],{91:$VN}),o($VQ,[2,107]),{26:$V51,67:[1,236]},{45:[1,237]},o($VX,[2,99]),o($VX,[2,100]),o($VX,[2,101]),o($VX,[2,102]),o($VX,[2,103]),o($VX,[2,104]),o($V91,[2,56],{60:$V_,61:$V$,63:$V01}),o($V91,[2,57],{60:$V_,61:$V$,63:$V01}),o($V11,[2,59]),o($V11,[2,60]),o($V11,[2,62]),{26:[1,238],58:$VY,59:$VZ,60:$V_,61:$V$,63:$V01},{46:[1,239]},{46:[1,240],58:$VY,59:$VZ,60:$V_,61:$V$,63:$V01},{46:[1,241]},{46:[1,242]},{52:[1,243]},{21:[1,244]},{27:$VF,39:$Vn,42:57,47:$Vo,48:$Vp,49:245,50:$Vq,51:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,59:$Vx,62:$Vy},o($Vg,[2,125]),{77:[1,246]},{7:86,8:91,10:97,11:92,12:88,13:89,14:247,15:85,16:87,17:90,18:93,19:94,20:$VG,22:$VH,23:$V0,24:$V1,25:12,27:$VI,34:98,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,75:19,76:$V8,93:$V9,94:$Va,95:$VJ,98:$VK,101:$Vc,106:$Vd,107:$VL},o($V21,[2,131]),o($V21,[2,128]),{26:$V51,46:[1,248]},{27:$VF,39:$Vn,42:57,47:$Vo,48:$Vp,49:54,50:$Vq,51:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,59:$Vx,62:$Vy,69:249,83:53,92:$Vz},{46:[1,250],90:$VM,91:$VN},o($Vg,[2,93]),{7:86,8:91,10:97,11:92,12:88,13:89,14:251,15:85,16:87,17:90,18:93,19:94,20:$VG,22:$VH,23:$V0,24:$V1,25:12,27:$VI,34:98,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,75:19,76:$V8,93:$V9,94:$Va,95:$VJ,98:$VK,101:$Vc,106:$Vd,107:$VL},{45:[1,252]},{26:$V51,46:[1,253]},{21:[1,254]},{25:255,27:$V71},{26:$Vf,68:[1,256]},o($Vi,$Vj),{46:[1,257],58:$VY,59:$VZ,60:$V_,61:$V$,63:$V01},o($V31,[2,134]),{27:$VF,39:$Vn,42:57,47:$Vo,48:$Vp,49:140,50:$Vq,51:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,59:$Vx,62:$Vy,64:258},{27:$VF,39:$Vn,42:57,47:$Vo,48:$Vp,49:259,50:$Vq,51:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,59:$Vx,62:$Vy},{54:[1,260]},{7:86,8:91,10:97,11:92,12:88,13:89,14:261,15:85,16:87,17:90,18:93,19:94,20:$VG,22:$VH,23:$V0,24:$V1,25:12,27:$VI,34:98,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,75:19,76:$V8,93:$V9,94:$Va,95:$VJ,98:$VK,101:$Vc,106:$Vd,107:$VL},{40:[1,262],58:$VY,59:$VZ,60:$V_,61:$V$,63:$V01},{26:$V51,46:[1,263]},{21:[1,264]},{67:[1,265]},{27:$VF,39:$Vn,42:57,47:$Vo,48:$Vp,49:266,50:$Vq,51:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,59:$Vx,62:$Vy},{7:86,8:91,10:97,11:92,12:88,13:89,14:267,15:85,16:87,17:90,18:93,19:94,20:$VG,22:$VH,23:$V0,24:$V1,25:12,27:$VI,34:98,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,75:19,76:$V8,93:$V9,94:$Va,95:$VJ,98:$VK,101:$Vc,106:$Vd,107:$VL},{27:[1,268]},{7:86,8:91,10:97,11:92,12:88,13:89,15:153,16:87,17:90,18:93,19:94,20:$VG,22:$VH,23:$V0,24:$V1,25:12,27:$VI,34:98,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,75:19,76:$V8,78:[1,269],93:$V9,94:$Va,95:$VJ,98:$VK,101:$Vc,106:$Vd,107:$VL},{67:[1,270]},{34:271,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7},{27:$VF,39:$Vn,42:57,47:$Vo,48:$Vp,49:140,50:$Vq,51:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,59:$Vx,62:$Vy,64:272},{43:[1,273]},{68:[1,274]},{21:[1,275]},{46:[1,276]},{27:$VF,39:$Vn,42:57,47:$Vo,48:$Vp,49:277,50:$Vq,51:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,59:$Vx,62:$Vy},o($V11,[2,45]),o($V11,[2,46]),o($V11,[2,47]),o($V11,[2,48]),{45:[1,278]},o($Vg,[2,124]),o($V61,[2,64],{58:$VY,59:$VZ,60:$V_,61:$V$,63:$V01}),{7:86,8:91,10:97,11:92,12:88,13:89,14:279,15:85,16:87,17:90,18:93,19:94,20:$VG,22:$VH,23:$V0,24:$V1,25:12,27:$VI,34:98,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,75:19,76:$V8,93:$V9,94:$Va,95:$VJ,98:$VK,101:$Vc,106:$Vd,107:$VL},{7:86,8:91,10:97,11:92,12:88,13:89,15:153,16:87,17:90,18:93,19:94,20:$VG,22:$VH,23:$V0,24:$V1,25:12,27:$VI,34:98,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,75:19,76:$V8,78:[1,280],93:$V9,94:$Va,95:$VJ,98:$VK,101:$Vc,106:$Vd,107:$VL},o($V21,[2,129]),{46:[1,281],90:$VM,91:$VN},{77:[1,282]},{7:86,8:91,10:97,11:92,12:88,13:89,15:153,16:87,17:90,18:93,19:94,20:$VG,22:$VH,23:$V0,24:$V1,25:12,27:$VI,34:98,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,75:19,76:$V8,78:[1,283],93:$V9,94:$Va,95:$VJ,98:$VK,101:$Vc,106:$Vd,107:$VL},{27:$VF,39:$Vn,42:57,47:$Vo,48:$Vp,49:54,50:$Vq,51:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,59:$Vx,62:$Vy,69:284,83:53,92:$Vz},{21:[1,285]},o($V31,[2,123]),{26:$Vf,68:[1,286]},{27:$VF,39:$Vn,42:57,47:$Vo,48:$Vp,49:287,50:$Vq,51:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,59:$Vx,62:$Vy},{77:[1,288]},{26:$V51,46:[1,289]},{21:[1,290],58:$VY,59:$VZ,60:$V_,61:$V$,63:$V01},{67:[1,291]},{7:86,8:91,10:97,11:92,12:88,13:89,15:153,16:87,17:90,18:93,19:94,20:$VG,22:$VH,23:$V0,24:$V1,25:12,27:$VI,34:98,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,75:19,76:$V8,78:[1,292],93:$V9,94:$Va,95:$VJ,98:$VK,101:$Vc,106:$Vd,107:$VL},{27:$VF,39:$Vn,42:57,47:$Vo,48:$Vp,49:293,50:$Vq,51:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,59:$Vx,62:$Vy},{21:[1,294]},o($Vg,[2,73]),{21:[1,295],66:[1,296]},{21:[1,297],58:$VY,59:$VZ,60:$V_,61:$V$,63:$V01},{7:86,8:91,10:97,11:92,12:88,13:89,15:153,16:87,17:90,18:93,19:94,20:$VG,22:$VH,23:$V0,24:$V1,25:12,27:$VI,34:98,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,75:19,76:$V8,78:[1,298],93:$V9,94:$Va,95:$VJ,98:$VK,101:$Vc,106:$Vd,107:$VL},o($V81,[2,66],{66:[1,299]}),o($Ve,[2,119]),o($V81,[2,68]),{66:[1,300]},{26:$V51,67:[1,301]},{74:[1,302]},{66:[1,304],73:[1,303]},o($Vg,[2,77]),o($V11,[2,44]),{46:[1,305],58:$VY,59:$VZ,60:$V_,61:$V$,63:$V01},{27:$VF,39:$Vn,42:57,47:$Vo,48:$Vp,49:306,50:$Vq,51:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,59:$Vx,62:$Vy},{7:86,8:91,10:97,11:92,12:88,13:89,15:153,16:87,17:90,18:93,19:94,20:$VG,22:$VH,23:$V0,24:$V1,25:12,27:$VI,34:98,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,75:19,76:$V8,78:[1,307],93:$V9,94:$Va,95:$VJ,98:$VK,101:$Vc,106:$Vd,107:$VL},o($Ve,[2,121]),{77:[1,308]},{7:86,8:91,10:97,11:92,12:88,13:89,14:309,15:85,16:87,17:90,18:93,19:94,20:$VG,22:$VH,23:$V0,24:$V1,25:12,27:$VI,34:98,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,75:19,76:$V8,93:$V9,94:$Va,95:$VJ,98:$VK,101:$Vc,106:$Vd,107:$VL},o($Vg,[2,110]),{46:[1,310],90:$VM,91:$VN},o($V31,[2,122]),{27:$VF,39:$Vn,42:57,47:$Vo,48:$Vp,49:311,50:$Vq,51:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,59:$Vx,62:$Vy},{21:[1,312],58:$VY,59:$VZ,60:$V_,61:$V$,63:$V01},{96:313,97:[1,314]},{21:[1,315]},o($Vg,[2,87]),{68:[1,316]},o($Va1,[2,90]),{21:[2,98],58:$VY,59:$VZ,60:$V_,61:$V$,63:$V01},o($Vg,[2,72]),o($Vg,[2,85]),{54:[1,317]},o($Vg,[2,75]),o($Ve,[2,118]),{67:[1,318]},{54:[1,319]},{21:[1,320]},{45:[1,321]},{34:322,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7},{66:[1,323]},o($V11,[2,61]),{46:[1,324],58:$VY,59:$VZ,60:$V_,61:$V$,63:$V01},o($Ve,[2,120]),{7:86,8:91,10:97,11:92,12:88,13:89,14:325,15:85,16:87,17:90,18:93,19:94,20:$VG,22:$VH,23:$V0,24:$V1,25:12,27:$VI,34:98,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,75:19,76:$V8,93:$V9,94:$Va,95:$VJ,98:$VK,101:$Vc,106:$Vd,107:$VL},{7:86,8:91,10:97,11:92,12:88,13:89,15:153,16:87,17:90,18:93,19:94,20:$VG,22:$VH,23:$V0,24:$V1,25:12,27:$VI,34:98,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,75:19,76:$V8,78:[1,326],93:$V9,94:$Va,95:$VJ,98:$VK,101:$Vc,106:$Vd,107:$VL},{21:[1,327]},{21:[1,328],58:$VY,59:$VZ,60:$V_,61:$V$,63:$V01},{27:$VF,39:$Vn,42:57,47:$Vo,48:$Vp,49:54,50:$Vq,51:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,59:$Vx,62:$Vy,69:329,83:53,92:$Vz},{78:[1,331],97:[1,332],99:[1,330]},{27:$VF,39:$Vn,42:57,47:$Vo,48:$Vp,49:333,50:$Vq,51:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,59:$Vx,62:$Vy},o($V31,[2,135]),{27:$VF,39:$Vn,42:57,47:$Vo,48:$Vp,49:334,50:$Vq,51:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,59:$Vx,62:$Vy},{67:[1,335]},o($V81,[2,67]),{67:[1,336]},o($Vg,[2,83]),{46:[1,337]},{66:[1,338]},{27:$VF,39:$Vn,42:57,47:$Vo,48:$Vp,49:140,50:$Vq,51:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,59:$Vx,62:$Vy,64:339},o($V11,[2,49]),{7:86,8:91,10:97,11:92,12:88,13:89,15:153,16:87,17:90,18:93,19:94,20:$VG,22:$VH,23:$V0,24:$V1,25:12,27:$VI,34:98,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,75:19,76:$V8,78:[1,340],93:$V9,94:$Va,95:$VJ,98:$VK,101:$Vc,106:$Vd,107:$VL},o($Va1,[2,92]),o($Vg,[2,111]),{27:$VF,39:$Vn,42:57,47:$Vo,48:$Vp,49:54,50:$Vq,51:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,59:$Vx,62:$Vy,69:341,83:53,92:$Vz},{21:[1,342],90:$VM,91:$VN},{40:[1,343]},o($V31,[2,117]),{27:$VF,39:$Vn,42:57,47:$Vo,48:$Vp,49:344,50:$Vq,51:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,59:$Vx,62:$Vy},{40:[1,345],58:$VY,59:$VZ,60:$V_,61:$V$,63:$V01},{21:[1,346],58:$VY,59:$VZ,60:$V_,61:$V$,63:$V01},{21:[1,347]},{21:[1,348]},{21:[1,349]},{54:[1,350]},{26:$V51,67:[1,351]},o($Va1,[2,91]),{21:[1,352],90:$VM,91:$VN},{27:$Vb1,72:353},{7:86,8:91,10:97,11:92,12:88,13:89,14:355,15:85,16:87,17:90,18:93,19:94,20:$VG,22:$VH,23:$V0,24:$V1,25:12,27:$VI,34:98,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,75:19,76:$V8,93:$V9,94:$Va,95:$VJ,98:$VK,101:$Vc,106:$Vd,107:$VL},{40:[1,356],58:$VY,59:$VZ,60:$V_,61:$V$,63:$V01},{7:86,8:91,10:97,11:92,12:88,13:89,14:357,15:85,16:87,17:90,18:93,19:94,20:$VG,22:$VH,23:$V0,24:$V1,25:12,27:$VI,34:98,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,75:19,76:$V8,93:$V9,94:$Va,95:$VJ,98:$VK,101:$Vc,106:$Vd,107:$VL},o($Vg,[2,88]),o($Vg,[2,86]),o($Vg,[2,81]),o($Vg,[2,89]),{67:[1,358]},{26:[1,359]},{27:$Vb1,72:360},{46:[1,361]},{58:[1,362],59:[1,363]},{7:86,8:91,10:97,11:92,12:88,13:89,15:153,16:87,17:90,18:93,19:94,20:$VG,22:$VH,23:$V0,24:$V1,25:12,27:$VI,34:98,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,75:19,76:$V8,78:[1,364],93:$V9,94:$Va,95:$VJ,98:$VK,101:$Vc,106:$Vd,107:$VL},{7:86,8:91,10:97,11:92,12:88,13:89,14:365,15:85,16:87,17:90,18:93,19:94,20:$VG,22:$VH,23:$V0,24:$V1,25:12,27:$VI,34:98,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,75:19,76:$V8,93:$V9,94:$Va,95:$VJ,98:$VK,101:$Vc,106:$Vd,107:$VL},o($Vc1,[2,115],{25:12,71:13,75:19,7:86,16:87,12:88,13:89,17:90,8:91,11:92,18:93,19:94,10:97,34:98,15:153,20:$VG,22:$VH,23:$V0,24:$V1,27:$VI,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,76:$V8,93:$V9,94:$Va,95:$VJ,98:$VK,101:$Vc,106:$Vd,107:$VL}),{66:[1,366]},{66:[1,367]},{46:[1,368]},{77:[1,369]},{58:[1,370]},{59:[1,371]},o($V31,[2,116]),o($Vc1,[2,114],{25:12,71:13,75:19,7:86,16:87,12:88,13:89,17:90,8:91,11:92,18:93,19:94,10:97,34:98,15:153,20:$VG,22:$VH,23:$V0,24:$V1,27:$VI,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,76:$V8,93:$V9,94:$Va,95:$VJ,98:$VK,101:$Vc,106:$Vd,107:$VL}),{54:[1,372]},{27:$VF,39:$Vn,42:57,47:$Vo,48:$Vp,49:140,50:$Vq,51:$Vr,53:$Vs,54:$Vt,55:$Vu,56:$Vv,57:$Vw,59:$Vx,62:$Vy,64:373},{77:[1,374]},{7:86,8:91,10:97,11:92,12:88,13:89,14:375,15:85,16:87,17:90,18:93,19:94,20:$VG,22:$VH,23:$V0,24:$V1,25:12,27:$VI,34:98,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,75:19,76:$V8,93:$V9,94:$Va,95:$VJ,98:$VK,101:$Vc,106:$Vd,107:$VL},{46:[2,79]},{46:[2,80]},{67:[1,376]},{26:$V51,67:[1,377]},{7:86,8:91,10:97,11:92,12:88,13:89,14:378,15:85,16:87,17:90,18:93,19:94,20:$VG,22:$VH,23:$V0,24:$V1,25:12,27:$VI,34:98,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,75:19,76:$V8,93:$V9,94:$Va,95:$VJ,98:$VK,101:$Vc,106:$Vd,107:$VL},{7:86,8:91,10:97,11:92,12:88,13:89,15:153,16:87,17:90,18:93,19:94,20:$VG,22:$VH,23:$V0,24:$V1,25:12,27:$VI,34:98,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,75:19,76:$V8,78:[1,379],93:$V9,94:$Va,95:$VJ,98:$VK,101:$Vc,106:$Vd,107:$VL},{21:[1,380]},{67:[1,381]},{7:86,8:91,10:97,11:92,12:88,13:89,15:153,16:87,17:90,18:93,19:94,20:$VG,22:$VH,23:$V0,24:$V1,25:12,27:$VI,34:98,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,75:19,76:$V8,78:[1,382],93:$V9,94:$Va,95:$VJ,98:$VK,101:$Vc,106:$Vd,107:$VL},o($V31,[2,113]),o($Vg,[2,82]),{21:[1,383]},o($V31,[2,112]),o($Vg,[2,84])],
defaultActions: {29:[2,1],370:[2,79],371:[2,80]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


    const {TipoDato} = require("../Interprete/expresion")

    // Expresiones
    const Aritmetica = require("../Interprete/Expresiones/aritmetica")
    const Relacional = require("../Interprete/Expresiones/relacional")
    const Dato = require("../Interprete/Expresiones/dato")
    const Negativo = require("../Interprete/Expresiones/negativo")
    const opLogico = require("../Interprete/Expresiones/opLogicos")
    const Negacion = require("../Interprete/Expresiones/negacion")
    const FuncionCout = require("../Interprete/Expresiones/funcioncout")

    // Instrucciones
    const Cout = require("../Interprete/Instrucciones/cout")
    const If = require("../Interprete/Instrucciones/if")
    const ElseIf = require("../Interprete/Instrucciones/elseif")
    const Else = require("../Interprete/Instrucciones/else")
    const While = require("../Interprete/Instrucciones/while")
    const DoWhile = require("../Interprete/Instrucciones/dowhile")
    const Break = require("../Interprete/Instrucciones/break")
    const Declaracion = require("../Interprete/Instrucciones/declaracion")
    
    

    // Operaciones Mayores
    const SentenciaIf = require("../Interprete/OperacionesMayores/sentenciaIf")
    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:return 23; 
break;
case 5:return 24; 
break;
case 6:return 35;
break;
case 7:return 36;
break;
case 8:return 37;
break;
case 9:return 38;
break;
case 10:return 41;
break;
case 11:return 73;
break;
case 12:return 76;
break;
case 13:return 80;
break;
case 14:return 93;
break;
case 15:return 95;
break;
case 16:return 94;
break;
case 17:return 20;
break;
case 18:return 22;
break;
case 19:return 107;
break;
case 20:return 100;
break;
case 21:return 106;
break;
case 22:return 103;
break;
case 23:return 50;
break;
case 24:return 51;
break;
case 25:return 48;
break;
case 26:return 44;
break;
case 27:return 47;
break;
case 28:return 52;
break;
case 29:return 39;
break;
case 30:return 74;
break;
case 31:return 101;
break;
case 32:return 98;
break;
case 33:return 97;
break;
case 34:return 99;
break;
case 35:return 55; 
break;
case 36:return 57; 
break;
case 37:return 56; 
break;
case 38:return 27; 
break;
case 39:return 53; 
break;
case 40:return 54; 
break;
case 41:return 29;
break;
case 42:return 30;
break;
case 43:return 31;
break;
case 44:return 32;
break;
case 45:return 33;
break;
case 46:return 58;
break;
case 47:return 59;
break;
case 48:return 60;
break;
case 49:return 61;
break;
case 50:return 62;
break;
case 51:return 63;
break;
case 52:return 'ENTRADA';
break;
case 53:return 105;
break;
case 54:return 84;
break;
case 55:return 85;
break;
case 56:return 87;
break;
case 57:return 89;
break;
case 58:return 88;
break;
case 59:return 86;
break;
case 60:return 68;
break;
case 61:return 90;
break;
case 62:return 91;
break;
case 63:return 92;
break;
case 64:return 45;
break;
case 65:return 46;
break;
case 66:return 77;
break;
case 67:return 78;
break;
case 68:return 66;
break;
case 69:return 67;
break;
case 70:return 21;
break;
case 71:return 26;
break;
case 72:return 40;
break;
case 73:return 43;
break;
case 74:return 82;
break;
case 75:return 5;
break;
case 76:console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:{COM_MULT})/i,/^(?:{COM_SIMPLE})/i,/^(?:(\/\*[\s\S]*?\*\/))/i,/^(?:(\/\/.*))/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:bool\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:cout\b)/i,/^(?:endl\b)/i,/^(?:toupper\b)/i,/^(?:tolower\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:std\b)/i,/^(?:c_str\b)/i,/^(?:execute\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:(true|false\b))/i,/^(?:('(([^\n\"\\]|\\.)*)'))/i,/^(?:([\"][^\"\n]+[\"]))/i,/^(?:([a-zA-Z_][a-zA-Z0-9_]*))/i,/^(?:([0-9]+\.[0-9]+\b))/i,/^(?:([0-9]+\b))/i,/^(?:\\n)/i,/^(?:\\)/i,/^(?:\\")/i,/^(?:\\t)/i,/^(?:')/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:pow\b)/i,/^(?:%)/i,/^(?:>>)/i,/^(?:<<)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?:,)/i,/^(?::)/i,/^(?:\.)/i,/^(?:\?)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}