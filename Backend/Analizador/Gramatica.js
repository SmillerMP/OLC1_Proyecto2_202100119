/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,17],$V1=[1,18],$V2=[1,30],$V3=[1,24],$V4=[1,25],$V5=[1,26],$V6=[1,27],$V7=[1,28],$V8=[1,31],$V9=[1,21],$Va=[1,22],$Vb=[1,23],$Vc=[1,16],$Vd=[1,15],$Ve=[1,19],$Vf=[5,23,24,27,35,36,37,38,39,76,93,94,95,100,101,106],$Vg=[5,20,21,22,23,24,27,35,36,37,38,39,40,47,48,50,51,53,54,55,56,57,59,62,76,78,92,93,94,95,97,98,99,100,101,106,107],$Vh=[5,20,21,22,23,24,27,35,36,37,38,39,40,76,78,93,94,95,97,98,99,100,101,106,107],$Vi=[27,46,66],$Vj=[1,53],$Vk=[26,58,59,60,61,63,68],$Vl=[2,29],$Vm=[1,54],$Vn=[21,26,68],$Vo=[1,59],$Vp=[1,67],$Vq=[1,77],$Vr=[1,66],$Vs=[1,73],$Vt=[1,74],$Vu=[1,75],$Vv=[1,76],$Vw=[1,78],$Vx=[1,79],$Vy=[1,80],$Vz=[1,81],$VA=[1,82],$VB=[1,70],$VC=[1,71],$VD=[1,65],$VE=[1,68],$VF=[1,86],$VG=[1,90],$VH=[1,88],$VI=[1,102],$VJ=[1,103],$VK=[1,106],$VL=[1,107],$VM=[1,108],$VN=[21,105],$VO=[1,138],$VP=[1,139],$VQ=[1,140],$VR=[1,141],$VS=[1,142],$VT=[1,143],$VU=[2,56],$VV=[1,147],$VW=[21,46,82,84,85,86,87,88,89,90,91,105],$VX=[1,148],$VY=[1,149],$VZ=[1,150],$V_=[1,151],$V$=[1,152],$V01=[21,26,40,46,58,59,60,61,63,67,82,84,85,86,87,88,89,90,91,105],$V11=[1,164],$V21=[1,165],$V31=[21,46,82,90,91],$V41=[20,21,22,23,24,27,35,36,37,38,39,40,76,78,93,94,95,97,98,99,101,106,107],$V51=[21,46],$V61=[1,194],$V71=[1,200],$V81=[21,26,46,67],$V91=[26,46],$Va1=[21,26,40,46,58,59,67,82,84,85,86,87,88,89,90,91,105],$Vb1=[5,20,21,22,23,24,27,35,36,37,38,39,40,76,78,80,93,94,95,97,98,99,100,101,106,107],$Vc1=[78,97,99];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"entornos":4,"EOF":5,"entorno":6,"declaracionVariables":7,"funcionExecute":8,"funciones":9,"comentarios":10,"impresionCout":11,"sentenciaIfCompleta":12,"ciclosWhile":13,"cicloFor":14,"instrucciones":15,"instruccion":16,"llamarFunciones":17,"switchCase":18,"sentenciaReturn":19,"PR_BREAK":20,"PTCOMA":21,"PR_CONTINUE":22,"COM_MULT":23,"COM_SIMPLE":24,"identificadores":25,"COMA":26,"ID":27,"secuenciasEscape":28,"SALTO_LINEA":29,"BARRA_INVERTIDA":30,"COMILLA_DOBLE":31,"TABULACION":32,"COMILLA_SIMPLE":33,"tiposVar":34,"PR_INT":35,"PR_DOUBLE":36,"PR_BOOL":37,"PR_CHAR":38,"PR_STD":39,"DOSPUNTOS":40,"PR_STRING":41,"valores":42,"PUNTO":43,"PR_LENGTH":44,"PARIZQ":45,"PARDER":46,"PR_TYPEOF":47,"PR_ROUND":48,"valoresPlus":49,"PR_TOUPPER":50,"PR_TOLOWER":51,"PR_TOSTRING":52,"DECIMAL":53,"ENTERO":54,"BOOLEAN":55,"STRING":56,"CHAR":57,"MAS":58,"MENOS":59,"POR":60,"DIVIDIDO":61,"POTENCIA":62,"MODULO":63,"valoresArreglos":64,"arregloDeclaraciones":65,"CORIZQ":66,"CORDER":67,"IGUAL":68,"sentenciaLogica":69,"ternario":70,"modificarVariables":71,"VectoresMatrices":72,"PR_NEW":73,"PR_C_STR":74,"sentenciaIf":75,"PR_IF":76,"LLAVIZQ":77,"LLAVDER":78,"sentenciaIfElse":79,"PR_ELSE":80,"sentenciaElse":81,"INTERROGACION":82,"sentenciaRelacional":83,"IGUALES":84,"DIFERENTE":85,"MENOR_QUE":86,"MENOR_IGUAL":87,"MAYOR_QUE":88,"MAYOR_IGUAL":89,"OR":90,"AND":91,"NOT":92,"PR_WHILE":93,"PR_DO":94,"PR_FOR":95,"recursividadCase":96,"PR_CASE":97,"PR_SWITCH":98,"PR_DEFAULT":99,"PR_VOID":100,"PR_EXECUTE":101,"posibilidadesCout":102,"PR_ENDL":103,"funcionCout":104,"SALIDA":105,"PR_COUT":106,"PR_RETURN":107,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",20:"PR_BREAK",21:"PTCOMA",22:"PR_CONTINUE",23:"COM_MULT",24:"COM_SIMPLE",26:"COMA",27:"ID",29:"SALTO_LINEA",30:"BARRA_INVERTIDA",31:"COMILLA_DOBLE",32:"TABULACION",33:"COMILLA_SIMPLE",35:"PR_INT",36:"PR_DOUBLE",37:"PR_BOOL",38:"PR_CHAR",39:"PR_STD",40:"DOSPUNTOS",41:"PR_STRING",43:"PUNTO",44:"PR_LENGTH",45:"PARIZQ",46:"PARDER",47:"PR_TYPEOF",48:"PR_ROUND",50:"PR_TOUPPER",51:"PR_TOLOWER",52:"PR_TOSTRING",53:"DECIMAL",54:"ENTERO",55:"BOOLEAN",56:"STRING",57:"CHAR",58:"MAS",59:"MENOS",60:"POR",61:"DIVIDIDO",62:"POTENCIA",63:"MODULO",66:"CORIZQ",67:"CORDER",68:"IGUAL",73:"PR_NEW",74:"PR_C_STR",76:"PR_IF",77:"LLAVIZQ",78:"LLAVDER",80:"PR_ELSE",82:"INTERROGACION",84:"IGUALES",85:"DIFERENTE",86:"MENOR_QUE",87:"MENOR_IGUAL",88:"MAYOR_QUE",89:"MAYOR_IGUAL",90:"OR",91:"AND",92:"NOT",93:"PR_WHILE",94:"PR_DO",95:"PR_FOR",97:"PR_CASE",98:"PR_SWITCH",99:"PR_DEFAULT",100:"PR_VOID",101:"PR_EXECUTE",103:"PR_ENDL",105:"SALIDA",106:"PR_COUT",107:"PR_RETURN"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[15,2],[15,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,2],[16,2],[16,1],[10,1],[10,1],[25,3],[25,1],[28,2],[28,2],[28,2],[28,2],[28,2],[28,1],[28,1],[28,1],[28,1],[28,1],[34,1],[34,1],[34,1],[34,1],[34,4],[42,5],[42,4],[42,4],[42,4],[42,4],[42,7],[42,1],[42,1],[42,1],[42,1],[42,1],[42,1],[49,3],[49,3],[49,2],[49,3],[49,3],[49,6],[49,3],[49,1],[64,3],[64,1],[65,4],[65,6],[65,4],[65,2],[7,3],[7,5],[7,8],[7,7],[7,5],[7,8],[7,2],[7,1],[71,3],[71,3],[71,3],[71,4],[71,4],[71,4],[71,4],[71,4],[71,6],[72,11],[72,16],[72,9],[72,17],[72,8],[72,11],[72,7],[72,10],[72,11],[75,7],[79,9],[79,8],[81,4],[12,3],[12,2],[12,2],[12,1],[70,5],[83,3],[83,3],[83,3],[83,3],[83,3],[83,3],[83,1],[69,3],[69,3],[69,2],[69,1],[13,7],[13,9],[14,10],[96,5],[96,4],[18,10],[18,7],[9,8],[9,7],[9,8],[9,7],[17,5],[17,4],[8,6],[8,5],[102,1],[102,2],[102,3],[102,4],[102,3],[102,1],[104,3],[104,1],[11,4],[19,3],[19,6],[19,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$ = $$[$0-1]; return this.$; 
break;
case 2: case 12:
this.$ = $$[$0-1]; this.$.push($$[$0]);
break;
case 3: case 13: case 29: case 66:
this.$ = []; this.$.push($$[$0]);
break;
case 4: case 8: case 9: case 10: case 11: case 20:
this.$ = $$[$0];
break;
case 23:
this.$ = new Break($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 28:
this.$ = $$[$0-2]; this.$.push($$[$0]);
break;
case 40:
this.$ = "ENTERO";
break;
case 41:
this.$ = "DECIMAL";
break;
case 42:
this.$ = "BOOL";
break;
case 43:
this.$ = "CHAR";
break;
case 44:
this.$ = "STRING";
break;
case 47: case 48: case 49:
this.$ = new FuncionCout($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 50:
this.$ = new FuncionCout($$[$0-3], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
break;
case 51:
this.$ = new Dato($$[$0], TipoDato.DECIMAL, _$[$0].first_line, _$[$0].first_column); 
break;
case 52:
this.$ = new Dato($$[$0], TipoDato.ENTERO, _$[$0].first_line, _$[$0].first_column); 
break;
case 53:
this.$ = new Dato($$[$0], TipoDato.BOOL, _$[$0].first_line, _$[$0].first_column); 
break;
case 54:
this.$ = new Dato($$[$0], TipoDato.STRING, _$[$0].first_line, _$[$0].first_column); 
break;
case 55:
this.$ = new Dato($$[$0], TipoDato.CHAR, _$[$0].first_line, _$[$0].first_column); 
break;
case 56:
this.$ = new Variable($$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 57: case 58: case 60: case 61: case 63:
 this.$ = new Aritmetica($$[$0-2], $$[$0], $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 59:
 this.$ = new Negativo($$[$0], _$[$0-1].first_line, _$[$0-1].first_column);           
break;
case 62:
 this.$ = new Aritmetica($$[$0-3], $$[$0-1], $$[$0-4], _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 64: case 112: case 116:
 this.$ = $$[$0]; 
break;
case 65:
this.$ = $$[$0-2]; this.$.push($$[$0-1]);
break;
case 71:
this.$ = new Declaracion($$[$0-2], $$[$0-1], null, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 72:
this.$ = new Declaracion($$[$0-4], $$[$0-3], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 77:
this.$ = $$[$0-1];
break;
case 79: case 80:
this.$ = new ActualizacionFor($$[$0-2], $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 81:
this.$ = new ModificarVar($$[$0-2], $$[$0-1], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 82: case 83: case 84: case 85: case 86:
this.$ = new ModificarVar($$[$0-3], $$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 97:
this.$ = new If($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column)
break;
case 98:
this.$ = $$[$0-8]; this.$.push(new ElseIf($$[$0-4], $$[$0-1], _$[$0-8].first_line, _$[$0-8].first_column))
break;
case 99:
this.$ = []; this.$.push(new ElseIf($$[$0-4], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column))
break;
case 100:
this.$ = new Else($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column)
break;
case 101:
this.$ = new SentenciaIf($$[$0-2], $$[$0-1], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 102:
this.$ = new SentenciaIf($$[$0-1], $$[$0], null, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 103:
this.$ = new SentenciaIf($$[$0-1], null, $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 104:
this.$ = new SentenciaIf($$[$0], null, null, _$[$0].first_line, _$[$0].first_column);
break;
case 105:
this.$ = new Ternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 106: case 107: case 108: case 109: case 110: case 111:
 this.$ = new Relacional($$[$0-2], $$[$0], $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 113:
 this.$ = new opLogicos($$[$0-2], $$[$0], $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 114:
 this.$ = new opLogico($$[$0-2], $$[$0], $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 115:
 this.$ = new Negacion($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 117:
 this.$ = new While($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 118:
 this.$ = new DoWhile($$[$0-2], $$[$0-6], _$[$0-8].first_line, _$[$0-8].first_column); 
break;
case 119:
 this.$ = new For($$[$0-7], $$[$0-6], $$[$0-4], $$[$0-1], _$[$0-9].first_line, _$[$0-9].first_column);
break;
case 132:
 this.$ = $$[$0];
break;
case 133:
 this.$ = Negacion($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 138:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 139:
 this.$ = []; this.$.push($$[$0]); 
break;
case 140:
 this.$ = new Cout($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,23:$V0,24:$V1,25:29,27:$V2,34:12,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,72:14,75:20,76:$V8,93:$V9,94:$Va,95:$Vb,100:$Vc,101:$Vd,106:$Ve},{1:[3]},{5:[1,32],6:33,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,23:$V0,24:$V1,25:29,27:$V2,34:12,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,72:14,75:20,76:$V8,93:$V9,94:$Va,95:$Vb,100:$Vc,101:$Vd,106:$Ve},o($Vf,[2,3]),o($Vf,[2,4]),o($Vf,[2,5]),o($Vf,[2,6]),o($Vf,[2,7]),o($Vf,[2,8]),o($Vf,[2,9]),o($Vf,[2,10]),o($Vf,[2,11]),{25:34,27:[1,35]},{21:[1,36]},o($Vg,[2,78]),{27:[1,37]},{27:[1,38]},o($Vh,[2,26]),o($Vh,[2,27]),{105:[1,39]},o($Vh,[2,104],{79:40,81:41,80:[1,42]}),{45:[1,43]},{77:[1,44]},{45:[1,45]},o($Vi,[2,40]),o($Vi,[2,41]),o($Vi,[2,42]),o($Vi,[2,43]),{40:[1,46]},{26:$Vj,58:[1,47],59:[1,48],60:[1,50],61:[1,51],63:[1,52],68:[1,49]},o($Vk,$Vl,{66:$Vm}),{45:[1,55]},{1:[2,1]},o($Vf,[2,2]),{21:[1,56],26:$Vj,68:[1,57]},o($Vn,$Vl,{45:[1,58],66:$Vo}),o($Vg,[2,77]),{45:[1,60]},{45:[1,61]},{27:$Vp,39:$Vq,42:72,45:$Vr,47:$Vs,48:$Vt,49:69,50:$Vu,51:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,59:$VB,62:$VC,83:64,92:$VD,102:63,103:$VE,104:62},o($Vh,[2,102],{81:83,80:[1,84]}),o($Vh,[2,103]),{76:[1,85],77:$VF},{27:$VG,39:$Vq,42:72,47:$Vs,48:$Vt,49:69,50:$Vu,51:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,59:$VB,62:$VC,69:87,83:89,92:$VH},{7:93,8:98,10:104,11:99,12:95,13:96,14:97,15:91,16:92,17:94,18:100,19:101,20:$VI,22:$VJ,23:$V0,24:$V1,25:29,27:$VK,34:105,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,72:14,75:20,76:$V8,93:$V9,94:$Va,95:$Vb,98:$VL,101:$Vd,106:$Ve,107:$VM},{7:109,25:29,27:$V2,34:105,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,72:14},{40:[1,110]},{58:[1,111],68:[1,112]},{59:[1,113],68:[1,114]},{27:[1,116],39:$Vq,42:72,47:$Vs,48:$Vt,49:69,50:$Vu,51:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,59:$VB,62:$VC,69:115,83:89,92:$VH},{68:[1,117]},{68:[1,118]},{68:[1,119]},{27:[1,120]},{54:[1,121]},{27:$VG,39:$Vq,42:72,47:$Vs,48:$Vt,49:69,50:$Vu,51:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,59:$VB,62:$VC,69:122,83:89,92:$VH},o($Vg,[2,71]),{27:[1,124],39:$Vq,42:72,45:[1,126],47:$Vs,48:$Vt,49:69,50:$Vu,51:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,59:$VB,62:$VC,69:123,70:125,83:89,92:$VH},{34:129,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,46:[1,128],65:127},{67:[1,130]},{27:$VG,39:$Vq,42:72,46:[1,132],47:$Vs,48:$Vt,49:133,50:$Vu,51:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,59:$VB,62:$VC,64:131},{34:129,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,46:[1,135],65:134},{21:[1,136],105:[1,137]},o($VN,[2,139]),o($VN,[2,132],{84:$VO,85:$VP,86:$VQ,87:$VR,88:$VS,89:$VT}),{55:[1,144]},{27:$VG,39:$Vq,42:72,47:$Vs,48:$Vt,49:69,50:$Vu,51:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,59:$VB,62:$VC,69:145,83:89,92:$VH},o([21,58,59,60,61,63,84,85,86,87,88,89,105],$VU,{43:$VV,45:[1,146]}),o($VN,[2,137]),o($VW,[2,112],{58:$VX,59:$VY,60:$VZ,61:$V_,63:$V$}),{27:$VG,39:$Vq,42:72,47:$Vs,48:$Vt,49:153,50:$Vu,51:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,59:$VB,62:$VC},{45:[1,154]},o($V01,[2,64]),{45:[1,155]},{45:[1,156]},{45:[1,157]},{45:[1,158]},{40:[1,159]},o($V01,[2,51]),o($V01,[2,52]),o($V01,[2,53]),o($V01,[2,54]),o($V01,[2,55]),o($Vh,[2,101]),{76:[1,160],77:$VF},{45:[1,161]},{7:93,8:98,10:104,11:99,12:95,13:96,14:97,15:162,16:92,17:94,18:100,19:101,20:$VI,22:$VJ,23:$V0,24:$V1,25:29,27:$VK,34:105,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,72:14,75:20,76:$V8,93:$V9,94:$Va,95:$Vb,98:$VL,101:$Vd,106:$Ve,107:$VM},{46:[1,163],90:$V11,91:$V21},{27:$VG,39:$Vq,42:72,47:$Vs,48:$Vt,49:69,50:$Vu,51:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,59:$VB,62:$VC,69:166,83:89,92:$VH},o($V31,[2,116],{84:$VO,85:$VP,86:$VQ,87:$VR,88:$VS,89:$VT}),o($V01,$VU,{43:$VV}),{7:93,8:98,10:104,11:99,12:95,13:96,14:97,16:168,17:94,18:100,19:101,20:$VI,22:$VJ,23:$V0,24:$V1,25:29,27:$VK,34:105,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,72:14,75:20,76:$V8,78:[1,167],93:$V9,94:$Va,95:$Vb,98:$VL,101:$Vd,106:$Ve,107:$VM},o($V41,[2,13]),o($V41,[2,14]),o($V41,[2,15]),o($V41,[2,16]),o($V41,[2,17]),o($V41,[2,18]),o($V41,[2,19]),o($V41,[2,20]),o($V41,[2,21]),o($V41,[2,22]),{21:[1,169]},{21:[1,170]},o($V41,[2,25]),{25:34,27:[1,171]},o($Vk,$Vl,{45:[1,172],66:$Vm}),{45:[1,173]},{21:[1,176],27:[1,175],39:$Vq,42:72,47:$Vs,48:$Vt,49:133,50:$Vu,51:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,59:$VB,62:$VC,64:174},{27:$VG,39:$Vq,42:72,47:$Vs,48:$Vt,49:69,50:$Vu,51:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,59:$VB,62:$VC,69:177,83:89,92:$VH},{41:[1,178]},o($V51,[2,79]),{27:$VG,39:$Vq,42:72,47:$Vs,48:$Vt,49:69,50:$Vu,51:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,59:$VB,62:$VC,69:179,83:89,92:$VH},o($V51,[2,80]),{27:$VG,39:$Vq,42:72,47:$Vs,48:$Vt,49:180,50:$Vu,51:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,59:$VB,62:$VC},o($V51,[2,81],{90:$V11,91:$V21}),o([21,46,58,59,60,61,63,84,85,86,87,88,89,90,91],$VU,{43:$VV,66:[1,181]}),{27:$VG,39:$Vq,42:72,47:$Vs,48:$Vt,49:69,50:$Vu,51:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,59:$VB,62:$VC,69:182,83:89,92:$VH},{27:$VG,39:$Vq,42:72,47:$Vs,48:$Vt,49:69,50:$Vu,51:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,59:$VB,62:$VC,69:183,83:89,92:$VH},{27:$VG,39:$Vq,42:72,47:$Vs,48:$Vt,49:69,50:$Vu,51:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,59:$VB,62:$VC,69:184,83:89,92:$VH},o([21,26,58,59,60,61,63,68],[2,28]),{67:[1,185]},{46:[1,186],90:$V11,91:$V21},{21:[1,187],82:[1,188],90:$V11,91:$V21},o([21,58,59,60,61,63,82,84,85,86,87,88,89,90,91],$VU,{43:$VV,45:[1,189],66:[1,190]}),{21:[1,191]},{34:192,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7},{26:$V61,46:[1,193]},{77:[1,195]},{27:[1,196]},{66:[1,198],68:[1,197]},{26:$V71,46:[1,199]},{21:[1,201]},o($V81,[2,66],{58:$VX,59:$VY,60:$VZ,61:$V_,63:$V$}),{26:$V61,46:[1,202]},{77:[1,203]},o($Vh,[2,140]),{27:$Vp,39:$Vq,42:72,45:$Vr,47:$Vs,48:$Vt,49:69,50:$Vu,51:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,59:$VB,62:$VC,83:64,92:$VD,102:204,103:$VE},{27:$VG,39:$Vq,42:72,47:$Vs,48:$Vt,49:69,50:$Vu,51:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,59:$VB,62:$VC,83:205},{27:$VG,39:$Vq,42:72,47:$Vs,48:$Vt,49:69,50:$Vu,51:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,59:$VB,62:$VC,83:206},{27:$VG,39:$Vq,42:72,47:$Vs,48:$Vt,49:69,50:$Vu,51:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,59:$VB,62:$VC,83:207},{27:$VG,39:$Vq,42:72,47:$Vs,48:$Vt,49:69,50:$Vu,51:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,59:$VB,62:$VC,83:208},{27:$VG,39:$Vq,42:72,47:$Vs,48:$Vt,49:69,50:$Vu,51:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,59:$VB,62:$VC,83:209},{27:$VG,39:$Vq,42:72,47:$Vs,48:$Vt,49:69,50:$Vu,51:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,59:$VB,62:$VC,83:210},o($VN,[2,133]),{46:[1,211],90:$V11,91:$V21},{27:$VG,39:$Vq,42:72,46:[1,213],47:$Vs,48:$Vt,49:133,50:$Vu,51:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,59:$VB,62:$VC,64:212},{44:[1,214]},{27:$VG,39:$Vq,42:72,47:$Vs,48:$Vt,49:215,50:$Vu,51:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,59:$VB,62:$VC},{27:$VG,39:$Vq,42:72,47:$Vs,48:$Vt,49:216,50:$Vu,51:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,59:$VB,62:$VC},{27:$VG,39:$Vq,42:72,47:$Vs,48:$Vt,49:217,50:$Vu,51:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,59:$VB,62:$VC},{27:$VG,39:$Vq,42:72,47:$Vs,48:$Vt,49:218,50:$Vu,51:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,59:$VB,62:$VC},{27:$VG,39:$Vq,42:72,47:$Vs,48:$Vt,49:219,50:$Vu,51:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,59:$VB,62:$VC},o($V01,[2,59]),{27:$VG,39:$Vq,42:72,47:$Vs,48:$Vt,49:220,50:$Vu,51:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,59:$VB,62:$VC},{27:[1,221]},{27:$VG,39:$Vq,42:72,47:$Vs,48:$Vt,49:222,50:$Vu,51:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,59:$VB,62:$VC},{27:$VG,39:$Vq,42:223,47:$Vs,48:$Vt,50:$Vu,51:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA},{27:$VG,39:$Vq,42:224,47:$Vs,48:$Vt,50:$Vu,51:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA},{40:[1,225]},{45:[1,226]},{27:$VG,39:$Vq,42:72,47:$Vs,48:$Vt,49:69,50:$Vu,51:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,59:$VB,62:$VC,69:227,83:89,92:$VH},{7:93,8:98,10:104,11:99,12:95,13:96,14:97,16:168,17:94,18:100,19:101,20:$VI,22:$VJ,23:$V0,24:$V1,25:29,27:$VK,34:105,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,72:14,75:20,76:$V8,78:[1,228],93:$V9,94:$Va,95:$Vb,98:$VL,101:$Vd,106:$Ve,107:$VM},{77:[1,229]},{27:$VG,39:$Vq,42:72,47:$Vs,48:$Vt,49:69,50:$Vu,51:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,59:$VB,62:$VC,69:230,83:89,92:$VH},{27:$VG,39:$Vq,42:72,47:$Vs,48:$Vt,49:69,50:$Vu,51:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,59:$VB,62:$VC,69:231,83:89,92:$VH},o($V31,[2,115]),{93:[1,232]},o($V41,[2,12]),o($V41,[2,23]),o($V41,[2,24]),o($Vn,$Vl,{66:$Vo}),{27:$VG,39:$Vq,42:72,46:[1,234],47:$Vs,48:$Vt,49:133,50:$Vu,51:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,59:$VB,62:$VC,64:233},{27:$VG,39:$Vq,42:72,47:$Vs,48:$Vt,49:235,50:$Vu,51:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,59:$VB,62:$VC},{21:[1,236],26:$V71},o([21,26,58,59,60,61,63],$VU,{43:$VV,45:[1,237]}),o($V41,[2,143]),{21:[1,238],90:$V11,91:$V21},o($Vi,[2,44]),o($V51,[2,82],{90:$V11,91:$V21}),o($V51,[2,83],{58:$VX,59:$VY,60:$VZ,61:$V_,63:$V$}),{27:$VG,39:$Vq,42:72,47:$Vs,48:$Vt,49:133,50:$Vu,51:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,59:$VB,62:$VC,64:239},o($V51,[2,84],{90:$V11,91:$V21}),o($V51,[2,85],{90:$V11,91:$V21}),o($V51,[2,86],{90:$V11,91:$V21}),{66:[1,241],68:[1,240]},{77:[1,242]},o($Vg,[2,72]),{7:93,8:98,10:104,11:99,12:95,13:96,14:97,15:243,16:92,17:94,18:100,19:101,20:$VI,22:$VJ,23:$V0,24:$V1,25:29,27:$VK,34:105,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,72:14,75:20,76:$V8,93:$V9,94:$Va,95:$Vb,98:$VL,101:$Vd,106:$Ve,107:$VM},{27:$VG,39:$Vq,42:72,46:[1,245],47:$Vs,48:$Vt,49:133,50:$Vu,51:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,59:$VB,62:$VC,64:244},{54:[1,246]},o($Vg,[2,75]),{46:[1,247]},{77:[1,248]},{34:249,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7},{7:93,8:98,10:104,11:99,12:95,13:96,14:97,15:250,16:92,17:94,18:100,19:101,20:$VI,22:$VJ,23:$V0,24:$V1,25:29,27:$VK,34:105,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,72:14,75:20,76:$V8,93:$V9,94:$Va,95:$Vb,98:$VL,101:$Vd,106:$Ve,107:$VM},o($V91,[2,70],{66:[1,251]}),{27:[1,254],66:[1,253],73:[1,252]},{67:[1,255]},{21:[1,256]},{27:$VG,39:$Vq,42:72,47:$Vs,48:$Vt,49:257,50:$Vu,51:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,59:$VB,62:$VC},o($Vh,[2,131]),{77:[1,258]},{7:93,8:98,10:104,11:99,12:95,13:96,14:97,15:259,16:92,17:94,18:100,19:101,20:$VI,22:$VJ,23:$V0,24:$V1,25:29,27:$VK,34:105,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,72:14,75:20,76:$V8,93:$V9,94:$Va,95:$Vb,98:$VL,101:$Vd,106:$Ve,107:$VM},o($VN,[2,138]),o($VW,[2,106]),o($VW,[2,107]),o($VW,[2,108]),o($VW,[2,109]),o($VW,[2,110]),o($VW,[2,111]),o($VN,[2,134]),{26:$V71,46:[1,260]},o($VN,[2,136]),{45:[1,261]},o($Va1,[2,57],{60:$VZ,61:$V_,63:$V$}),o($Va1,[2,58],{60:$VZ,61:$V_,63:$V$}),o($V01,[2,60]),o($V01,[2,61]),o($V01,[2,63]),{26:[1,262],58:$VX,59:$VY,60:$VZ,61:$V_,63:$V$},{46:[1,263]},{46:[1,264],58:$VX,59:$VY,60:$VZ,61:$V_,63:$V$},{46:[1,265]},{46:[1,266]},{52:[1,267]},{27:$VG,39:$Vq,42:72,47:$Vs,48:$Vt,49:69,50:$Vu,51:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,59:$VB,62:$VC,69:268,83:89,92:$VH},{46:[1,269],90:$V11,91:$V21},o($Vh,[2,100]),{7:93,8:98,10:104,11:99,12:95,13:96,14:97,15:270,16:92,17:94,18:100,19:101,20:$VI,22:$VJ,23:$V0,24:$V1,25:29,27:$VK,34:105,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,72:14,75:20,76:$V8,93:$V9,94:$Va,95:$Vb,98:$VL,101:$Vd,106:$Ve,107:$VM},o([21,46,82,90],[2,113],{91:$V21}),o($V31,[2,114]),{45:[1,271]},{26:$V71,46:[1,272]},{21:[1,273]},{46:[1,274],58:$VX,59:$VY,60:$VZ,61:$V_,63:$V$},o($V41,[2,141]),{27:$VG,39:$Vq,42:72,47:$Vs,48:$Vt,49:133,50:$Vu,51:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,59:$VB,62:$VC,64:275},{25:29,27:[1,277],71:276},{26:$V71,67:[1,278]},{27:$VG,39:$Vq,42:72,47:$Vs,48:$Vt,49:279,50:$Vu,51:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,59:$VB,62:$VC},{54:[1,280]},{7:93,8:98,10:104,11:99,12:95,13:96,14:97,15:281,16:92,17:94,18:100,19:101,20:$VI,22:$VJ,23:$V0,24:$V1,25:29,27:$VK,34:105,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,72:14,75:20,76:$V8,93:$V9,94:$Va,95:$Vb,98:$VL,101:$Vd,106:$Ve,107:$VM},{7:93,8:98,10:104,11:99,12:95,13:96,14:97,16:168,17:94,18:100,19:101,20:$VI,22:$VJ,23:$V0,24:$V1,25:29,27:$VK,34:105,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,40:[1,282],71:13,72:14,75:20,76:$V8,93:$V9,94:$Va,95:$Vb,98:$VL,101:$Vd,106:$Ve,107:$VM},{26:$V71,46:[1,283]},{21:[1,284]},{67:[1,285]},{27:$VG,39:$Vq,42:72,47:$Vs,48:$Vt,49:286,50:$Vu,51:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,59:$VB,62:$VC},{7:93,8:98,10:104,11:99,12:95,13:96,14:97,15:287,16:92,17:94,18:100,19:101,20:$VI,22:$VJ,23:$V0,24:$V1,25:29,27:$VK,34:105,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,72:14,75:20,76:$V8,93:$V9,94:$Va,95:$Vb,98:$VL,101:$Vd,106:$Ve,107:$VM},{27:[1,288]},{7:93,8:98,10:104,11:99,12:95,13:96,14:97,16:168,17:94,18:100,19:101,20:$VI,22:$VJ,23:$V0,24:$V1,25:29,27:$VK,34:105,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,72:14,75:20,76:$V8,78:[1,289],93:$V9,94:$Va,95:$Vb,98:$VL,101:$Vd,106:$Ve,107:$VM},{67:[1,290]},{34:291,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7},{27:$VG,39:$Vq,42:72,47:$Vs,48:$Vt,49:133,50:$Vu,51:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,59:$VB,62:$VC,64:292},{43:[1,293]},{68:[1,294]},o($Vh,[2,130]),o($V81,[2,65],{58:$VX,59:$VY,60:$VZ,61:$V_,63:$V$}),{7:93,8:98,10:104,11:99,12:95,13:96,14:97,15:295,16:92,17:94,18:100,19:101,20:$VI,22:$VJ,23:$V0,24:$V1,25:29,27:$VK,34:105,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,72:14,75:20,76:$V8,93:$V9,94:$Va,95:$Vb,98:$VL,101:$Vd,106:$Ve,107:$VM},{7:93,8:98,10:104,11:99,12:95,13:96,14:97,16:168,17:94,18:100,19:101,20:$VI,22:$VJ,23:$V0,24:$V1,25:29,27:$VK,34:105,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,72:14,75:20,76:$V8,78:[1,296],93:$V9,94:$Va,95:$Vb,98:$VL,101:$Vd,106:$Ve,107:$VM},o($VN,[2,135]),{46:[1,297]},{27:$VG,39:$Vq,42:72,47:$Vs,48:$Vt,49:298,50:$Vu,51:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,59:$VB,62:$VC},o($V01,[2,46]),o($V01,[2,47]),o($V01,[2,48]),o($V01,[2,49]),{45:[1,299]},{46:[1,300],90:$V11,91:$V21},{77:[1,301]},{7:93,8:98,10:104,11:99,12:95,13:96,14:97,16:168,17:94,18:100,19:101,20:$VI,22:$VJ,23:$V0,24:$V1,25:29,27:$VK,34:105,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,72:14,75:20,76:$V8,78:[1,302],93:$V9,94:$Va,95:$Vb,98:$VL,101:$Vd,106:$Ve,107:$VM},{27:$VG,39:$Vq,42:72,47:$Vs,48:$Vt,49:69,50:$Vu,51:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,59:$VB,62:$VC,69:303,83:89,92:$VH},{21:[1,304]},o($V41,[2,129]),{77:[1,305]},{26:$V71,46:[1,306]},{46:[1,307]},o($Vk,$Vl),o($V51,[2,87]),{21:[1,308],58:$VX,59:$VY,60:$VZ,61:$V_,63:$V$},{67:[1,309]},{7:93,8:98,10:104,11:99,12:95,13:96,14:97,16:168,17:94,18:100,19:101,20:$VI,22:$VJ,23:$V0,24:$V1,25:29,27:$VK,34:105,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,72:14,75:20,76:$V8,78:[1,310],93:$V9,94:$Va,95:$Vb,98:$VL,101:$Vd,106:$Ve,107:$VM},{7:93,8:98,10:104,11:99,12:95,13:96,14:97,15:311,16:92,17:94,18:100,19:101,20:$VI,22:$VJ,23:$V0,24:$V1,25:29,27:$VK,34:105,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,72:14,75:20,76:$V8,93:$V9,94:$Va,95:$Vb,98:$VL,101:$Vd,106:$Ve,107:$VM},{21:[1,312]},o($Vg,[2,74]),{21:[1,313],66:[1,314]},{21:[1,315],58:$VX,59:$VY,60:$VZ,61:$V_,63:$V$},{7:93,8:98,10:104,11:99,12:95,13:96,14:97,16:168,17:94,18:100,19:101,20:$VI,22:$VJ,23:$V0,24:$V1,25:29,27:$VK,34:105,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,72:14,75:20,76:$V8,78:[1,316],93:$V9,94:$Va,95:$Vb,98:$VL,101:$Vd,106:$Ve,107:$VM},o($V91,[2,67],{66:[1,317]}),o($Vf,[2,125]),o($V91,[2,69]),{66:[1,318]},{26:$V71,67:[1,319]},{74:[1,320]},{66:[1,322],73:[1,321]},{7:93,8:98,10:104,11:99,12:95,13:96,14:97,16:168,17:94,18:100,19:101,20:$VI,22:$VJ,23:$V0,24:$V1,25:29,27:$VK,34:105,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,72:14,75:20,76:$V8,78:[1,323],93:$V9,94:$Va,95:$Vb,98:$VL,101:$Vd,106:$Ve,107:$VM},o($Vf,[2,127]),o($V01,[2,45]),{46:[1,324],58:$VX,59:$VY,60:$VZ,61:$V_,63:$V$},{27:$VG,39:$Vq,42:72,47:$Vs,48:$Vt,49:325,50:$Vu,51:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,59:$VB,62:$VC},{77:[1,326]},{7:93,8:98,10:104,11:99,12:95,13:96,14:97,15:327,16:92,17:94,18:100,19:101,20:$VI,22:$VJ,23:$V0,24:$V1,25:29,27:$VK,34:105,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,72:14,75:20,76:$V8,93:$V9,94:$Va,95:$Vb,98:$VL,101:$Vd,106:$Ve,107:$VM},o($Vh,[2,117]),{46:[1,328],90:$V11,91:$V21},o($V41,[2,128]),{96:329,97:[1,330]},{21:[1,331]},{77:[1,332]},o($Vg,[2,94]),{68:[1,333]},o($Vb1,[2,97]),{7:93,8:98,10:104,11:99,12:95,13:96,14:97,16:168,17:94,18:100,19:101,20:$VI,21:[2,105],22:$VJ,23:$V0,24:$V1,25:29,27:$VK,34:105,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,72:14,75:20,76:$V8,93:$V9,94:$Va,95:$Vb,98:$VL,101:$Vd,106:$Ve,107:$VM},o($Vg,[2,73]),o($Vg,[2,92]),{54:[1,334]},o($Vg,[2,76]),o($Vf,[2,124]),{67:[1,335]},{54:[1,336]},{21:[1,337]},{45:[1,338]},{34:339,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7},{66:[1,340]},o($Vf,[2,126]),o($V01,[2,62]),{46:[1,341],58:$VX,59:$VY,60:$VZ,61:$V_,63:$V$},{7:93,8:98,10:104,11:99,12:95,13:96,14:97,15:342,16:92,17:94,18:100,19:101,20:$VI,22:$VJ,23:$V0,24:$V1,25:29,27:$VK,34:105,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,72:14,75:20,76:$V8,93:$V9,94:$Va,95:$Vb,98:$VL,101:$Vd,106:$Ve,107:$VM},{7:93,8:98,10:104,11:99,12:95,13:96,14:97,16:168,17:94,18:100,19:101,20:$VI,22:$VJ,23:$V0,24:$V1,25:29,27:$VK,34:105,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,72:14,75:20,76:$V8,78:[1,343],93:$V9,94:$Va,95:$Vb,98:$VL,101:$Vd,106:$Ve,107:$VM},{21:[1,344]},{78:[1,346],97:[1,347],99:[1,345]},{27:$VG,39:$Vq,42:72,47:$Vs,48:$Vt,49:348,50:$Vu,51:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,59:$VB,62:$VC},o($V41,[2,142]),{7:93,8:98,10:104,11:99,12:95,13:96,14:97,15:349,16:92,17:94,18:100,19:101,20:$VI,22:$VJ,23:$V0,24:$V1,25:29,27:$VK,34:105,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,72:14,75:20,76:$V8,93:$V9,94:$Va,95:$Vb,98:$VL,101:$Vd,106:$Ve,107:$VM},{27:$VG,39:$Vq,42:72,47:$Vs,48:$Vt,49:350,50:$Vu,51:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,59:$VB,62:$VC},{67:[1,351]},o($V91,[2,68]),{67:[1,352]},o($Vg,[2,90]),{46:[1,353]},{66:[1,354]},{27:$VG,39:$Vq,42:72,47:$Vs,48:$Vt,49:133,50:$Vu,51:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,59:$VB,62:$VC,64:355},o($V01,[2,50]),{7:93,8:98,10:104,11:99,12:95,13:96,14:97,16:168,17:94,18:100,19:101,20:$VI,22:$VJ,23:$V0,24:$V1,25:29,27:$VK,34:105,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,72:14,75:20,76:$V8,78:[1,356],93:$V9,94:$Va,95:$Vb,98:$VL,101:$Vd,106:$Ve,107:$VM},o($Vb1,[2,99]),o($Vh,[2,118]),{40:[1,357]},o($V41,[2,123]),{27:$VG,39:$Vq,42:72,47:$Vs,48:$Vt,49:358,50:$Vu,51:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,59:$VB,62:$VC},{40:[1,359],58:$VX,59:$VY,60:$VZ,61:$V_,63:$V$},{7:93,8:98,10:104,11:99,12:95,13:96,14:97,16:168,17:94,18:100,19:101,20:$VI,22:$VJ,23:$V0,24:$V1,25:29,27:$VK,34:105,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,72:14,75:20,76:$V8,78:[1,360],93:$V9,94:$Va,95:$Vb,98:$VL,101:$Vd,106:$Ve,107:$VM},{21:[1,361],58:$VX,59:$VY,60:$VZ,61:$V_,63:$V$},{21:[1,362]},{21:[1,363]},{21:[1,364]},{54:[1,365]},{26:$V71,67:[1,366]},o($Vb1,[2,98]),{7:93,8:98,10:104,11:99,12:95,13:96,14:97,15:367,16:92,17:94,18:100,19:101,20:$VI,22:$VJ,23:$V0,24:$V1,25:29,27:$VK,34:105,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,72:14,75:20,76:$V8,93:$V9,94:$Va,95:$Vb,98:$VL,101:$Vd,106:$Ve,107:$VM},{40:[1,368],58:$VX,59:$VY,60:$VZ,61:$V_,63:$V$},{7:93,8:98,10:104,11:99,12:95,13:96,14:97,15:369,16:92,17:94,18:100,19:101,20:$VI,22:$VJ,23:$V0,24:$V1,25:29,27:$VK,34:105,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,72:14,75:20,76:$V8,93:$V9,94:$Va,95:$Vb,98:$VL,101:$Vd,106:$Ve,107:$VM},o($Vh,[2,119]),o($Vg,[2,95]),o($Vg,[2,93]),o($Vg,[2,88]),o($Vg,[2,96]),{67:[1,370]},{26:[1,371]},{7:93,8:98,10:104,11:99,12:95,13:96,14:97,16:168,17:94,18:100,19:101,20:$VI,22:$VJ,23:$V0,24:$V1,25:29,27:$VK,34:105,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,72:14,75:20,76:$V8,78:[1,372],93:$V9,94:$Va,95:$Vb,98:$VL,101:$Vd,106:$Ve,107:$VM},{7:93,8:98,10:104,11:99,12:95,13:96,14:97,15:373,16:92,17:94,18:100,19:101,20:$VI,22:$VJ,23:$V0,24:$V1,25:29,27:$VK,34:105,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,71:13,72:14,75:20,76:$V8,93:$V9,94:$Va,95:$Vb,98:$VL,101:$Vd,106:$Ve,107:$VM},o($Vc1,[2,121],{71:13,72:14,75:20,25:29,7:93,17:94,12:95,13:96,14:97,8:98,11:99,18:100,19:101,10:104,34:105,16:168,20:$VI,22:$VJ,23:$V0,24:$V1,27:$VK,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,76:$V8,93:$V9,94:$Va,95:$Vb,98:$VL,101:$Vd,106:$Ve,107:$VM}),{66:[1,374]},{66:[1,375]},o($V41,[2,122]),o($Vc1,[2,120],{71:13,72:14,75:20,25:29,7:93,17:94,12:95,13:96,14:97,8:98,11:99,18:100,19:101,10:104,34:105,16:168,20:$VI,22:$VJ,23:$V0,24:$V1,27:$VK,35:$V3,36:$V4,37:$V5,38:$V6,39:$V7,76:$V8,93:$V9,94:$Va,95:$Vb,98:$VL,101:$Vd,106:$Ve,107:$VM}),{54:[1,376]},{27:$VG,39:$Vq,42:72,47:$Vs,48:$Vt,49:133,50:$Vu,51:$Vv,53:$Vw,54:$Vx,55:$Vy,56:$Vz,57:$VA,59:$VB,62:$VC,64:377},{67:[1,378]},{26:$V71,67:[1,379]},{21:[1,380]},{67:[1,381]},o($Vg,[2,89]),{21:[1,382]},o($Vg,[2,91])],
defaultActions: {32:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


    const {TipoDato} = require("../Interprete/expresion")

    // Expresiones
    const Aritmetica = require("../Interprete/Expresiones/aritmetica")
    const Relacional = require("../Interprete/Expresiones/relacional")
    const Dato = require("../Interprete/Expresiones/dato")
    const Negativo = require("../Interprete/Expresiones/negativo")
    const opLogico = require("../Interprete/Expresiones/opLogicos")
    const Negacion = require("../Interprete/Expresiones/negacion")
    const FuncionCout = require("../Interprete/Expresiones/funcioncout")
    const Variable = require("../Interprete/Expresiones/variable")

    // Instrucciones
    const Cout = require("../Interprete/Instrucciones/cout")
    const If = require("../Interprete/Instrucciones/if")
    const ElseIf = require("../Interprete/Instrucciones/elseif")
    const Else = require("../Interprete/Instrucciones/else")
    const While = require("../Interprete/Instrucciones/while")
    const DoWhile = require("../Interprete/Instrucciones/dowhile")
    const For = require("../Interprete/Instrucciones/for")
    const Break = require("../Interprete/Instrucciones/break")
    const Declaracion = require("../Interprete/Instrucciones/declaracion")
    const Ternario = require("../Interprete/Instrucciones/ternario")
    const ActualizacionFor = require("../Interprete/Instrucciones/actualizacionfor")
    const ModificarVar = require("../Interprete/Instrucciones/modificarvar")

    // Operaciones Mayores
    const SentenciaIf = require("../Interprete/OperacionesMayores/sentenciaIf")
    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:return 23; 
break;
case 5:return 24; 
break;
case 6:return 35;
break;
case 7:return 36;
break;
case 8:return 37;
break;
case 9:return 38;
break;
case 10:return 41;
break;
case 11:return 73;
break;
case 12:return 76;
break;
case 13:return 80;
break;
case 14:return 93;
break;
case 15:return 95;
break;
case 16:return 94;
break;
case 17:return 20;
break;
case 18:return 22;
break;
case 19:return 107;
break;
case 20:return 100;
break;
case 21:return 106;
break;
case 22:return 103;
break;
case 23:return 50;
break;
case 24:return 51;
break;
case 25:return 48;
break;
case 26:return 44;
break;
case 27:return 47;
break;
case 28:return 52;
break;
case 29:return 39;
break;
case 30:return 74;
break;
case 31:return 101;
break;
case 32:return 98;
break;
case 33:return 97;
break;
case 34:return 99;
break;
case 35:return 55; 
break;
case 36:return 57; 
break;
case 37:return 56; 
break;
case 38:return 27; 
break;
case 39:return 53; 
break;
case 40:return 54; 
break;
case 41:return 29;
break;
case 42:return 30;
break;
case 43:return 31;
break;
case 44:return 32;
break;
case 45:return 33;
break;
case 46:return 58;
break;
case 47:return 59;
break;
case 48:return 60;
break;
case 49:return 61;
break;
case 50:return 62;
break;
case 51:return 63;
break;
case 52:return 'ENTRADA';
break;
case 53:return 105;
break;
case 54:return 84;
break;
case 55:return 85;
break;
case 56:return 87;
break;
case 57:return 89;
break;
case 58:return 88;
break;
case 59:return 86;
break;
case 60:return 68;
break;
case 61:return 90;
break;
case 62:return 91;
break;
case 63:return 92;
break;
case 64:return 45;
break;
case 65:return 46;
break;
case 66:return 77;
break;
case 67:return 78;
break;
case 68:return 66;
break;
case 69:return 67;
break;
case 70:return 21;
break;
case 71:return 26;
break;
case 72:return 40;
break;
case 73:return 43;
break;
case 74:return 82;
break;
case 75:return 5;
break;
case 76:console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:{COM_MULT})/i,/^(?:{COM_SIMPLE})/i,/^(?:(\/\*[\s\S]*?\*\/))/i,/^(?:(\/\/.*))/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:bool\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:cout\b)/i,/^(?:endl\b)/i,/^(?:toupper\b)/i,/^(?:tolower\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:std\b)/i,/^(?:c_str\b)/i,/^(?:execute\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:(true|false\b))/i,/^(?:('(([^\n\"\\]|\\.)*)'))/i,/^(?:([\"][^\"\n]+[\"]))/i,/^(?:([a-zA-Z_][a-zA-Z0-9_]*))/i,/^(?:([0-9]+\.[0-9]+\b))/i,/^(?:([0-9]+\b))/i,/^(?:\\n)/i,/^(?:\\)/i,/^(?:\\")/i,/^(?:\\t)/i,/^(?:')/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:pow\b)/i,/^(?:%)/i,/^(?:>>)/i,/^(?:<<)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?:,)/i,/^(?::)/i,/^(?:\.)/i,/^(?:\?)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Gramatica;
exports.Parser = Gramatica.Parser;
exports.parse = function () { return Gramatica.parse.apply(Gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}